<haxe>
	<class path="hedge.canvas.CanvasPixelArray" params="" file="src/hedge/canvas/CanvasPixelArray.hx" extern="1">
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="js.HtmlCollection" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom" extern="1">
		<length public="1" set="null"><c path="Int"/></length>
		<haxe_dynamic><c path="js.HtmlCollection.T"/></haxe_dynamic>
	</class>
	<typedef path="js.MetaDom" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<replaceChild set="method"><f a="child:oldChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
</f></removeChild>
	<previousSibling><c path="js.MetaDom.T"/></previousSibling>
	<parentNode><c path="js.MetaDom.T"/></parentNode>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><c path="js.MetaDom.T"/></nextSibling>
	<lastChild><c path="js.MetaDom.T"/></lastChild>
	<insertBefore set="method"><f a="newChild:refChild">
	<c path="js.MetaDom.T"/>
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<firstChild><c path="js.MetaDom.T"/></firstChild>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<c path="js.MetaDom.T"/>
</f></cloneNode>
	<childNodes><c path="js.HtmlCollection"><c path="js.MetaDom.T"/></c></childNodes>
	<appendChild set="method"><f a="child">
	<c path="js.MetaDom.T"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Dom" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx"><t path="js.MetaDom"><t path="js.Dom"/></t></typedef>
	<typedef path="js.HtmlDom" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.FormElement" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Anchor" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<accessKey><c path="String"/></accessKey>
</a></typedef>
	<typedef path="js.Body" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<vLink><c path="String"/></vLink>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<link><c path="String"/></link>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<bgColor><c path="String"/></bgColor>
	<background><c path="String"/></background>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<aLink><c path="String"/></aLink>
</a></typedef>
	<typedef path="js.Button" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Checkbox" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Document" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<writeln set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></writeln>
	<write set="method"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></write>
	<title><c path="String"/></title>
	<styleSheets><c path="js.HtmlCollection"><t path="js.StyleSheet"/></c></styleSheets>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<referrer><c path="String"/></referrer>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<open set="method"><f a=""><e path="Void"/></f></open>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<links><c path="js.HtmlCollection"><t path="js.Link"/></c></links>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<images><c path="js.HtmlCollection"><t path="js.Image"/></c></images>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getElementsByTag set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTag>
	<getElementsByName set="method"><f a="name">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByName>
	<getElementById set="method"><f a="id">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></getElementById>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<forms><c path="js.HtmlCollection"><t path="js.Form"/></c></forms>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<domain><c path="String"/></domain>
	<dir><c path="String"/></dir>
	<createTextNode set="method"><f a="text">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createTextNode>
	<createElement set="method"><f a="name">
	<c path="String"/>
	<t path="js.HtmlDom"/>
</f></createElement>
	<cookie><c path="String"/></cookie>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<body><t path="js.Body"/></body>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<anchors><c path="js.HtmlCollection"><t path="js.Anchor"/></c></anchors>
</a></typedef>
	<typedef path="js.Event" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<target><t path="js.HtmlDom"/></target>
	<stopPropagation set="method"><f a=""><e path="Void"/></f></stopPropagation>
	<shiftKey><e path="Bool"/></shiftKey>
	<screenY><c path="Int"/></screenY>
	<screenX><c path="Int"/></screenX>
	<keyCode><c path="Int"/></keyCode>
	<ctrlKey><e path="Bool"/></ctrlKey>
	<clientY><c path="Int"/></clientY>
	<clientX><c path="Int"/></clientX>
	<cancelBubble><e path="Bool"/></cancelBubble>
	<button><c path="Int"/></button>
	<altKey><e path="Bool"/></altKey>
</a></typedef>
	<typedef path="js.FileUpload" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Form" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<tabIndex><c path="Int"/></tabIndex>
	<submit set="method"><f a=""><e path="Void"/></f></submit>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<reset set="method"><f a=""><e path="Void"/></f></reset>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onsubmit><f a="">
	<t path="js.Event"/>
	<e path="Bool"/>
</f></onsubmit>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onreset><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onreset>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<method><c path="String"/></method>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<enctype><c path="String"/></enctype>
	<encoding><c path="String"/></encoding>
	<elements><c path="js.HtmlCollection"><t path="js.FormElement"/></c></elements>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<action><c path="String"/></action>
	<acceptCharset><c path="String"/></acceptCharset>
</a></typedef>
	<typedef path="js.Frame" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<noResize><e path="Bool"/></noResize>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentDocument><t path="js.Document"/></contentDocument>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Frameset" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Hidden" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.History" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<length><c path="Int"/></length>
	<go set="method"><f a="p">
	<d/>
	<e path="Void"/>
</f></go>
	<forward set="method"><f a=""><e path="Void"/></f></forward>
	<back set="method"><f a=""><e path="Void"/></f></back>
</a></typedef>
	<typedef path="js.IFrame" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrolling><c path="String"/></scrolling>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<marginWidth><c path="String"/></marginWidth>
	<marginHeight><c path="String"/></marginHeight>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<frameBorder><c path="String"/></frameBorder>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<contentWindow><t path="js.Window"/></contentWindow>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Image" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<vspace><c path="Int"/></vspace>
	<useMap><c path="String"/></useMap>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<src><c path="String"/></src>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<onabort><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onabort>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lowsrc><c path="String"/></lowsrc>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<isMap><e path="Bool"/></isMap>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hspace><c path="Int"/></hspace>
	<height><c path="Int"/></height>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<dir><c path="String"/></dir>
	<complete><e path="Bool"/></complete>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<border><c path="String"/></border>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
	<alt><c path="String"/></alt>
	<align><c path="String"/></align>
</a></typedef>
	<typedef path="js.Link" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<target><c path="String"/></target>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rev><c path="String"/></rev>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<rel><c path="String"/></rel>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<media><c path="String"/></media>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hreflang><c path="String"/></hreflang>
	<href><c path="String"/></href>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<charset><c path="String"/></charset>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Location" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<search><c path="String"/></search>
	<replace set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></replace>
	<reload set="method"><f a="?forceReload">
	<e path="Bool"/>
	<e path="Void"/>
</f></reload>
	<protocol><c path="String"/></protocol>
	<port><c path="Int"/></port>
	<pathname><c path="String"/></pathname>
	<href><c path="String"/></href>
	<hostname><c path="String"/></hostname>
	<host><c path="String"/></host>
	<hash><c path="String"/></hash>
	<assign set="method"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></assign>
</a></typedef>
	<typedef path="js.Navigator" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<userAgent><c path="String"/></userAgent>
	<taintEnabled set="method"><f a=""><e path="Bool"/></f></taintEnabled>
	<platform><c path="String"/></platform>
	<javaEnabled set="method"><f a=""><e path="Bool"/></f></javaEnabled>
	<cookieEnabled><e path="Bool"/></cookieEnabled>
	<appVersion><c path="String"/></appVersion>
	<appName><c path="String"/></appName>
	<appCodeName><c path="String"/></appCodeName>
</a></typedef>
	<typedef path="js.Option" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<text><c path="String"/></text>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selected><e path="Bool"/></selected>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultSelected><e path="Bool"/></defaultSelected>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Password" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Radio" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultChecked><e path="Bool"/></defaultChecked>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<checked><e path="Bool"/></checked>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Reset" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Screen" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<colorDepth><c path="Int"/></colorDepth>
	<availWidth><c path="Int"/></availWidth>
	<availHeight><c path="Int"/></availHeight>
</a></typedef>
	<typedef path="js.Select" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<selectedIndex><c path="Int"/></selectedIndex>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<remove set="method"><f a="o">
	<c path="Int"/>
	<e path="Void"/>
</f></remove>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<options><c path="js.HtmlCollection"><t path="js.Option"/></c></options>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<multiple><e path="Bool"/></multiple>
	<length><c path="Int"/></length>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Style" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<zoom><d/></zoom>
	<zIndex><c path="Int"/></zIndex>
	<writingMode><d/></writingMode>
	<wordWrap><d/></wordWrap>
	<wordSpacing><d/></wordSpacing>
	<wordBreak><d/></wordBreak>
	<width><c path="String"/></width>
	<whiteSpace><d/></whiteSpace>
	<visibility><d/></visibility>
	<verticalAlign><d/></verticalAlign>
	<unicodeBidi><d/></unicodeBidi>
	<top><c path="String"/></top>
	<textUnderlinePosition><d/></textUnderlinePosition>
	<textTransform><d/></textTransform>
	<textShadow><d/></textShadow>
	<textOverflow><d/></textOverflow>
	<textKashidaSpace><d/></textKashidaSpace>
	<textJustifyTrim><d/></textJustifyTrim>
	<textJustify><d/></textJustify>
	<textIndent><d/></textIndent>
	<textDecorationLineUnderline><d/></textDecorationLineUnderline>
	<textDecorationLineThrough><d/></textDecorationLineThrough>
	<textDecorationLineOverline><d/></textDecorationLineOverline>
	<textDecorationLineNone><d/></textDecorationLineNone>
	<textDecorationBlink><d/></textDecorationBlink>
	<textDecoration><d/></textDecoration>
	<textAutospace><d/></textAutospace>
	<textAlignLast><d/></textAlignLast>
	<textAlign><d/></textAlign>
	<styleFloat><d/></styleFloat>
	<rubyPosition><d/></rubyPosition>
	<rubyOverhang><d/></rubyOverhang>
	<rubyAlign><d/></rubyAlign>
	<right><c path="String"/></right>
	<quotes><d/></quotes>
	<position><d/></position>
	<paddingTop><d/></paddingTop>
	<paddingRight><d/></paddingRight>
	<paddingLeft><d/></paddingLeft>
	<paddingBottom><d/></paddingBottom>
	<padding><d/></padding>
	<overflowY><d/></overflowY>
	<overflowX><d/></overflowX>
	<overflow><d/></overflow>
	<outlineWidth><d/></outlineWidth>
	<outlineStyle><d/></outlineStyle>
	<outlineColor><d/></outlineColor>
	<outline><d/></outline>
	<minWidth><d/></minWidth>
	<minHeight><d/></minHeight>
	<maxWidth><d/></maxWidth>
	<maxHeight><d/></maxHeight>
	<marks><d/></marks>
	<markerOffset><d/></markerOffset>
	<marginTop><d/></marginTop>
	<marginRight><d/></marginRight>
	<marginLeft><d/></marginLeft>
	<marginBottom><d/></marginBottom>
	<margin><d/></margin>
	<listStyleType><c path="String"/></listStyleType>
	<listStylePosition><d/></listStylePosition>
	<listStyleImage><d/></listStyleImage>
	<listStyle><d/></listStyle>
	<lineHeight><d/></lineHeight>
	<lineBreak><d/></lineBreak>
	<letterSpacing><d/></letterSpacing>
	<left><c path="String"/></left>
	<height><c path="String"/></height>
	<fontWeight><d/></fontWeight>
	<fontVariant><d/></fontVariant>
	<fontStyle><d/></fontStyle>
	<fontStretch><d/></fontStretch>
	<fontSizeAdjust><d/></fontSizeAdjust>
	<fontSize><d/></fontSize>
	<fontFamily><d/></fontFamily>
	<font><d/></font>
	<display><d/></display>
	<direction><d/></direction>
	<cursor><d/></cursor>
	<cssText><d/></cssText>
	<cssFloat><d/></cssFloat>
	<counterReset><d/></counterReset>
	<counterIncrement><d/></counterIncrement>
	<content><d/></content>
	<color><d/></color>
	<clipTop><d/></clipTop>
	<clipRight><d/></clipRight>
	<clipLeft><d/></clipLeft>
	<clipBottom><d/></clipBottom>
	<clip><d/></clip>
	<clear><c path="String"/></clear>
	<bottom><c path="String"/></bottom>
	<borderWidth><d/></borderWidth>
	<borderTopWidth><d/></borderTopWidth>
	<borderTopStyle><d/></borderTopStyle>
	<borderTopColor><d/></borderTopColor>
	<borderTop><d/></borderTop>
	<borderStyle><c path="String"/></borderStyle>
	<borderRightWidth><d/></borderRightWidth>
	<borderRightStyle><d/></borderRightStyle>
	<borderRightColor><d/></borderRightColor>
	<borderRight><d/></borderRight>
	<borderLeftWidth><d/></borderLeftWidth>
	<borderLeftStyle><d/></borderLeftStyle>
	<borderLeftColor><d/></borderLeftColor>
	<borderLeft><d/></borderLeft>
	<borderColor><d/></borderColor>
	<borderBottomWidth><d/></borderBottomWidth>
	<borderBottomStyle><d/></borderBottomStyle>
	<borderBottomColor><d/></borderBottomColor>
	<borderBottom><d/></borderBottom>
	<border><d/></border>
	<backgroundRepeat><d/></backgroundRepeat>
	<backgroundPosition><d/></backgroundPosition>
	<backgroundImage><d/></backgroundImage>
	<backgroundColor><d/></backgroundColor>
	<backgroundAttachment><d/></backgroundAttachment>
	<background><d/></background>
</a></typedef>
	<typedef path="js.StyleSheet" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<href><c path="String"/></href>
	<disabled><e path="Bool"/></disabled>
</a></typedef>
	<typedef path="js.Submit" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselectstart><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselectstart>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Text" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<size><c path="Int"/></size>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<maxLength><c path="Int"/></maxLength>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Textarea" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<value><c path="String"/></value>
	<type><c path="String"/></type>
	<title><c path="String"/></title>
	<style><t path="js.Style"/></style>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<select set="method"><f a=""><e path="Void"/></f></select>
	<scrollWidth set="null"><c path="Int"/></scrollWidth>
	<scrollTop><c path="Int"/></scrollTop>
	<scrollLeft><c path="Int"/></scrollLeft>
	<scrollHeight set="null"><c path="Int"/></scrollHeight>
	<rows><c path="Int"/></rows>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
</f></removeChild>
	<readOnly><e path="Bool"/></readOnly>
	<previousSibling><t path="js.HtmlDom"/></previousSibling>
	<parentNode><t path="js.HtmlDom"/></parentNode>
	<onselect><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onselect>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onmouseup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseup>
	<onmouseover><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseover>
	<onmouseout><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmouseout>
	<onmousemove><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousemove>
	<onmousedown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onmousedown>
	<onkeyup><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeyup>
	<onkeypress><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeypress>
	<onkeydown><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onkeydown>
	<onfocus><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onfocus>
	<ondblclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></ondblclick>
	<onclick><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onclick>
	<onchange><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onchange>
	<onblur><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onblur>
	<offsetWidth><c path="Int"/></offsetWidth>
	<offsetTop><c path="Int"/></offsetTop>
	<offsetParent><t path="js.HtmlDom"/></offsetParent>
	<offsetLeft><c path="Int"/></offsetLeft>
	<offsetHeight><c path="Int"/></offsetHeight>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.HtmlDom"/></nextSibling>
	<name><c path="String"/></name>
	<lastChild><t path="js.HtmlDom"/></lastChild>
	<lang><c path="String"/></lang>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.HtmlDom"/>
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></insertBefore>
	<innerHTML><c path="String"/></innerHTML>
	<id><c path="String"/></id>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getElementsByTagName set="method"><f a="tag">
	<c path="String"/>
	<c path="js.HtmlCollection"><t path="js.HtmlDom"/></c>
</f></getElementsByTagName>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<form><t path="js.Form"/></form>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<firstChild><t path="js.HtmlDom"/></firstChild>
	<disabled><e path="Bool"/></disabled>
	<dir><c path="String"/></dir>
	<defaultValue><c path="String"/></defaultValue>
	<cols><c path="Int"/></cols>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.HtmlDom"/>
</f></cloneNode>
	<clientWidth set="null"><c path="Int"/></clientWidth>
	<clientHeight set="null"><c path="Int"/></clientHeight>
	<click set="method"><f a=""><e path="Void"/></f></click>
	<className><c path="String"/></className>
	<childNodes><c path="js.HtmlCollection"><t path="js.HtmlDom"/></c></childNodes>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<appendChild set="method"><f a="child">
	<t path="js.HtmlDom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="js.Window" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Dom.hx" module="js.Dom"><a>
	<top><t path="js.Window"/></top>
	<status><c path="String"/></status>
	<self><t path="js.Window"/></self>
	<scrollTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollTo>
	<scrollBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scrollBy>
	<screen><t path="js.Screen"/></screen>
	<prompt set="method"><f a="msg:?def">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></prompt>
	<print set="method"><f a=""><e path="Void"/></f></print>
	<parent><t path="js.Window"/></parent>
	<outerWidth><c path="Int"/></outerWidth>
	<outerHeight><c path="Int"/></outerHeight>
	<opener><t path="js.Window"/></opener>
	<open set="method"><f a="url:?name:?features">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="js.Window"/>
</f></open>
	<onunload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onunload>
	<onscroll><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onscroll>
	<onresize><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onresize>
	<onload><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onload>
	<onerror><f a="">
	<t path="js.Event"/>
	<e path="Void"/>
</f></onerror>
	<navigator><t path="js.Navigator"/></navigator>
	<name><c path="String"/></name>
	<moveTo set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveTo>
	<moveBy set="method"><f a="dx:dy">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></moveBy>
	<location><t path="js.Location"/></location>
	<length><c path="Int"/></length>
	<innerWidth><c path="Int"/></innerWidth>
	<innerHeight><c path="Int"/></innerHeight>
	<history><t path="js.History"/></history>
	<frames><c path="js.HtmlCollection"><t path="js.Frame"/></c></frames>
	<focus set="method"><f a=""><e path="Void"/></f></focus>
	<document><t path="js.Document"/></document>
	<defaultStatus><c path="String"/></defaultStatus>
	<confirm set="method"><f a="msg">
	<c path="String"/>
	<e path="Bool"/>
</f></confirm>
	<closed><e path="Bool"/></closed>
	<close set="method"><f a=""><e path="Void"/></f></close>
	<blur set="method"><f a=""><e path="Void"/></f></blur>
	<alert set="method"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></alert>
</a></typedef>
	<class path="hedge.Object" params="" file="src/hedge/Object.hx">
		<__jq__ public="1"><c path="JQuery"/></__jq__>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="hedge.events.IEventDispatcher" params="" file="src/hedge/events/IEventDispatcher.hx">
		<addEventListener public="1" set="method" line="10"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method" line="14"><f a="event">
	<c path="hedge.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method" line="18"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method" line="22"><f a="type:listener:?useCapture">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method" line="26"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.events.EventDispatcher" params="" file="src/hedge/events/EventDispatcher.hx">
		<extends path="hedge.Object"/>
		<implements path="hedge.events.IEventDispatcher"/>
		<addEventListener public="1" set="method" line="20"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method" line="31"><f a="event">
	<c path="hedge.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method" line="39"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method" line="44"><f a="type:listener:?useCapture">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method" line="53"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<new public="1" set="method" line="16"><f a="?target">
	<c path="hedge.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.DisplayObject" params="" file="src/hedge/display/DisplayObject.hx">
		<extends path="hedge.events.EventDispatcher"/>
		<alpha public="1" get="getAlpha" set="setAlpha"><c path="Float"/></alpha>
		<blendMode public="1" get="getBlendMode" set="setBlendMode"><c path="String"/></blendMode>
		<cacheAsBitmap public="1" get="getCache" set="setCache"><e path="Bool"/></cacheAsBitmap>
		<mask public="1" get="getMask" set="setMask"><c path="hedge.display.DisplayObject"/></mask>
		<mouseX public="1" get="getMouseX" set="null"><c path="Float"/></mouseX>
		<mouseY public="1" get="getMouseY" set="null"><c path="Float"/></mouseY>
		<name public="1" get="getName" set="setName"><c path="String"/></name>
		<opaqueBackground public="1" get="getOpaqueBackground" set="setOpaqueBackground"><d/></opaqueBackground>
		<parent public="1" get="getParent" set="setParent"><c path="hedge.display.DisplayObjectContainer"/></parent>
		<root public="1" get="getRoot" set="null"><c path="hedge.display.DisplayObject"/></root>
		<rotation public="1" get="getRotation" set="setRotation"><c path="Float"/></rotation>
		<scale9Grid public="1" get="getScale9" set="setScale9"><c path="hedge.geom.Rectangle"/></scale9Grid>
		<scaleX public="1" get="getScaleX" set="setScaleX"><c path="Float"/></scaleX>
		<scaleY public="1" get="getScaleY" set="setScaleY"><c path="Float"/></scaleY>
		<scrollRect public="1" get="getScrollRect" set="setScrollRect"><c path="hedge.geom.Rectangle"/></scrollRect>
		<stage public="1" get="getStage" set="null"><c path="hedge.display.Stage"/></stage>
		<visible public="1" get="getVisible" set="setVisible"><e path="Bool"/></visible>
		<height public="1" get="getHeight" set="setHeight"><c path="Float"/></height>
		<width public="1" get="getWidth" set="setWidth"><c path="Float"/></width>
		<x public="1" get="getX" set="setX"><c path="Float"/></x>
		<y public="1" get="getY" set="setY"><c path="Float"/></y>
		<__originalName__ public="1"><c path="String"/></__originalName__>
		<initialize set="method" line="69"><f a=""><e path="Void"/></f></initialize>
		<generateJQuery set="method" line="81"><f a=""><e path="Void"/></f></generateJQuery>
		<getMouseX set="method" line="85"><f a=""><c path="Float"/></f></getMouseX>
		<getMouseY set="method" line="89"><f a=""><c path="Float"/></f></getMouseY>
		<getRoot set="method" line="93"><f a=""><c path="hedge.display.DisplayObject"/></f></getRoot>
		<getStage set="method" line="97"><f a=""><c path="hedge.display.Stage"/></f></getStage>
		<getParent set="method" line="101"><f a=""><c path="hedge.display.DisplayObjectContainer"/></f></getParent>
		<setParent set="method" line="105"><f a="value">
	<c path="hedge.display.DisplayObjectContainer"/>
	<c path="hedge.display.DisplayObjectContainer"/>
</f></setParent>
		<getAlpha set="method" line="110"><f a=""><c path="Float"/></f></getAlpha>
		<setAlpha set="method" line="114"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setAlpha>
		<getBlendMode set="method" line="119"><f a=""><c path="String"/></f></getBlendMode>
		<setBlendMode set="method" line="123"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setBlendMode>
		<getCache set="method" line="128"><f a=""><e path="Bool"/></f></getCache>
		<setCache set="method" line="132"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setCache>
		<getMask set="method" line="137"><f a=""><c path="hedge.display.DisplayObject"/></f></getMask>
		<setMask set="method" line="141"><f a="value">
	<c path="hedge.display.DisplayObject"/>
	<c path="hedge.display.DisplayObject"/>
</f></setMask>
		<getName set="method" line="146"><f a=""><c path="String"/></f></getName>
		<setName set="method" line="150"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setName>
		<getOpaqueBackground set="method" line="155"><f a=""><d/></f></getOpaqueBackground>
		<setOpaqueBackground set="method" line="159"><f a="value">
	<d/>
	<d/>
</f></setOpaqueBackground>
		<getRotation set="method" line="164"><f a=""><c path="Float"/></f></getRotation>
		<setRotation set="method" line="168"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setRotation>
		<getScale9 set="method" line="173"><f a=""><c path="hedge.geom.Rectangle"/></f></getScale9>
		<setScale9 set="method" line="177"><f a="value">
	<c path="hedge.geom.Rectangle"/>
	<c path="hedge.geom.Rectangle"/>
</f></setScale9>
		<getScaleX set="method" line="182"><f a=""><c path="Float"/></f></getScaleX>
		<setScaleX set="method" line="186"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setScaleX>
		<getScaleY set="method" line="191"><f a=""><c path="Float"/></f></getScaleY>
		<setScaleY set="method" line="195"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setScaleY>
		<getScrollRect set="method" line="200"><f a=""><c path="hedge.geom.Rectangle"/></f></getScrollRect>
		<setScrollRect set="method" line="204"><f a="value">
	<c path="hedge.geom.Rectangle"/>
	<c path="hedge.geom.Rectangle"/>
</f></setScrollRect>
		<getVisible set="method" line="209"><f a=""><e path="Bool"/></f></getVisible>
		<setVisible set="method" line="213"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setVisible>
		<getHeight set="method" line="220"><f a=""><c path="Float"/></f></getHeight>
		<setHeight set="method" line="224"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setHeight>
		<getWidth set="method" line="229"><f a=""><c path="Float"/></f></getWidth>
		<setWidth set="method" line="233"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setWidth>
		<getX set="method" line="238"><f a=""><c path="Float"/></f></getX>
		<setX set="method" line="242"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setX>
		<getY set="method" line="247"><f a=""><c path="Float"/></f></getY>
		<setY set="method" line="251"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setY>
		<new public="1" set="method" line="40"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="hedge.display.InteractiveObject" params="" file="src/hedge/display/InteractiveObject.hx">
		<extends path="hedge.display.DisplayObject"/>
		<onKeyDown set="method" line="27"><f a="e">
	<c path="hedge.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyDown>
		<onKeyUp set="method" line="31"><f a="e">
	<c path="hedge.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyUp>
		<new public="1" set="method" line="18"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.DisplayObjectContainer" params="" file="src/hedge/display/DisplayObjectContainer.hx">
		<extends path="hedge.display.InteractiveObject"/>
		<mouseChildren public="1" get="getMouseChildren" set="setMouseChildren"><e path="Bool"/></mouseChildren>
		<numChildren public="1" get="getNumChildren" set="setNumChildren"><c path="Int"/></numChildren>
		<tabChildren public="1" get="getTabChildren" set="setTabChildren"><e path="Bool"/></tabChildren>
		<textSnapshot public="1" get="getTextSnapshot" set="null"><c path="hedge.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method" line="24"><f a="child">
	<c path="hedge.display.DisplayObject"/>
	<c path="hedge.display.DisplayObject"/>
</f></addChild>
		<getChildAt public="1" set="method" line="43"><f a="index">
	<c path="Int"/>
	<c path="hedge.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<c path="hedge.display.DisplayObject"/>
</f></getChildByName>
		<removeChild public="1" set="method" line="59"><f a="child">
	<c path="hedge.display.DisplayObject"/>
	<c path="hedge.display.DisplayObject"/>
</f></removeChild>
		<getMouseChildren set="method" line="84"><f a=""><e path="Bool"/></f></getMouseChildren>
		<setMouseChildren set="method" line="88"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setMouseChildren>
		<getNumChildren set="method" line="93"><f a=""><c path="Int"/></f></getNumChildren>
		<setNumChildren set="method" line="97"><f a="value">
	<c path="Int"/>
	<c path="Int"/>
</f></setNumChildren>
		<getTabChildren set="method" line="102"><f a=""><e path="Bool"/></f></getTabChildren>
		<setTabChildren set="method" line="106"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setTabChildren>
		<getTextSnapshot set="method" line="111"><f a=""><c path="hedge.text.TextSnapshot"/></f></getTextSnapshot>
		<new public="1" set="method" line="19"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.Sprite" params="" file="src/hedge/display/Sprite.hx">
		<extends path="hedge.display.DisplayObjectContainer"/>
		<buttonMode public="1" get="getButtonMode" set="setButtonMode"><e path="Bool"/></buttonMode>
		<dropTarget public="1" get="getDropTarget" set="setDropTarget"><c path="hedge.display.DisplayObject"/></dropTarget>
		<graphics public="1" get="getGraphics" set="null"><c path="hedge.display.Graphics"/></graphics>
		<hitArea public="1" get="getHitArea" set="setHitArea"><c path="hedge.display.Sprite"/></hitArea>
		<useHandCursor public="1" get="getHandCursor" set="setHandCursor"><e path="Bool"/></useHandCursor>
		<_g><c path="hedge.display.Graphics"/></_g>
		<getButtonMode set="method" line="47"><f a=""><e path="Bool"/></f></getButtonMode>
		<setButtonMode set="method" line="51"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setButtonMode>
		<getDropTarget set="method" line="56"><f a=""><c path="hedge.display.DisplayObject"/></f></getDropTarget>
		<setDropTarget set="method" line="60"><f a="value">
	<c path="hedge.display.DisplayObject"/>
	<c path="hedge.display.DisplayObject"/>
</f></setDropTarget>
		<getGraphics set="method" line="65"><f a=""><c path="hedge.display.Graphics"/></f></getGraphics>
		<getHitArea set="method" line="72"><f a=""><c path="hedge.display.Sprite"/></f></getHitArea>
		<setHitArea set="method" line="76"><f a="value">
	<c path="hedge.display.Sprite"/>
	<c path="hedge.display.Sprite"/>
</f></setHitArea>
		<getHandCursor set="method" line="81"><f a=""><e path="Bool"/></f></getHandCursor>
		<setHandCursor set="method" line="85"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setHandCursor>
		<new public="1" set="method" line="25"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.MovieClip" params="" file="src/hedge/display/MovieClip.hx">
		<extends path="hedge.display.Sprite"/>
		<currentFrame public="1"><c path="Int"/></currentFrame>
		<__timers__ public="1"><c path="Array"><d/></c></__timers__>
		<__movieclip__ public="1"><t path="hedge.MovieclipStructure"/></__movieclip__>
		<__frames__><c path="Array"><t path="hedge.MovieclipFrame"/></c></__frames__>
		<__layers__><c path="Array"><t path="hedge.MovieclipLayer"/></c></__layers__>
		<gotoAndStop public="1" set="method" line="73"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<play public="1" set="method" line="85"><f a=""><e path="Void"/></f></play>
		<stop public="1" set="method" line="97"><f a=""><e path="Void"/></f></stop>
		<__updateRender__ set="method" line="107"><f a="layer">
	<t path="hedge.MovieclipLayerBitmap"/>
	<e path="Void"/>
</f></__updateRender__>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Entity" params="" file="src/demo/wizardry/Entity.hx">
		<extends path="hedge.display.MovieClip"/>
		<radius public="1"><c path="Float"/></radius>
		<kinGroup public="1"><c path="Array"><d/></c></kinGroup>
		<isDestroyed public="1"><e path="Bool"/></isDestroyed>
		<setPosition public="1" set="method" line="21"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setPosition>
		<destroy public="1" set="method" line="30"><f a=""><e path="Void"/></f></destroy>
		<update public="1" set="method" line="35"><f a=""><e path="Void"/></f></update>
		<render public="1" set="method" line="39"><f a=""><e path="Void"/></f></render>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Person" params="" file="src/demo/wizardry/Person.hx">
		<extends path="demo.wizardry.Entity"/>
		<health public="1"><c path="Int"/></health>
		<speed public="1"><c path="Float"/></speed>
		<angle public="1"><c path="Float"/></angle>
		<speedX public="1"><c path="Float"/></speedX>
		<speedY public="1"><c path="Float"/></speedY>
		<north public="1"><c path="hedge.display.MovieClip"/></north>
		<south public="1"><c path="hedge.display.MovieClip"/></south>
		<east public="1"><c path="hedge.display.MovieClip"/></east>
		<west public="1"><c path="hedge.display.MovieClip"/></west>
		<animations public="1"><c path="Array"><c path="hedge.display.MovieClip"/></c></animations>
		<currentAnimation><c path="hedge.display.MovieClip"/></currentAnimation>
		<destroy public="1" set="method" line="60" override="1"><f a=""><e path="Void"/></f></destroy>
		<showAnimation set="method" line="65"><f a="animation">
	<c path="hedge.display.MovieClip"/>
	<e path="Void"/>
</f></showAnimation>
		<showStill set="method" line="77"><f a="animation:?frameNum">
	<c path="hedge.display.MovieClip"/>
	<c path="Int"/>
	<e path="Void"/>
</f></showStill>
		<showWalk set="method" line="89"><f a=""><e path="Void"/></f></showWalk>
		<showIdle set="method" line="103"><f a=""><e path="Void"/></f></showIdle>
		<render public="1" set="method" line="107" override="1"><f a=""><e path="Void"/></f></render>
		<new public="1" set="method" line="28"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Gamepad" params="" file="src/demo/wizardry/Gamepad.hx">
		<extends path="hedge.events.EventDispatcher"/>
		<up public="1"><e path="Bool"/></up>
		<down public="1"><e path="Bool"/></down>
		<left public="1"><e path="Bool"/></left>
		<right public="1"><e path="Bool"/></right>
		<upLeft public="1"><e path="Bool"/></upLeft>
		<downLeft public="1"><e path="Bool"/></downLeft>
		<upRight public="1"><e path="Bool"/></upRight>
		<downRight public="1"><e path="Bool"/></downRight>
		<fire1 public="1"><e path="Bool"/></fire1>
		<fire2 public="1"><e path="Bool"/></fire2>
		<any public="1"><e path="Bool"/></any>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<angle public="1"><c path="Float"/></angle>
		<leftKey public="1"><c path="Int"/></leftKey>
		<rightKey public="1"><c path="Int"/></rightKey>
		<downKey public="1"><c path="Int"/></downKey>
		<upKey public="1"><c path="Int"/></upKey>
		<fire1Key public="1"><c path="Int"/></fire1Key>
		<fire2Key public="1"><c path="Int"/></fire2Key>
		<onKeyDown set="method" line="65"><f a="e">
	<c path="hedge.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyDown>
		<onKeyUp set="method" line="86"><f a="e">
	<c path="hedge.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyUp>
		<updateState set="method" line="107"><f a=""><e path="Void"/></f></updateState>
		<new public="1" set="method" line="49"><f a="stage">
	<c path="hedge.display.Stage"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="String" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="hedge.events.Event" params="" file="src/hedge/events/Event.hx">
		<extends path="hedge.Object"/>
		<ENTER_FRAME public="1" get="inline" set="null" line="60" static="1"><c path="String"/></ENTER_FRAME>
		<bubbles public="1"><e path="Bool"/></bubbles>
		<cancelable public="1"><e path="Bool"/></cancelable>
		<target public="1"><d/></target>
		<type public="1"><c path="String"/></type>
		<clone public="1" set="method" line="26"><f a=""><c path="hedge.events.Event"/></f></clone>
		<new public="1" set="method" line="19"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.events.KeyboardEvent" params="" file="src/hedge/events/KeyboardEvent.hx">
		<extends path="hedge.events.Event"/>
		<KEY_DOWN public="1" get="inline" set="null" line="17" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" get="inline" set="null" line="18" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><e path="Bool"/></altKey>
		<charCode public="1"><c path="Int"/></charCode>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<keyCode public="1"><c path="Int"/></keyCode>
		<keyLocation public="1"><c path="Int"/></keyLocation>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="43" override="1"><f a=""><c path="hedge.events.Event"/></f></clone>
		<new public="1" set="method" line="20"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue:?controlKeyValue:?commandKeyValue">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Game" params="" file="src/demo/wizardry/Game.hx">
		<extends path="hedge.display.Sprite"/>
		<numVillagers line="18" static="1"><c path="Int"/></numVillagers>
		<numEvilWizards line="19" static="1"><c path="Int"/></numEvilWizards>
		<instance public="1" static="1"><c path="demo.wizardry.Game"/></instance>
		<screenCenterX line="30" static="1"><c path="Float"/></screenCenterX>
		<screenCenterY line="31" static="1"><c path="Float"/></screenCenterY>
		<entities public="1"><c path="Array"><c path="demo.wizardry.Entity"/></c></entities>
		<villagers public="1"><c path="Array"><c path="demo.wizardry.Villager"/></c></villagers>
		<enemies public="1"><c path="Array"><c path="demo.wizardry.EvilWizard"/></c></enemies>
		<player public="1"><c path="demo.wizardry.PlayerWizard"/></player>
		<level public="1"><c path="demo.wizardry.Level"/></level>
		<scene public="1"><c path="hedge.display.Sprite"/></scene>
		<cameraX public="1"><c path="Float"/></cameraX>
		<cameraY public="1"><c path="Float"/></cameraY>
		<createScene set="method" line="48"><f a=""><e path="Void"/></f></createScene>
		<createLevel set="method" line="53"><f a=""><e path="Void"/></f></createLevel>
		<createVillagers set="method" line="62"><f a=""><e path="Void"/></f></createVillagers>
		<sortDepths set="method" line="68"><f a=""><e path="Void"/></f></sortDepths>
		<createPlayer set="method" line="84"><f a=""><e path="Void"/></f></createPlayer>
		<createEvilWizards set="method" line="91"><f a=""><e path="Void"/></f></createEvilWizards>
		<createEvilWizard set="method" line="97"><f a=""><e path="Void"/></f></createEvilWizard>
		<createVillager public="1" set="method" line="106"><f a=""><e path="Void"/></f></createVillager>
		<createExplosion public="1" set="method" line="117"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createExplosion>
		<addEntity public="1" set="method" line="124"><f a="entity">
	<c path="demo.wizardry.Entity"/>
	<e path="Void"/>
</f></addEntity>
		<removeEntity public="1" set="method" line="129"><f a="entity">
	<c path="demo.wizardry.Entity"/>
	<e path="Void"/>
</f></removeEntity>
		<update public="1" set="method" line="137"><f a=""><e path="Void"/></f></update>
		<updateCamera set="method" line="147"><f a=""><e path="Void"/></f></updateCamera>
		<new public="1" set="method" line="33"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.canvas.ImageData" params="" file="src/hedge/canvas/ImageData.hx" extern="1">
		<width public="1" set="null"><c path="Int"/></width>
		<height public="1" set="null"><c path="Int"/></height>
		<data public="1" set="null"><c path="hedge.canvas.CanvasPixelArray"/></data>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="js.XMLHttpRequest" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/XMLHttpRequest.hx" extern="1">
		<onreadystatechange public="1"><f a=""><e path="Void"/></f></onreadystatechange>
		<readyState public="1"><c path="Int"/></readyState>
		<responseText public="1"><c path="String"/></responseText>
		<status public="1"><c path="Int"/></status>
		<statusText public="1"><c path="String"/></statusText>
		<abort public="1" set="method"><f a=""><e path="Void"/></f></abort>
		<getAllResponseHeaders public="1" set="method"><f a=""><c path="String"/></f></getAllResponseHeaders>
		<getResponseHeader public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getResponseHeader>
		<setRequestHeader public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setRequestHeader>
		<open public="1" set="method"><f a="method:url:async">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></open>
		<send public="1" set="method"><f a="content">
	<c path="String"/>
	<e path="Void"/>
</f></send>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="hedge.canvas.CanvasRenderingContext2D" params="" file="src/hedge/canvas/CanvasRenderingContext2D.hx" extern="1">
		<width public="1"><c path="Int"/></width>
		<height public="1"><c path="Int"/></height>
		<toDataURL public="1" set="method"><f a="?type:?args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="String"/>
</f></toDataURL>
		<getContext public="1" set="method"><f a="contextId">
	<c path="String"/>
	<c path="hedge.canvas.CanvasRenderingContext2D"/>
</f></getContext>
		<canvas public="1" set="null"><t path="js.HtmlDom"/></canvas>
		<save public="1" set="method"><f a=""><e path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><e path="Void"/></f></restore>
		<scale public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<rotate public="1" set="method"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<translate public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<transform public="1" set="method"><f a="m11:m12:m21:m22:dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></transform>
		<setTransform public="1" set="method"><f a="m11:m12:m21:m22:dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setTransform>
		<drawImage public="1" set="method"><f a="image:sx:sy:?sw:?sh:?dx:?dy:?dw:?dh">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawImage>
		<globalAlpha public="1"><c path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<lineWidth public="1"><c path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><c path="Float"/></miterLimit>
		<strokeStyle public="1"><d/></strokeStyle>
		<fillStyle public="1"><d/></fillStyle>
		<shadowOffsetX public="1"><c path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><c path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><c path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="hedge.canvas.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method"><f a="x0:y0:r0:x1:y1:r1">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="hedge.canvas.CanvasGradient"/>
</f></createRadialGradient>
		<createPattern public="1" set="method"><f a="image:repetition">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></createPattern>
		<beginPath public="1" set="method"><f a=""><e path="Void"/></f></beginPath>
		<closePath public="1" set="method"><f a=""><e path="Void"/></f></closePath>
		<fill public="1" set="method"><f a=""><e path="Void"/></f></fill>
		<stroke public="1" set="method"><f a=""><e path="Void"/></f></stroke>
		<clip public="1" set="method"><f a=""><e path="Void"/></f></clip>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method"><f a="x1:y1:x2:y2:radius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></arcTo>
		<arc public="1" set="method"><f a="x:y:radius:startAngle:endAngle:anticlockwise">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></arc>
		<rect public="1" set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></rect>
		<isPointInPath public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></isPointInPath>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<fillText public="1" set="method"><f a="text:x:y:?maxWidth">
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></fillText>
		<strokeText public="1" set="method"><f a="text:x:y:?maxWidth">
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></strokeText>
		<measureText public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="hedge.canvas.TextMetrics"/>
</f></measureText>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></strokeRect>
		<createImageData public="1" set="method"><f a="sw:sh">
	<c path="Float"/>
	<c path="Float"/>
	<c path="hedge.canvas.ImageData"/>
</f></createImageData>
		<getImageData public="1" set="method"><f a="sx:sy:sw:sh">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="hedge.canvas.ImageData"/>
</f></getImageData>
		<putImageData public="1" set="method"><f a="imagedata:dx:dy:?dirtyX:?dirtyY:?dirtyWidth:?dirtyHeight">
	<c path="hedge.canvas.ImageData"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></putImageData>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="Class" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Reflect" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="46" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="50" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="54" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="79" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="83" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="87" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
		Does not work on Neko platform.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="95" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="102" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="108" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="115" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="demo.wizardry.Explosion" params="" file="src/demo/wizardry/Explosion.hx">
		<extends path="demo.wizardry.Entity"/>
		<update public="1" set="method" line="14" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="10"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="Math" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="JQuery" params="" file="src/JQuery.hx" extern="1">
		<add public="1" set="method">
			<f a="ele:?context">
				<d/>
				<t path="js.Document"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Add elements to the set of matched elements.
	</haxe_doc>
		</add>
		<addClass public="1" set="method">
			<f a="className">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Adds the specified class(es) to each of the set of matched elements.
	</haxe_doc>
		</addClass>
		<after public="1" set="method">
			<f a="content">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert content, specified by the parameter, after each element in the set of matched elements.
	</haxe_doc>
		</after>
		<ajaxComplete public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Register a handler to be called when Ajax requests complete. This is an Ajax Event.
	</haxe_doc>
		</ajaxComplete>
		<ajaxError public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
	</haxe_doc>
		</ajaxError>
		<ajaxSend public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Show a message before an Ajax request is sent.
	</haxe_doc>
		</ajaxSend>
		<ajaxStart public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
	</haxe_doc>
		</ajaxStart>
		<ajaxStop public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Hide a loading message after all the Ajax requests have stopped.
	</haxe_doc>
		</ajaxStop>
		<ajaxSuccess public="1" set="method">
			<f a="handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Show a message when an Ajax request completes successfully.
	</haxe_doc>
		</ajaxSuccess>
		<andSelf public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Add the previous set of elements on the stack to the current set.
	</haxe_doc>
		</andSelf>
		<animate public="1" set="method">
			<f a="properties:?durationOrOptions:?easing:?callBack">
				<d/>
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Perform a custom animation of a set of CSS properties.
	</haxe_doc>
		</animate>
		<append public="1" set="method">
			<f a="content">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert content, specified by the parameter, to the end of each element in the set of matched elements.
	</haxe_doc>
		</append>
		<appendTo public="1" set="method">
			<f a="target">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert every element in the set of matched elements to the end of the target.
	</haxe_doc>
		</appendTo>
		<attr public="1" set="method">
			<f a="attributeNameOrMap:?valueOrFunction">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the value of an attribute for the first element in the set of matched elements.
	</haxe_doc>
		</attr>
		<attrSet public="1" get="inline" set="null" line="85"><f a="attributeName:valueOrFunction">
	<c path="String"/>
	<d/>
	<c path="JQuery"/>
</f></attrSet>
		<before public="1" set="method">
			<f a="content">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert content, specified by the parameter, before each element in the set of matched elements.
	</haxe_doc>
		</before>
		<bind public="1" set="method">
			<f a="eventType:?eventData:?handlerOrFalse">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Attach a handler to an event for the elements.
	</haxe_doc>
		</bind>
		<blur public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</blur>
		<change public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</change>
		<children public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the children of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</children>
		<clearQueue public="1" set="method">
			<f a="?queueName">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove from the queue all items that have not yet been run.
	</haxe_doc>
		</clearQueue>
		<click public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</click>
		<clone public="1" set="method">
			<f a="?withDataAndEvents">
				<e path="Bool"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Create a copy of the set of matched elements.
	</haxe_doc>
		</clone>
		<closest public="1" set="method">
			<f a="selector:?context">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
	</haxe_doc>
		</closest>
		<contents public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Get the children of each element in the set of matched elements, including text nodes.
	</haxe_doc>
		</contents>
		<context public="1">
			<t path="js.Document"/>
			<haxe_doc>
		The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.
	</haxe_doc>
		</context>
		<css public="1" set="method">
			<f a="propertyNameOrMap:?valueOrFunction">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the value of a style property for the first element in the set of matched elements.
	</haxe_doc>
		</css>
		<cssSet public="1" get="inline" set="null" line="149"><f a="attributeName:valueOrFunction">
	<c path="String"/>
	<d/>
	<c path="JQuery"/>
</f></cssSet>
		<data public="1" set="method">
			<f a="?keyOrMap:?value">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Store arbitrary data associated with the matched elements.
	</haxe_doc>
		</data>
		<dataSet public="1" get="inline" set="null" line="158"><f a="key:value">
	<c path="String"/>
	<d/>
	<c path="JQuery"/>
</f></dataSet>
		<dblclick public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</dblclick>
		<delay public="1" set="method">
			<f a="duration:?queueName">
				<c path="Int"/>
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Set a timer to delay execution of subsequent items in the queue.
	</haxe_doc>
		</delay>
		<delegate public="1" set="method">
			<f a="selector:eventType:?eventDataorHandler:?handler">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
	</haxe_doc>
		</delegate>
		<dequeue public="1" set="method">
			<f a="?queueName">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Execute the next function on the queue for the matched elements.
	</haxe_doc>
		</dequeue>
		<detach public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove the set of matched elements from the DOM.
	</haxe_doc>
		</detach>
		<die public="1" set="method">
			<f a="?eventType:?handler">
				<c path="String"/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove all event handlers previously attached using .live() from the elements.
	</haxe_doc>
		</die>
		<each public="1" set="method">
			<f a="callBack">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Iterate over a jQuery object, executing a function for each matched element.
	</haxe_doc>
		</each>
		<empty public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Remove all child nodes of the set of matched elements from the DOM.
	</haxe_doc>
		</empty>
		<end public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
	</haxe_doc>
		</end>
		<eq public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Reduce the set of matched elements to the one at the specified index.
	</haxe_doc>
		</eq>
		<error public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "error" JavaScript event.
	</haxe_doc>
		</error>
		<fadeIn public="1" set="method">
			<f a="?duration:?easingOrCallback:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Display the matched elements by fading them to opaque.
	</haxe_doc>
		</fadeIn>
		<fadeOut public="1" set="method">
			<f a="?duration:?easingOrCallback:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Hide the matched elements by fading them to transparent.
	</haxe_doc>
		</fadeOut>
		<fadeTo public="1" set="method">
			<f a="duration:opacity:?easingOrCallback:?callBack">
				<d/>
				<c path="Float"/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Adjust the opacity of the matched elements.
	</haxe_doc>
		</fadeTo>
		<filter public="1" set="method">
			<f a="selectorOrFunction">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Reduce the set of matched elements to those that match the selector or pass the function's test.
	</haxe_doc>
		</filter>
		<find public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the descendants of each element in the current set of matched elements, filtered by a selector.
	</haxe_doc>
		</find>
		<first public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Reduce the set of matched elements to the first in the set.
	</haxe_doc>
		</first>
		<focus public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</focus>
		<focusin public="1" set="method">
			<f a="?eventDataOrHandler:handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "focusin" JavaScript event.
	</haxe_doc>
		</focusin>
		<focusout public="1" set="method">
			<f a="?eventDataOrHandler:handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "focusout" JavaScript event.
	</haxe_doc>
		</focusout>
		<get public="1" set="method">
			<f a="?index">
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Retrieve the DOM elements matched by the jQuery object.
	</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="ele">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
	</haxe_doc>
		</has>
		<hasClass public="1" set="method">
			<f a="className">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Determine whether any of the matched elements are assigned the given class.
	</haxe_doc>
		</hasClass>
		<height public="1" set="method">
			<f a="?valueOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the current computed height for the first element in the set of matched elements.
	</haxe_doc>
		</height>
		<heightSet public="1" get="inline" set="null" line="282"><f a="valueOrFunction">
	<d/>
	<c path="JQuery"/>
</f></heightSet>
		<hide public="1" set="method">
			<f a="?duration:?easingOrCallback:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Hide the matched elements.
	</haxe_doc>
		</hide>
		<hover public="1" set="method">
			<f a="?handler:?handler2">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
	</haxe_doc>
		</hover>
		<html public="1" set="method">
			<f a="?valueOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the HTML contents of the first element in the set of matched elements.
	</haxe_doc>
		</html>
		<htmlSet public="1" get="inline" set="null" line="301"><f a="valueOrFunction">
	<d/>
	<c path="JQuery"/>
</f></htmlSet>
		<index public="1" set="method">
			<f a="?ele">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Search for a given element from among the matched elements.
	</haxe_doc>
		</index>
		<innerHeight public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Get the current computed height for the first element in the set of matched elements, including padding but not border.
	</haxe_doc>
		</innerHeight>
		<innerWidth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Get the current computed width for the first element in the set of matched elements, including padding but not border.
	</haxe_doc>
		</innerWidth>
		<insertAfter public="1" set="method">
			<f a="target">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert every element in the set of matched elements after the target.
	</haxe_doc>
		</insertAfter>
		<insertBefore public="1" set="method">
			<f a="target">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert every element in the set of matched elements before the target.
	</haxe_doc>
		</insertBefore>
		<is public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Check the current matched set of elements against a selector and return true if at least one of these elements matches the selector.
	</haxe_doc>
		</is>
		<keydown public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</keydown>
		<keypress public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</keypress>
		<keyup public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</keyup>
		<last public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Reduce the set of matched elements to the final one in the set.
	</haxe_doc>
		</last>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in the jQuery object.
	</haxe_doc>
		</length>
		<live public="1" set="method">
			<f a="eventType:?eventData:?handler">
				<c path="String"/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Attach a handler to the event for all elements which match the current selector, now or in the future.
	</haxe_doc>
		</live>
		<load public="1" set="method">
			<f a="urlOrEventDataOrHandler:?dataOrHandler:?complete">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Load data from the server and place the returned HTML into the matched element.
		Bind an event handler to the "load" JavaScript event.
	</haxe_doc>
		</load>
		<map public="1" set="method">
			<f a="callBack">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
	</haxe_doc>
		</map>
		<mousedown public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</mousedown>
		<mouseenter public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
	</haxe_doc>
		</mouseenter>
		<mouseleave public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
	</haxe_doc>
		</mouseleave>
		<mousemove public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</mousemove>
		<mouseout public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</mouseout>
		<mouseover public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</mouseover>
		<mouseup public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</mouseup>
		<next public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the immediately following sibling of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</next>
		<nextAll public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</nextAll>
		<nextUntil public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get all following siblings of each element up to but not including the element matched by the selector.
	</haxe_doc>
		</nextUntil>
		<not public="1" set="method">
			<f a="ele">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove elements from the set of matched elements.
	</haxe_doc>
		</not>
		<offset public="1" set="method">
			<f a="?coordinatesOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the current coordinates of the first element in the set of matched elements, relative to the document.
	</haxe_doc>
		</offset>
		<offsetSet public="1" get="inline" set="null" line="436"><f a="coordinatesOrFunction">
	<d/>
	<c path="JQuery"/>
</f></offsetSet>
		<offsetParent public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Get the closest ancestor element that is positioned.
	</haxe_doc>
		</offsetParent>
		<one public="1" set="method">
			<f a="eventType:?eventData:?handler">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Attach a handler to an event for the elements. The handler is executed at most once per element.
	</haxe_doc>
		</one>
		<outerHeight public="1" set="method">
			<f a="?includeMargin">
				<e path="Bool"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Get the current computed height for the first element in the set of matched elements, including padding and border.
	</haxe_doc>
		</outerHeight>
		<outerWidth public="1" set="method">
			<f a="?includeMargin">
				<e path="Bool"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Get the current computed width for the first element in the set of matched elements, including padding and border.
	</haxe_doc>
		</outerWidth>
		<parent public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</parent>
		<parents public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</parents>
		<parentsUntil public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector.
	</haxe_doc>
		</parentsUntil>
		<position public="1" set="method">
			<f a=""><a>
	<top><c path="Float"/></top>
	<left><c path="Float"/></left>
</a></f>
			<haxe_doc>
		Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
	</haxe_doc>
		</position>
		<prepend public="1" set="method">
			<f a="content">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
	</haxe_doc>
		</prepend>
		<prependTo public="1" set="method">
			<f a="target">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Insert every element in the set of matched elements to the beginning of the target.
	</haxe_doc>
		</prependTo>
		<prev public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</prev>
		<prevAll public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</prevAll>
		<prevUntil public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get all preceding siblings of each element up to but not including the element matched by the selector.
	</haxe_doc>
		</prevUntil>
		<queue public="1" set="method">
			<f a="?queueName:?newQueueOrCallback">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Show the queue of functions to be executed on the matched elements.
	</haxe_doc>
		</queue>
		<ready public="1" set="method">
			<f a="?handler">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Specify a function to execute when the DOM is fully loaded.
	</haxe_doc>
		</ready>
		<remove public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove the set of matched elements from the DOM.
	</haxe_doc>
		</remove>
		<removeAttr public="1" set="method">
			<f a="attributeName">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove an attribute from each element in the set of matched elements.
	</haxe_doc>
		</removeAttr>
		<removeClass public="1" set="method">
			<f a="?classNameOrFunction">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
	</haxe_doc>
		</removeClass>
		<removeData public="1" set="method">
			<f a="?name">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove a previously-stored piece of data.
	</haxe_doc>
		</removeData>
		<replaceAll public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		A selector expression indicating which element(s) to replace.
	</haxe_doc>
		</replaceAll>
		<replaceWith public="1" set="method">
			<f a="newContentOrFunction">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Replace each element in the set of matched elements with the provided new content.
	</haxe_doc>
		</replaceWith>
		<resize public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</resize>
		<scroll public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</scroll>
		<scrollLeft public="1" set="method">
			<f a="?value">
				<c path="Float"/>
				<d/>
			</f>
			<haxe_doc>
		Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
	</haxe_doc>
		</scrollLeft>
		<scrollLeftSet public="1" get="inline" set="null" line="560"><f a="value">
	<c path="Float"/>
	<c path="JQuery"/>
</f></scrollLeftSet>
		<scrollTop public="1" set="method">
			<f a="?value">
				<c path="Float"/>
				<d/>
			</f>
			<haxe_doc>
		Get the current vertical position of the scroll bar for the first element in the set of matched elements.
	</haxe_doc>
		</scrollTop>
		<scrollTopSet public="1" get="inline" set="null" line="569"><f a="value">
	<c path="Float"/>
	<c path="JQuery"/>
</f></scrollTopSet>
		<select public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</select>
		<selector public="1" set="null">
			<c path="String"/>
			<haxe_doc>
		A selector representing selector originally passed to jQuery().
	</haxe_doc>
		</selector>
		<serialize public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Encode a set of form elements as a string for submission.
	</haxe_doc>
		</serialize>
		<serializeArray public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Encode a set of form elements as an array of names and values.
	</haxe_doc>
		</serializeArray>
		<show public="1" set="method">
			<f a="?duration:?easingOrCallBack:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Display the matched elements.
	</haxe_doc>
		</show>
		<siblings public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
	</haxe_doc>
		</siblings>
		<size public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Return the number of DOM elements matched by the jQuery object.
	</haxe_doc>
		</size>
		<slice public="1" set="method">
			<f a="start:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Reduce the set of matched elements to a subset specified by a range of indices.
	</haxe_doc>
		</slice>
		<slideDown public="1" set="method">
			<f a="?duration:?easingOrCallBack:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Display the matched elements with a sliding motion.
	</haxe_doc>
		</slideDown>
		<slideToggle public="1" set="method">
			<f a="?duration:?easingOrCallBack:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Display or hide the matched elements with a sliding motion.
	</haxe_doc>
		</slideToggle>
		<slideUp public="1" set="method">
			<f a="?duration:?easingOrCallBack:?callBack">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Hide the matched elements with a sliding motion.
	</haxe_doc>
		</slideUp>
		<stop public="1" set="method">
			<f a="?clearQueue:?jumpToEnd">
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Stop the currently-running animation on the matched elements.
	</haxe_doc>
		</stop>
		<submit public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
	</haxe_doc>
		</submit>
		<text public="1" set="method">
			<f a="?valueOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the combined text contents of each element in the set of matched elements, including their descendants.
	</haxe_doc>
		</text>
		<textSet public="1" get="inline" set="null" line="643"><f a="valueOrFunction">
	<d/>
	<c path="JQuery"/>
</f></textSet>
		<toArray public="1" set="method">
			<f a=""><c path="Array"><t path="js.Dom"/></c></f>
			<haxe_doc>
		Retrieve all the DOM elements contained in the jQuery set, as an array.
	</haxe_doc>
		</toArray>
		<toggle public="1" set="method">
			<f a="?handlerOrDurationOrBool:?handler2OrEasingOrCallback:?handler3OrCallback">
				<d/>
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind two or more handlers to the matched elements, to be executed on alternate clicks.
	</haxe_doc>
		</toggle>
		<toggleClass public="1" set="method">
			<f a="classNameOrFunction:?_switch">
				<d/>
				<e path="Bool"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
	</haxe_doc>
		</toggleClass>
		<trigger public="1" set="method">
			<f a="eventType:extraParameters">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Execute all handlers and behaviors attached to the matched elements for the given event type.
	</haxe_doc>
		</trigger>
		<triggerHandler public="1" set="method">
			<f a="eventType:extraParameters">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Execute all handlers attached to an element for an event.
	</haxe_doc>
		</triggerHandler>
		<unbind public="1" set="method">
			<f a="eventType:?handlerOrFalse">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove a previously-attached event handler from the elements.
	</haxe_doc>
		</unbind>
		<undelegate public="1" set="method">
			<f a="?selector:?eventType:?handler">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.
	</haxe_doc>
		</undelegate>
		<unload public="1" set="method">
			<f a="?eventDataOrHandler:?handler">
				<d/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Bind an event handler to the "unload" JavaScript event.
	</haxe_doc>
		</unload>
		<unwrap public="1" set="method">
			<f a=""><c path="JQuery"/></f>
			<haxe_doc>
		Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
	</haxe_doc>
		</unwrap>
		<val public="1" set="method">
			<f a="?valueOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the current value of the first element in the set of matched elements.
	</haxe_doc>
		</val>
		<valSet public="1" get="inline" set="null" line="697"><f a="valueOrFunction">
	<d/>
	<c path="JQuery"/>
</f></valSet>
		<width public="1" set="method">
			<f a="?valueOrFunction">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Get the current computed width for the first element in the set of matched elements.
	</haxe_doc>
		</width>
		<widthSet public="1" get="inline" set="null" line="706"><f a="valueOrFunction">
	<d/>
	<c path="JQuery"/>
</f></widthSet>
		<wrap public="1" set="method">
			<f a="ele">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Wrap an HTML structure around each element in the set of matched elements.
	</haxe_doc>
		</wrap>
		<wrapAll public="1" set="method">
			<f a="ele">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Wrap an HTML structure around all elements in the set of matched elements.
	</haxe_doc>
		</wrapAll>
		<wrapInner public="1" set="method">
			<f a="ele">
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Wrap an HTML structure around the content of each element in the set of matched elements.
	</haxe_doc>
		</wrapInner>
		<new public="1" set="method">
			<f a="in1:?in2">
				<d/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Accepts a string containing a CSS selector which is then used to match a set of elements.
	</haxe_doc>
		</new>
	</class>
	<class path="JQueryS" params="" file="src/JQuery.hx" module="JQuery" extern="1">
		<ajax public="1" set="method" static="1">
			<f a="setting">
				<d/>
				<c path="js.XMLHttpRequest"/>
			</f>
			<haxe_doc>
		Perform an asynchronous HTTP (Ajax) request.
	</haxe_doc>
		</ajax>
		<ajaxSetup public="1" set="method" static="1">
			<f a="setting">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set default values for future Ajax requests.
	</haxe_doc>
		</ajaxSetup>
		<boxModel public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc>
		Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.
	</haxe_doc>
		</boxModel>
		<browser public="1" set="null" static="1">
			<a>
				<webkit><t path="Null"><e path="Bool"/></t></webkit>
				<version><c path="String"/></version>
				<safari><t path="Null"><e path="Bool"/></t></safari>
				<opera><t path="Null"><e path="Bool"/></t></opera>
				<msie><t path="Null"><e path="Bool"/></t></msie>
				<mozilla><t path="Null"><e path="Bool"/></t></mozilla>
			</a>
			<haxe_doc>
		We recommend against using this property, please try to use feature detection instead (see jQuery.support). Contains flags for the useragent, read from navigator.userAgent. While jQuery.browser will not be removed from future versions of jQuery, every effort to use jQuery.support and proper feature detection should be made.
	</haxe_doc>
		</browser>
		<contains public="1" set="method" static="1">
			<f a="container:contained">
				<t path="js.Dom"/>
				<t path="js.Dom"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Check to see if a DOM node is within another DOM node.
	</haxe_doc>
		</contains>
		<data public="1" set="method" static="1">
			<f a="ele:key:?value">
				<t path="js.Dom"/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Store arbitrary data associated with the specified element.
	</haxe_doc>
		</data>
		<dequeue public="1" set="method" static="1">
			<f a="ele:?queueName">
				<t path="js.Dom"/>
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Execute the next function on the queue for the matched element.
	</haxe_doc>
		</dequeue>
		<each public="1" params="T" set="method" static="1">
			<f a="collection:?callBack">
				<c path="each.T"/>
				<d/>
				<c path="each.T"/>
			</f>
			<haxe_doc>
		Iterates through the array displaying each number as both a word and numeral
	</haxe_doc>
		</each>
		<easing public="1" static="1">
			<d><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></d>
			<haxe_doc>
		Easing functions
	</haxe_doc>
		</easing>
		<error public="1" set="method" static="1">
			<f a="message">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Takes a string and throws an exception containing it.
	</haxe_doc>
		</error>
		<extend public="1" set="method" static="1">
			<f a="?deep:target:object1:?objectN">
				<e path="Bool"/>
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Merge the contents of two or more objects together into the first object.
	</haxe_doc>
		</extend>
		<fx public="1" set="null" static="1">
			<a>
				<off><e path="Bool"/></off>
				<interval><c path="Int"/></interval>
			</a>
			<haxe_doc>
		Globally disable all animations.
	</haxe_doc>
		</fx>
		<get public="1" set="method" static="1">
			<f a="url:?data:?callBack:?dataType">
				<c path="String"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="js.XMLHttpRequest"/>
			</f>
			<haxe_doc>
		Load data from the server using a HTTP GET request.
	</haxe_doc>
		</get>
		<getJSON public="1" set="method" static="1">
			<f a="url:?data:?callBack">
				<c path="String"/>
				<d/>
				<d/>
				<c path="js.XMLHttpRequest"/>
			</f>
			<haxe_doc>
		Load JSON-encoded data from the server using a GET HTTP request.
	</haxe_doc>
		</getJSON>
		<getScript public="1" set="method" static="1">
			<f a="url:?success">
				<c path="String"/>
				<d/>
				<c path="js.XMLHttpRequest"/>
			</f>
			<haxe_doc>
		Load a JavaScript file from the server using a GET HTTP request, then execute it.
	</haxe_doc>
		</getScript>
		<globalEval public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Execute some JavaScript code globally.
	</haxe_doc>
		</globalEval>
		<grep public="1" params="T" set="method" static="1">
			<f a="array:?funct:?invert">
				<c path="Array"><c path="grep.T"/></c>
				<d/>
				<e path="Bool"/>
				<c path="Array"><c path="grep.T"/></c>
			</f>
			<haxe_doc>
		Finds the elements of an array which satisfy a filter function. The original array is not affected.
	</haxe_doc>
		</grep>
		<inArray public="1" params="T" set="method" static="1">
			<f a="value:array">
				<c path="inArray.T"/>
				<c path="Array"><c path="inArray.T"/></c>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Search for a specified value within an array and return its index (or -1 if not found).
	</haxe_doc>
		</inArray>
		<isArray public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Determine whether the argument is an array.
	</haxe_doc>
		</isArray>
		<isEmptyObject public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Check to see if an object is empty (contains no properties).
	</haxe_doc>
		</isEmptyObject>
		<isFunction public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Determine if the argument passed is a Javascript function object.
	</haxe_doc>
		</isFunction>
		<isPlainObject public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Check to see if an object is a plain object (created using "{}" or "new Object").
	</haxe_doc>
		</isPlainObject>
		<isXMLDoc public="1" set="method" static="1">
			<f a="obj">
				<t path="js.Dom"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Check to see if a DOM node is within an XML document (or is an XML document).
	</haxe_doc>
		</isXMLDoc>
		<isWindow public="1" set="method" static="1">
			<f a="obj">
				<t path="js.Dom"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Determine whether the argument is a window.
	</haxe_doc>
		</isWindow>
		<makeArray public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Convert an array-like object into a true JavaScript array.
	</haxe_doc>
		</makeArray>
		<map public="1" set="method" static="1">
			<f a="array:?callBack">
				<c path="Array"><d/></c>
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Translate all items in an array or array-like object to another array of items.
	</haxe_doc>
		</map>
		<merge public="1" params="T" set="method" static="1">
			<f a="first:second">
				<c path="Array"><c path="merge.T"/></c>
				<c path="Array"><c path="merge.T"/></c>
				<c path="Array"><c path="merge.T"/></c>
			</f>
			<haxe_doc>
		Merge the contents of two arrays together into the first array.
	</haxe_doc>
		</merge>
		<noConflict public="1" set="method" static="1">
			<f a="?removeAll">
				<e path="Bool"/>
				<d/>
			</f>
			<haxe_doc>
		Relinquish jQuery's control of the $ variable.
	</haxe_doc>
		</noConflict>
		<noop public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		An empty function.
	</haxe_doc>
		</noop>
		<param public="1" set="method" static="1">
			<f a="obj:traditional">
				<d/>
				<e path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
	</haxe_doc>
		</param>
		<parseJSON public="1" set="method" static="1">
			<f a="json">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Takes a well-formed JSON string and returns the resulting JavaScript object.
	</haxe_doc>
		</parseJSON>
		<post public="1" set="method" static="1">
			<f a="url:?data:?callBack:?dataType">
				<c path="String"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="js.XMLHttpRequest"/>
			</f>
			<haxe_doc>
		Load data from the server using a HTTP POST request.
	</haxe_doc>
		</post>
		<proxy public="1" set="method" static="1">
			<f a="funct:context">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Takes a function and returns a new one that will always have a particular context.
	</haxe_doc>
		</proxy>
		<pushStack public="1" set="method" static="1">
			<f a="elements:?name:?arguments">
				<c path="Array"><d/></c>
				<c path="String"/>
				<d/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Add a collection of DOM elements onto the jQuery stack.
	</haxe_doc>
		</pushStack>
		<queue public="1" set="method" static="1">
			<f a="element:?queueName:newQueue">
				<t path="js.Dom"/>
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>
		Show the queue of functions to be executed on the matched element.
	</haxe_doc>
		</queue>
		<removeData public="1" set="method" static="1">
			<f a="element:?name">
				<t path="js.Dom"/>
				<c path="String"/>
				<c path="JQuery"/>
			</f>
			<haxe_doc>
		Remove a previously-stored piece of data.
	</haxe_doc>
		</removeData>
		<support public="1" set="null" static="1">
			<a>
				<tbody><e path="Bool"/></tbody>
				<style><e path="Bool"/></style>
				<scriptEval><e path="Bool"/></scriptEval>
				<opacity><e path="Bool"/></opacity>
				<objectAll><e path="Bool"/></objectAll>
				<noCloneEvent><e path="Bool"/></noCloneEvent>
				<leadingWhitespace><e path="Bool"/></leadingWhitespace>
				<htmlSerialize><e path="Bool"/></htmlSerialize>
				<hrefNormalized><e path="Bool"/></hrefNormalized>
				<cssFloat><e path="Bool"/></cssFloat>
				<boxModel><e path="Bool"/></boxModel>
				<ajax><e path="Bool"/></ajax>
			</a>
			<haxe_doc>
		A collection of properties that represent the presence of different browser features or bugs.
	</haxe_doc>
		</support>
		<trim public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Remove the whitespace from the beginning and end of a string.
	</haxe_doc>
		</trim>
		<type public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Determine the internal JavaScript [[Class]] of an object.
	</haxe_doc>
		</type>
		<unique public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="unique.T"/></c>
				<c path="Array"><c path="unique.T"/></c>
			</f>
			<haxe_doc>
		Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
	</haxe_doc>
		</unique>
		<haxe_doc>
	JQueryS group all the static methods/properties of jQuery. It is because haXe does not allow using same name for static and non-static methods/properties.
</haxe_doc>
	</class>
	<class path="JQueryEvent" params="" file="src/JQuery.hx" module="JQuery" extern="1">
		<currentTarget public="1">
			<t path="js.Dom"/>
			<haxe_doc>
		The current DOM element within the event bubbling phase.
	</haxe_doc>
		</currentTarget>
		<data public="1">
			<d/>
			<haxe_doc>
		Contains the optional data passed to jQuery.fn.bind when the current executing handler was bound.
	</haxe_doc>
		</data>
		<isDefaultPrevented public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns whether event.preventDefault() was ever called on this event object.
	</haxe_doc>
		</isDefaultPrevented>
		<isImmediatePropagationStopped public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns whether event.stopImmediatePropagation() was ever called on this event object.
	</haxe_doc>
		</isImmediatePropagationStopped>
		<isPropagationStopped public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns whether event.stopPropagation() was ever called on this event object.
	</haxe_doc>
		</isPropagationStopped>
		<namespace public="1">
			<c path="String"/>
			<haxe_doc>
		This attribute contains the namespace specified when the event was triggered.
	</haxe_doc>
		</namespace>
		<pageX public="1">
			<c path="Float"/>
			<haxe_doc>
		The mouse position relative to the left edge of the document.
	</haxe_doc>
		</pageX>
		<pageY public="1">
			<c path="Float"/>
			<haxe_doc>
		The mouse position relative to the top edge of the document.
	</haxe_doc>
		</pageY>
		<preventDefault public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		If this method is called, the default action of the event will not be triggered.
	</haxe_doc>
		</preventDefault>
		<relatedTarget public="1">
			<t path="js.Dom"/>
			<haxe_doc>
		The other DOM element involved in the event, if any.
	</haxe_doc>
		</relatedTarget>
		<result public="1">
			<d/>
			<haxe_doc>
		This attribute contains the last value returned by an event handler that was triggered by this event, unless the value was undefined.
	</haxe_doc>
		</result>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Prevents other event handlers from being called.
	</haxe_doc>
		</stopImmediatePropagation>
		<stopPropagation public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
	</haxe_doc>
		</stopPropagation>
		<target public="1">
			<t path="js.Dom"/>
			<haxe_doc>
		The DOM element that initiated the event.
	</haxe_doc>
		</target>
		<timeStamp public="1">
			<c path="Float"/>
			<haxe_doc>
		This attribute returns the number of milliseconds since January 1, 1970, when the event is triggered.
	</haxe_doc>
		</timeStamp>
		<type public="1">
			<c path="String"/>
			<haxe_doc>
		Describes the nature of the event.
	</haxe_doc>
		</type>
		<which public="1">
			<c path="String"/>
			<haxe_doc>
		For key or button events, this attribute indicates the specific button or key that was pressed.
	</haxe_doc>
		</which>
		<originalEvent public="1">
			<t path="js.Event"/>
			<haxe_doc>
		The event object that haven't processed by jQuery
	</haxe_doc>
		</originalEvent>
		<clientX public="1"><c path="Int"/></clientX>
		<clientY public="1"><c path="Int"/></clientY>
		<screenX public="1"><c path="Int"/></screenX>
		<screenY public="1"><c path="Int"/></screenY>
		<button public="1"><c path="Int"/></button>
		<keyCode public="1"><c path="Int"/></keyCode>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<altKey public="1"><e path="Bool"/></altKey>
		<cancelBubble public="1"><e path="Bool"/></cancelBubble>
		<new public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="JQueryEventS" params="" file="src/JQuery.hx" module="JQuery" extern="1"><special public="1" static="1">
	<d/>
	<haxe_doc>
		Enables you to create custom jQuery events
	</haxe_doc>
</special></class>
	<class path="hedge.display.PixelSnapping" params="" file="src/hedge/display/PixelSnapping.hx">
		<AUTO public="1" get="inline" set="null" line="11" static="1"><c path="String"/></AUTO>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Level" params="" file="src/demo/wizardry/Level.hx">
		<extends path="hedge.display.Sprite"/>
		<new public="1" set="method" line="14"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<enum path="ValueType" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="54" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="59" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="109" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="117" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="121" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="133" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="139" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="145" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="154" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="158" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="188" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="206" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="210" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="214" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="js.Boot" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Boot.hx">
		<__unhtml set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="33" static="1"><f a="v:i">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__clear_trace set="method" line="50" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__closure set="method" line="62" static="1"><f a="o:f">
	<c path="Array"><a><apply set="null"><unknown/></apply></a></c>
	<c path="Int"/>
	<f a=""><unknown/></f>
</f></__closure>
		<__string_rec set="method" line="74" static="1"><f a="o:s">
	<a>
		<toString set="null"><f a=""><c path="String"/></f></toString>
		<length set="null"><c path="Int"/></length>
		<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty>
		<__name__ set="null"><unknown/></__name__>
		<__enum__ set="null"><unknown/></__enum__>
		<__ename__ set="null"><unknown/></__ename__>
	</a>
	<a><length set="null"><c path="Int"/></length></a>
	<c path="String"/>
</f></__string_rec>
		<__interfLoop set="method" line="146" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="161" static="1"><f a="o:cl">
	<d/>
	<t path="#Array"/>
	<e path="Bool"/>
</f></__instanceof>
		<__init set="method" line="194" static="1"><f a=""><e path="Void"/></f></__init>
	</class>
	<class path="haxe.Firebug" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/haxe/Firebug.hx">
		<detect public="1" set="method" line="29" static="1"><f a=""><e path="Bool"/></f></detect>
		<redirectTraces public="1" set="method" line="45" static="1"><f a=""><e path="Void"/></f></redirectTraces>
		<onError public="1" set="method" line="55" static="1"><f a="err:stack">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Bool"/>
</f></onError>
		<trace public="1" set="method" line="65" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
	</class>
	<typedef path="hedge.HandleObj" params="" file="src/hedge/Setup.hx" module="hedge.Setup">
		<a>
			<type><c path="String"/></type>
			<selector><c path="String"/></selector>
			<origHandler><d/></origHandler>
			<namespace><c path="String"/></namespace>
			<handler><d/></handler>
			<guid><c path="Float"/></guid>
			<data><d/></data>
		</a>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</typedef>
	<typedef path="hedge.ChildProperties" params="" file="src/hedge/Setup.hx" module="hedge.Setup"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
	<w><c path="Float"/></w>
	<p><c path="hedge.display.DisplayObject"/></p>
	<h><c path="Float"/></h>
</a></typedef>
	<typedef path="hedge.MovieclipStructure" params="" file="src/hedge/Setup.hx" module="hedge.Setup"><a>
	<movieclipLink><c path="String"/></movieclipLink>
	<movieclipLayers><c path="Array"><t path="hedge.MovieclipLayer"/></c></movieclipLayers>
</a></typedef>
	<typedef path="hedge.MovieclipLayer" params="" file="src/hedge/Setup.hx" module="hedge.Setup"><a>
	<labelName><c path="String"/></labelName>
	<labelFrames><c path="Array"><t path="hedge.MovieclipFrame"/></c></labelFrames>
</a></typedef>
	<typedef path="hedge.MovieclipLayerBitmap" params="" file="src/hedge/Setup.hx" module="hedge.Setup"><a>
	<labelTimerPosition><c path="Int"/></labelTimerPosition>
	<labelName><c path="String"/></labelName>
	<labelFrames><c path="Array"><t path="hedge.MovieclipFrame"/></c></labelFrames>
	<labelCounter><c path="Int"/></labelCounter>
	<labelBitmap><c path="hedge.display.Bitmap"/></labelBitmap>
</a></typedef>
	<typedef path="hedge.MovieclipFrame" params="" file="src/hedge/Setup.hx" module="hedge.Setup"><a>
	<framePause><c path="String"/></framePause>
	<frameName><c path="String"/></frameName>
	<frameData><d/></frameData>
</a></typedef>
	<class path="hedge.jquery.events.ResizeElement" params="" file="src/hedge/jquery/events/ResizeElement.hx">
		<__meta__ public="1" line="11" static="1"><d/></__meta__>
		<add public="1" set="method" line="26"><f a="handleObj">
	<t path="hedge.HandleObj"/>
	<e path="Void"/>
</f></add>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="Array" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="hedge.Setup" params="" file="src/hedge/Setup.hx">
		<__events__ line="62" static="1"><c path="Array"><d/></c></__events__>
		<backgroundColor public="1" get="getBackgroundColor" set="setBackgroundColor" static="1"><c path="Int"/></backgroundColor>
		<frameRate public="1" get="getFrameRate" set="setFrameRate" static="1"><c path="Int"/></frameRate>
		<__version__ public="1" get="getVersion" set="setVersion" static="1"><c path="Float"/></__version__>
		<__project__ public="1" get="getProject" set="setProject" static="1"><c path="String"/></__project__>
		<__jq__ public="1" static="1"><c path="JQuery"/></__jq__>
		<__storage__ public="1" static="1"><c path="JQuery"/></__storage__>
		<__stage__ public="1" static="1"><c path="hedge.display.Stage"/></__stage__>
		<__default__ public="1" static="1"><c path="hedge.display.DisplayObjectContainer"/></__default__>
		<__movieclips__ public="1" line="80" static="1"><c path="Array"><t path="hedge.MovieclipStructure"/></c></__movieclips__>
		<__counter__ static="1"><c path="Int"/></__counter__>
		<init public="1" set="method" line="88" static="1"><f a="_callback:?fps:?stageName">
	<d/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></init>
		<getAllMovieClips public="1" set="method" line="116" static="1"><f a=""><e path="Void"/></f></getAllMovieClips>
		<createJqueryEvents public="1" set="method" line="160" static="1"><f a=""><e path="Void"/></f></createJqueryEvents>
		<getVersion public="1" set="method" line="183" static="1"><f a=""><c path="Float"/></f></getVersion>
		<setVersion public="1" set="method" line="186" static="1"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setVersion>
		<getProject public="1" set="method" line="191" static="1"><f a=""><c path="String"/></f></getProject>
		<setProject public="1" set="method" line="194" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setProject>
		<getBackgroundColor public="1" set="method" line="199" static="1"><f a=""><c path="Int"/></f></getBackgroundColor>
		<setBackgroundColor public="1" set="method" line="202" static="1"><f a="value">
	<c path="Int"/>
	<c path="Int"/>
</f></setBackgroundColor>
		<getFrameRate public="1" set="method" line="207" static="1"><f a=""><c path="Int"/></f></getFrameRate>
		<setFrameRate public="1" set="method" line="210" static="1"><f a="value">
	<c path="Int"/>
	<c path="Int"/>
</f></setFrameRate>
		<__data__ public="1" set="method" line="215" static="1"><f a="values">
	<d/>
	<d/>
</f></__data__>
		<__attr__ public="1" set="method" line="228" static="1"><f a="values">
	<d/>
	<d/>
</f></__attr__>
		<generateInstanceName public="1" set="method" line="242" static="1"><f a=""><c path="String"/></f></generateInstanceName>
		<RGB_to_String public="1" set="method" line="246" static="1"><f a="color">
	<c path="Int"/>
	<c path="String"/>
</f></RGB_to_String>
		<canvas_RGBA_to_String public="1" set="method" line="254" static="1"><f a="color">
	<c path="Int"/>
	<c path="String"/>
</f></canvas_RGBA_to_String>
		<RGB_String_to_HEX public="1" set="method" line="263" static="1"><f a="color">
	<c path="String"/>
	<c path="Int"/>
</f></RGB_String_to_HEX>
		<RESIZE_ELEMENT public="1" line="275" static="1"><c path="String"/></RESIZE_ELEMENT>
	</class>
	<class path="demo.wizardry.Wizard" params="" file="src/demo/wizardry/Wizard.hx">
		<extends path="demo.wizardry.Person"/>
		<spellCharge><c path="Int"/></spellCharge>
		<chargeToFire><c path="Int"/></chargeToFire>
		<targets public="1"><c path="Array"><d/></c></targets>
		<addFireball set="method" line="22"><f a=""><e path="Void"/></f></addFireball>
		<attemptFire set="method" line="30"><f a=""><e path="Void"/></f></attemptFire>
		<update public="1" set="method" line="37" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.FireBall" params="" file="src/demo/wizardry/FireBall.hx">
		<extends path="demo.wizardry.Entity"/>
		<speed public="1"><c path="Float"/></speed>
		<angle public="1"><c path="Float"/></angle>
		<speedX public="1"><c path="Float"/></speedX>
		<speedY public="1"><c path="Float"/></speedY>
		<strength><c path="Int"/></strength>
		<ball public="1"><c path="hedge.display.Sprite"/></ball>
		<targets public="1"><c path="Array"><d/></c></targets>
		<update public="1" set="method" line="30" override="1"><f a=""><e path="Void"/></f></update>
		<checkForCollisions public="1" set="method" line="39"><f a=""><e path="Bool"/></f></checkForCollisions>
		<move public="1" set="method" line="51"><f a=""><e path="Void"/></f></move>
		<checkOutOfBounds set="method" line="61"><f a=""><e path="Void"/></f></checkOutOfBounds>
		<new public="1" set="method" line="21"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.PlayerWizard" params="" file="src/demo/wizardry/PlayerWizard.hx">
		<extends path="demo.wizardry.Wizard"/>
		<gamepad><c path="demo.wizardry.Gamepad"/></gamepad>
		<moveTargetX><c path="Float"/></moveTargetX>
		<moveTargetY><c path="Float"/></moveTargetY>
		<setPosition public="1" set="method" line="30" override="1"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setPosition>
		<update public="1" set="method" line="35" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="Raphael" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" extern="1">
		<registerFont public="1" set="method" static="1"><f a="font">
	<d/>
	<d/>
</f></registerFont>
		<getRGB public="1" set="method" static="1"><f a="color">
	<c path="String"/>
	<t path="RaphaelRGB"/>
</f></getRGB>
		<getColor public="1" set="method" static="1"><f a="?val">
	<c path="Float"/>
	<c path="String"/>
</f></getColor>
		<getColorReset public="1" get="inline" set="null" line="40" static="1"><f a=""><e path="Void"/></f></getColorReset>
		<hsb2rgb public="1" set="method" static="1"><f a="hue:saturation:brightness">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="RaphaelRGB"/>
</f></hsb2rgb>
		<hsl2rgb public="1" set="method" static="1"><f a="hue:saturation:lightness">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="RaphaelRGB"/>
</f></hsl2rgb>
		<rgb2hsb public="1" set="method" static="1"><f a="red:green:blue">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="RaphaelHSB"/>
</f></rgb2hsb>
		<rgb2hsl public="1" set="method" static="1"><f a="red:green:blue">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="RaphaelHSL"/>
</f></rgb2hsl>
		<setWindow public="1" set="method" static="1"><f a="window">
	<d/>
	<e path="Void"/>
</f></setWindow>
		<ninja public="1" set="method" static="1"><f a=""><c path="Class"><c path="Raphael"/></c></f></ninja>
		<type public="1" set="null" static="1"><c path="String"/></type>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<angle public="1" set="method" static="1"><f a="x1:y1:x2:y2:?x3:?y3">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></angle>
		<circle public="1" set="method"><f a="x:y:r">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></circle>
		<rect public="1" set="method"><f a="x:y:width:height:?r">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></rect>
		<ellipse public="1" set="method"><f a="x:y:rx:ry">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></ellipse>
		<image public="1" set="method"><f a="src:x:y:width:height">
	<c path="String"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></image>
		<text public="1" set="method"><f a="x:y:text">
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<c path="RaphaelElement"/>
</f></text>
		<path public="1" set="method"><f a="?pathString">
	<c path="String"/>
	<c path="RaphaelElement"/>
</f></path>
		<set public="1" set="method"><f a=""><c path="RaphaelSet"/></f></set>
		<getFont public="1" set="method"><f a="family:?weight:?style:?stretch">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></getFont>
		<print public="1" set="method"><f a="x:y:text:font:font_size">
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<d/>
	<c path="Float"/>
	<c path="RaphaelSet"/>
</f></print>
		<click public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></click>
		<dblclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></dblclick>
		<mousedown public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></mousedown>
		<mousemove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></mousemove>
		<mouseout public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></mouseout>
		<mouseover public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></mouseover>
		<mouseup public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></mouseup>
		<touchstart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></touchstart>
		<touchmove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></touchmove>
		<touchend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></touchend>
		<orientationchange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></orientationchange>
		<touchcancel public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></touchcancel>
		<gesturestart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></gesturestart>
		<gesturechange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></gesturechange>
		<gestureend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></gestureend>
		<unclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unclick>
		<undblclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></undblclick>
		<unmousedown public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unmousedown>
		<unmousemove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unmousemove>
		<unmouseout public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unmouseout>
		<unmouseover public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unmouseover>
		<unmouseup public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unmouseup>
		<untouchstart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></untouchstart>
		<untouchmove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></untouchmove>
		<untouchend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></untouchend>
		<unorientationchange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></unorientationchange>
		<untouchcancel public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></untouchcancel>
		<ungesturestart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></ungesturestart>
		<ungesturechange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></ungesturechange>
		<ungestureend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="Raphael"/>
</f></ungestureend>
		<clear public="1" set="method"><f a=""><c path="Raphael"/></f></clear>
		<remove public="1" set="method"><f a=""><e path="Bool"/></f></remove>
		<setSize public="1" set="method"><f a="width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Raphael"/>
</f></setSize>
		<canvas public="1" set="null"><t path="js.Dom"/></canvas>
		<raphael public="1" set="null"><c path="Class"><c path="Raphael"/></c></raphael>
		<safari public="1" set="method"><f a=""><e path="Void"/></f></safari>
		<customAttributes public="1"><d/></customAttributes>
		<new public="1" set="method"><f a="p0:?p1:?p2:?p3">
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="RaphaelElement" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael" extern="1">
		<node public="1" set="null"><t path="RaphaelNode"/></node>
		<paper public="1" set="null"><c path="Raphael"/></paper>
		<type public="1" set="null"><c path="String"/></type>
		<remove public="1" set="method"><f a=""><e path="Void"/></f></remove>
		<hide public="1" set="method"><f a=""><c path="RaphaelElement"/></f></hide>
		<show public="1" set="method"><f a=""><c path="RaphaelElement"/></f></show>
		<rotate public="1" set="method"><f a="degree:?p1:?p2">
	<c path="Float"/>
	<d/>
	<d/>
	<c path="RaphaelElement"/>
</f></rotate>
		<translate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></translate>
		<scale public="1" set="method"><f a="Xtimes:Ytimes:?centerX:?centerY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></scale>
		<attr public="1" set="method"><f a="?p0:?p1">
	<d/>
	<d/>
	<d/>
</f></attr>
		<attrSet public="1" get="inline" set="null" line="114"><f a="p0:?p1">
	<d/>
	<d/>
	<c path="RaphaelElement"/>
</f></attrSet>
		<animate public="1" set="method"><f a="newAttrs:ms:?easing:?callbackFunction">
	<d/>
	<c path="Float"/>
	<c path="String"/>
	<d/>
	<c path="RaphaelElement"/>
</f></animate>
		<animateWith public="1" set="method"><f a="element:newAttrs:ms:?easing:?callbackFunction">
	<c path="RaphaelElement"/>
	<d/>
	<c path="Float"/>
	<d/>
	<d/>
	<c path="RaphaelElement"/>
</f></animateWith>
		<animateAlong public="1" set="method"><f a="path:ms:?rotate:?callbackFunction">
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
	<d/>
	<c path="RaphaelElement"/>
</f></animateAlong>
		<animateAlongBack public="1" set="method"><f a="path:ms:?rotate:?callbackFunction">
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
	<d/>
	<c path="RaphaelElement"/>
</f></animateAlongBack>
		<onAnimation public="1" set="method"><f a="func">
	<d/>
	<c path="RaphaelElement"/>
</f></onAnimation>
		<stop public="1" set="method"><f a=""><c path="RaphaelElement"/></f></stop>
		<getBBox public="1" set="method"><f a=""><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
	<width><c path="Float"/></width>
	<height><c path="Float"/></height>
</a></f></getBBox>
		<toFront public="1" set="method"><f a=""><c path="RaphaelElement"/></f></toFront>
		<toBack public="1" set="method"><f a=""><c path="RaphaelElement"/></f></toBack>
		<insertBefore public="1" set="method"><f a="obj">
	<c path="RaphaelElement"/>
	<c path="RaphaelElement"/>
</f></insertBefore>
		<insertAfter public="1" set="method"><f a="obj">
	<c path="RaphaelElement"/>
	<c path="RaphaelElement"/>
</f></insertAfter>
		<clone public="1" set="method"><f a=""><c path="RaphaelElement"/></f></clone>
		<getTotalLength public="1" set="method"><f a=""><c path="Float"/></f></getTotalLength>
		<getPointAtLength public="1" set="method"><f a="length">
	<c path="Float"/>
	<a>
		<y><c path="Float"/></y>
		<x><c path="Float"/></x>
	</a>
</f></getPointAtLength>
		<getSubpath public="1" set="method"><f a="from:to">
	<c path="Float"/>
	<c path="Float"/>
	<c path="RaphaelElement"/>
</f></getSubpath>
		<click public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></click>
		<dblclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></dblclick>
		<mousedown public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></mousedown>
		<mousemove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></mousemove>
		<mouseout public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></mouseout>
		<mouseover public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></mouseover>
		<mouseup public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></mouseup>
		<touchstart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></touchstart>
		<touchmove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></touchmove>
		<touchend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></touchend>
		<orientationchange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></orientationchange>
		<touchcancel public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></touchcancel>
		<gesturestart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></gesturestart>
		<gesturechange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></gesturechange>
		<gestureend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></gestureend>
		<hover public="1" set="method"><f a="handler_in:handler_out">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></hover>
		<drag public="1" set="method"><f a="handler_move:handler_start:handler_end">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></drag>
		<unclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unclick>
		<undblclick public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></undblclick>
		<unmousedown public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unmousedown>
		<unmousemove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unmousemove>
		<unmouseout public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unmouseout>
		<unmouseover public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unmouseover>
		<unmouseup public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unmouseup>
		<untouchstart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></untouchstart>
		<untouchmove public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></untouchmove>
		<untouchend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></untouchend>
		<unorientationchange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unorientationchange>
		<untouchcancel public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></untouchcancel>
		<ungesturestart public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></ungesturestart>
		<ungesturechange public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></ungesturechange>
		<ungestureend public="1" set="method"><f a="handler">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></ungestureend>
		<unhover public="1" set="method"><f a="handler_in:handler_out">
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<f a="">
		<t path="js.Event"/>
		<e path="Void"/>
	</f>
	<c path="RaphaelElement"/>
</f></unhover>
	</class>
	<class path="RaphaelSet" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael" extern="1">
		<extends path="RaphaelElement"/>
		<length public="1" set="null"><c path="Int"/></length>
		<items public="1" set="null"><c path="Array"><c path="RaphaelElement"/></c></items>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="RaphaelElement"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="RaphaelElement"/>
	<c path="RaphaelSet"/>
</f></push>
	</class>
	<typedef path="RaphaelNode" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael"><a>
	<setAttribute set="method"><f a="attr:val">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setAttribute>
	<replaceChild set="method"><f a="child:oldChild">
	<t path="js.Dom"/>
	<t path="js.Dom"/>
	<e path="Void"/>
</f></replaceChild>
	<removeChild set="method"><f a="child">
	<t path="js.Dom"/>
	<t path="js.Dom"/>
</f></removeChild>
	<raphael set="null"><c path="RaphaelElement"/></raphael>
	<previousSibling><t path="js.Dom"/></previousSibling>
	<parentNode><t path="js.Dom"/></parentNode>
	<nodeValue><c path="String"/></nodeValue>
	<nodeType><c path="Int"/></nodeType>
	<nodeName><c path="String"/></nodeName>
	<nextSibling><t path="js.Dom"/></nextSibling>
	<lastChild><t path="js.Dom"/></lastChild>
	<insertBefore set="method"><f a="newChild:refChild">
	<t path="js.Dom"/>
	<t path="js.Dom"/>
	<e path="Void"/>
</f></insertBefore>
	<hasChildNodes set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
	<getAttribute set="method"><f a="attr">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
	<firstChild><t path="js.Dom"/></firstChild>
	<cloneNode set="method"><f a="deep">
	<e path="Bool"/>
	<t path="js.Dom"/>
</f></cloneNode>
	<childNodes><c path="js.HtmlCollection"><t path="js.Dom"/></c></childNodes>
	<appendChild set="method"><f a="child">
	<t path="js.Dom"/>
	<e path="Void"/>
</f></appendChild>
</a></typedef>
	<typedef path="RaphaelRGB" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael"><a>
	<toString><f a=""><c path="String"/></f></toString>
	<r><c path="Float"/></r>
	<hex><c path="String"/></hex>
	<g><c path="Float"/></g>
	<b><c path="Float"/></b>
</a></typedef>
	<typedef path="RaphaelHSB" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael"><a>
	<toString><f a=""><c path="String"/></f></toString>
	<s><c path="Float"/></s>
	<h><c path="Float"/></h>
	<b><c path="Float"/></b>
</a></typedef>
	<typedef path="RaphaelHSL" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\lib\raphaelExtern/1,5,2/Raphael.hx" module="Raphael"><a>
	<toString><f a=""><c path="String"/></f></toString>
	<s><c path="Float"/></s>
	<l><c path="Float"/></l>
	<h><c path="Float"/></h>
</a></typedef>
	<class path="StringBuf" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<toString public="1" get="inline" set="null" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="hedge.text.TextFieldType" params="" file="src/hedge/text/TextFieldType.hx">
		<DYNAMIC public="1" get="inline" set="null" line="10" static="1"><c path="String"/></DYNAMIC>
		<INPUT public="1" get="inline" set="null" line="11" static="1"><c path="String"/></INPUT>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.BitmapData" params="" file="src/hedge/display/BitmapData.hx">
		<height public="1" get="getHeight" set="null"><c path="Int"/></height>
		<transparent public="1"><e path="Bool"/></transparent>
		<width public="1" get="getWidth" set="null"><c path="Int"/></width>
		<__canvas__ public="1"><c path="JQuery"/></__canvas__>
		<__context__ public="1"><c path="hedge.canvas.CanvasRenderingContext2D"/></__context__>
		<__id__ public="1"><c path="String"/></__id__>
		<__fillColor__ public="1"><c path="Int"/></__fillColor__>
		<__source__ public="1"><c path="JQuery"/></__source__>
		<fillRect public="1" set="method" line="97"><f a="rect:color">
	<c path="hedge.geom.Rectangle"/>
	<c path="Int"/>
	<e path="Void"/>
</f></fillRect>
		<getHeight set="method" line="183"><f a=""><c path="Int"/></f></getHeight>
		<getWidth set="method" line="187"><f a=""><c path="Int"/></f></getWidth>
		<onCanvasEnter set="method" line="191"><f a="e">
	<c path="hedge.events.MouseEvent"/>
	<e path="Void"/>
</f></onCanvasEnter>
		<onCanvasLeave set="method" line="195"><f a="e">
	<c path="hedge.events.MouseEvent"/>
	<e path="Void"/>
</f></onCanvasLeave>
		<new public="1" set="method" line="37"><f a="width:height:?transparent:?fillColor:?cssSelector">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/haxe/rtti/Meta.hx">
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<class path="hedge.ui.Keyboard" params="" file="src/hedge/ui/Keyboard.hx">
		<extends path="hedge.Object"/>
		<capsLock public="1" get="getCapsLock" set="null" static="1"><e path="Bool"/></capsLock>
		<numLock public="1" get="getNumLock" set="null" static="1"><e path="Bool"/></numLock>
		<DOWN public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></DOWN>
		<ENTER public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></ENTER>
		<LEFT public="1" get="inline" set="null" line="41" static="1"><c path="Int"/></LEFT>
		<RIGHT public="1" get="inline" set="null" line="60" static="1"><c path="Int"/></RIGHT>
		<SPACE public="1" get="inline" set="null" line="62" static="1"><c path="Int"/></SPACE>
		<UP public="1" get="inline" set="null" line="64" static="1"><c path="Int"/></UP>
		<getCapsLock set="method" line="77" static="1"><f a=""><e path="Bool"/></f></getCapsLock>
		<getNumLock set="method" line="81" static="1"><f a=""><e path="Bool"/></f></getNumLock>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="Enum" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="hedge.Lib" params="" file="src/hedge/Lib.hx">
		<attachToStage public="1" set="method" line="17" static="1"><f a="displayobject">
	<c path="hedge.display.DisplayObject"/>
	<c path="hedge.display.Stage"/>
</f></attachToStage>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Main" params="" file="src/demo/wizardry/Main.hx">
		<extends path="hedge.display.Sprite"/>
		<game><c path="demo.wizardry.Game"/></game>
		<onEnterFrame set="method" line="24"><f a="e">
	<c path="hedge.events.Event"/>
	<e path="Void"/>
</f></onEnterFrame>
		<new public="1" set="method" line="15"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="DemoMain" params="" file="src/DemoMain.hx">
		<main set="method" line="30" static="1"><f a=""><e path="Void"/></f></main>
		<launch set="method" line="49" static="1"><f a=""><e path="Void"/></f></launch>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.Stage" params="" file="src/hedge/display/Stage.hx">
		<extends path="hedge.display.DisplayObjectContainer"/>
		<new public="1" set="method" line="28"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.Villager" params="" file="src/demo/wizardry/Villager.hx">
		<extends path="demo.wizardry.Person"/>
		<moveTargetX><c path="Float"/></moveTargetX>
		<moveTargetY><c path="Float"/></moveTargetY>
		<setRandomPosition set="method" line="22"><f a=""><e path="Void"/></f></setRandomPosition>
		<update public="1" set="method" line="27" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/haxe/Log.hx"><trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace></class>
	<class path="Hash" params="T" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/_std/Hash.hx">
		<h><d/></h>
		<set public="1" set="method" line="40">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="48">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="61">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="68">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="77">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="86">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="Std" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="41" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="hedge.display.Graphics" params="" file="src/hedge/display/Graphics.hx">
		<extends path="hedge.Object"/>
		<__raphael__ public="1"><c path="Raphael"/></__raphael__>
		<parent public="1"><c path="hedge.display.DisplayObject"/></parent>
		<path public="1"><c path="String"/></path>
		<new public="1" set="method" line="70"><f a="parent">
	<c path="hedge.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.text.TextField" params="" file="src/hedge/text/TextField.hx">
		<extends path="hedge.display.InteractiveObject"/>
		<background public="1" get="getBackground" set="setBackground"><e path="Bool"/></background>
		<backgroundColor public="1" get="getBackgroundColor" set="setBackgroundColor"><c path="Int"/></backgroundColor>
		<border public="1" get="getBorder" set="setBorder"><e path="Bool"/></border>
		<borderColor public="1" get="getBorderColor" set="setBorderColor"><c path="Int"/></borderColor>
		<text public="1" get="getText" set="setText"><c path="String"/></text>
		<type public="1" get="getType" set="setType"><c path="String"/></type>
		<wordWrap public="1" get="getWordWrap" set="setWordWrap"><e path="Bool"/></wordWrap>
		<getBackground set="method" line="135"><f a=""><e path="Bool"/></f></getBackground>
		<setBackground set="method" line="139"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setBackground>
		<getBackgroundColor set="method" line="145"><f a=""><c path="Int"/></f></getBackgroundColor>
		<setBackgroundColor set="method" line="149"><f a="value">
	<c path="Int"/>
	<c path="Int"/>
</f></setBackgroundColor>
		<getBorder set="method" line="156"><f a=""><e path="Bool"/></f></getBorder>
		<setBorder set="method" line="160"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setBorder>
		<getBorderColor set="method" line="166"><f a=""><c path="Int"/></f></getBorderColor>
		<setBorderColor set="method" line="170"><f a="value">
	<c path="Int"/>
	<c path="Int"/>
</f></setBorderColor>
		<getText set="method" line="186"><f a=""><c path="String"/></f></getText>
		<setText set="method" line="190"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setText>
		<getType set="method" line="195"><f a=""><c path="String"/></f></getType>
		<setType set="method" line="199"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></setType>
		<getWordWrap set="method" line="209"><f a=""><e path="Bool"/></f></getWordWrap>
		<setWordWrap set="method" line="213"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setWordWrap>
		<generateJQuery set="method" line="221" override="1"><f a=""><e path="Void"/></f></generateJQuery>
		<setWidth set="method" line="225" override="1"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setWidth>
		<setHeight set="method" line="232" override="1"><f a="value">
	<c path="Float"/>
	<c path="Float"/>
</f></setHeight>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.display.Bitmap" params="" file="src/hedge/display/Bitmap.hx">
		<extends path="hedge.display.DisplayObject"/>
		<bmd><c path="hedge.display.BitmapData"/></bmd>
		<bitmapData public="1" get="getBitmapData" set="setBitmapData"><c path="hedge.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><c path="String"/></pixelSnapping>
		<smoothing public="1"><e path="Bool"/></smoothing>
		<getBitmapData set="method" line="25"><f a=""><c path="hedge.display.BitmapData"/></f></getBitmapData>
		<setBitmapData set="method" line="29"><f a="value">
	<c path="hedge.display.BitmapData"/>
	<c path="hedge.display.BitmapData"/>
</f></setBitmapData>
		<new public="1" set="method" line="16"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="hedge.display.BitmapData"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.canvas.TextMetrics" params="" file="src/hedge/canvas/TextMetrics.hx" extern="1">
		<width public="1" set="null"><c path="Float"/></width>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<typedef path="hedge.display.IBitmapDrawable" params="" file="src/hedge/display/IBitmapDrawable.hx">
		<d/>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</typedef>
	<class path="demo.wizardry.Config" params="" file="src/demo/wizardry/Config.hx">
		<leftBound public="1" line="10" static="1"><c path="Float"/></leftBound>
		<rightBound public="1" line="11" static="1"><c path="Float"/></rightBound>
		<topBound public="1" line="12" static="1"><c path="Float"/></topBound>
		<bottomBound public="1" line="13" static="1"><c path="Float"/></bottomBound>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.ArrayHelper" params="" file="src/demo/wizardry/ArrayHelper.hx">
		<removeFromArray public="1" set="method" line="14" static="1"><f a="object:array">
	<d/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></removeFromArray>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.MathHelper" params="" file="src/demo/wizardry/MathHelper.hx">
		<TWO_PI public="1" line="10" static="1"><c path="Float"/></TWO_PI>
		<EIGHTH_CIRCLE public="1" line="18" static="1"><c path="Float"/></EIGHTH_CIRCLE>
		<RADIANS_TO_DEGREES public="1" line="22" static="1"><c path="Float"/></RADIANS_TO_DEGREES>
		<random public="1" set="method" line="28" static="1"><f a="?from:?to">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></random>
		<randomInt public="1" set="method" line="32" static="1"><f a="?equalOrGreaterThan:?lessThan">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></randomInt>
		<getDistance public="1" set="method" line="81" static="1"><f a="x1:y1:x2:y2">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></getDistance>
		<constrain public="1" set="method" line="87" static="1"><f a="value:?min:?max">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></constrain>
		<limitRadians public="1" set="method" line="188" static="1"><f a="angle">
	<c path="Float"/>
	<c path="Float"/>
</f></limitRadians>
		<getAngle public="1" set="method" line="214" static="1"><f a="x1:y1:x2:y2">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></getAngle>
		<magnitude public="1" set="method" line="221" static="1"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></magnitude>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.events.MouseEvent" params="" file="src/hedge/events/MouseEvent.hx">
		<extends path="hedge.events.Event"/>
		<altKey public="1"><e path="Bool"/></altKey>
		<buttonDown public="1"><e path="Bool"/></buttonDown>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<delta public="1"><c path="Int"/></delta>
		<localX public="1"><c path="Float"/></localX>
		<localY public="1"><c path="Float"/></localY>
		<relatedObject public="1"><c path="hedge.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="54" override="1"><f a=""><c path="hedge.events.Event"/></f></clone>
		<new public="1" set="method" line="22"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta:?commandKey:?controlKey:?clickCount">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="hedge.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.geom.Rectangle" params="" file="src/hedge/geom/Rectangle.hx">
		<height public="1"><c path="Float"/></height>
		<width public="1"><c path="Float"/></width>
		<y public="1"><c path="Float"/></y>
		<x public="1"><c path="Float"/></x>
		<new public="1" set="method" line="22"><f a="?x:?y:?width:?height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="hedge.canvas.CanvasGradient" params="" file="src/hedge/canvas/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method"><f a="offset:color">
	<c path="Float"/>
	<c path="String"/>
	<e path="Void"/>
</f></addColorStop>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="js.Lib" params="" file="C:\Program Files (x86)\Motion-Twin\haxe\std/js/Lib.hx">
		<document public="1" static="1"><t path="js.Document"/></document>
		<window public="1" static="1"><t path="js.Window"/></window>
		<onerror line="35" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Bool"/>
</f></onerror>
		<setErrorHandler public="1" set="method" line="45" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<e path="Bool"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="hedge.jquery.events.EnterFrame" params="" file="src/hedge/jquery/events/EnterFrame.hx">
		<dataHash public="1" line="13" static="1"><c path="Hash"><c path="Int"/></c></dataHash>
		<dataArray public="1" line="14" static="1"><c path="Array"><d/></c></dataArray>
		<interval public="1" static="1"><d/></interval>
		<timer public="1" static="1"><d/></timer>
		<eventLength public="1" line="17" static="1"><c path="Int"/></eventLength>
		<i public="1" line="18" static="1"><c path="Int"/></i>
		<addListener public="1" set="method" line="20" static="1"><f a="name:listener">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" line="29" static="1"><f a="name:listener">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></removeListener>
		<determineFrameRate public="1" get="inline" set="null" line="40" static="1"><f a=""><e path="Void"/></f></determineFrameRate>
		<runEnterFrame public="1" get="inline" set="null" line="44" static="1"><f a=""><e path="Void"/></f></runEnterFrame>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
	<class path="demo.wizardry.EvilWizard" params="" file="src/demo/wizardry/EvilWizard.hx">
		<extends path="demo.wizardry.Wizard"/>
		<targetVillager><c path="demo.wizardry.Villager"/></targetVillager>
		<findTargetVillager set="method" line="22"><f a=""><e path="Void"/></f></findTargetVillager>
		<update public="1" set="method" line="26" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Skial Bainn
 </haxe_doc>
	</class>
</haxe>