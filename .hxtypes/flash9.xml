<haxe>
	<class path="flash.events.IEventDispatcher" params="" file="/home/skial/motion-twin/std/flash9/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/home/skial/motion-twin/std/flash9/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.NativeMenuItem" params="" file="/home/skial/motion-twin/std/flash9/display/NativeMenuItem.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<enabled public="1"><e path="Bool"/></enabled>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="/home/skial/motion-twin/std/flash9/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1"><c path="String"/></CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1"><c path="String"/></DIRECT_CONNECTIONS>
		<audioCodec public="1" set="null"><t path="UInt"/></audioCodec>
		<audioReliable public="1"><e path="Bool"/></audioReliable>
		<audioSampleAccess public="1"><e path="Bool"/></audioSampleAccess>
		<backBufferLength public="1"><c path="Float"/></backBufferLength>
		<backBufferTime public="1"><c path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><c path="Float"/></bufferLength>
		<bufferTime public="1"><c path="Float"/></bufferTime>
		<bufferTimeMax public="1"><c path="Float"/></bufferTimeMax>
		<bytesLoaded public="1" set="null"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><t path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><e path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><c path="Float"/></currentFPS>
		<dataReliable public="1"><e path="Bool"/></dataReliable>
		<decodedFrames public="1" set="null"><t path="UInt"/></decodedFrames>
		<farID public="1" set="null"><c path="String"/></farID>
		<farNonce public="1" set="null"><c path="String"/></farNonce>
		<inBufferSeek public="1"><e path="Bool"/></inBufferSeek>
		<info public="1" set="null"><c path="flash.net.NetStreamInfo"/></info>
		<liveDelay public="1" set="null"><c path="Float"/></liveDelay>
		<maxPauseBufferTime public="1"><c path="Float"/></maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1"><e path="Bool"/></multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1"><c path="Float"/></multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1"><c path="Float"/></multicastFetchPeriod>
		<multicastInfo public="1"><c path="flash.net.NetStreamMulticastInfo"/></multicastInfo>
		<multicastPushNeighborLimit public="1"><c path="Float"/></multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1"><c path="Float"/></multicastRelayMarginDuration>
		<multicastWindowDuration public="1"><c path="Float"/></multicastWindowDuration>
		<nearNonce public="1" set="null"><c path="String"/></nearNonce>
		<objectEncoding public="1" set="null"><t path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null"><c path="Array"><d/></c></peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><c path="Float"/></time>
		<videoCodec public="1" set="null"><t path="UInt"/></videoCodec>
		<videoReliable public="1"><e path="Bool"/></videoReliable>
		<videoSampleAccess public="1"><e path="Bool"/></videoSampleAccess>
		<appendBytes public="1"><f a="bytes">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></appendBytes>
		<appendBytesAction public="1"><f a="netStreamAppendBytesAction">
	<e path="flash.net.NetStreamAppendBytesAction"/>
	<e path="Void"/>
</f></appendBytesAction>
		<attach public="1"><f a="connection">
	<c path="flash.net.NetConnection"/>
	<e path="Void"/>
</f></attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<e path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<c path="Int"/>
	<e path="Void"/>
</f></attachCamera>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<onPeerConnect public="1" set="method"><f a="subscriber">
	<c path="flash.net.NetStream"/>
	<e path="Bool"/>
</f></onPeerConnect>
		<pause public="1" set="method"><f a=""><e path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></play>
		<play2 public="1" set="method"><f a="param">
	<c path="flash.net.NetStreamPlayOptions"/>
	<e path="Void"/>
</f></play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<c path="Float"/>
	<e path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><e path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<c path="Float"/>
	<e path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<step public="1"><f a="frames">
	<c path="Int"/>
	<e path="Void"/>
</f></step>
		<togglePause public="1" set="method"><f a=""><e path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IGraphicsStroke" params="" file="/home/skial/motion-twin/std/flash9/display/IGraphicsStroke.hx" extern="1" interface="1"/>
	<enum path="flash.system.IMEConversionMode" params="" file="/home/skial/motion-twin/std/flash9/system/IMEConversionMode.hx">
		<UNKNOWN/>
		<KOREAN/>
		<JAPANESE_KATAKANA_HALF/>
		<JAPANESE_KATAKANA_FULL/>
		<JAPANESE_HIRAGANA/>
		<CHINESE/>
		<ALPHANUMERIC_HALF/>
		<ALPHANUMERIC_FULL/>
	</enum>
	<enum path="flash.display.ShaderPrecision" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderPrecision.hx">
		<FULL/>
		<FAST/>
	</enum>
	<class path="flash.xml.XMLNode" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLNode.hx" extern="1">
		<attributes public="1"><d/></attributes>
		<childNodes public="1" set="null"><c path="Array"><d/></c></childNodes>
		<firstChild public="1"><c path="flash.xml.XMLNode"/></firstChild>
		<lastChild public="1"><c path="flash.xml.XMLNode"/></lastChild>
		<localName public="1" set="null"><c path="String"/></localName>
		<namespaceURI public="1" set="null"><c path="String"/></namespaceURI>
		<nextSibling public="1"><c path="flash.xml.XMLNode"/></nextSibling>
		<nodeName public="1"><c path="String"/></nodeName>
		<nodeType public="1"><e path="flash.xml.XMLNodeType"/></nodeType>
		<nodeValue public="1"><c path="String"/></nodeValue>
		<parentNode public="1"><c path="flash.xml.XMLNode"/></parentNode>
		<prefix public="1" set="null"><c path="String"/></prefix>
		<previousSibling public="1"><c path="flash.xml.XMLNode"/></previousSibling>
		<appendChild public="1" set="method"><f a="node">
	<c path="flash.xml.XMLNode"/>
	<e path="Void"/>
</f></appendChild>
		<cloneNode public="1" set="method"><f a="deep">
	<e path="Bool"/>
	<c path="flash.xml.XMLNode"/>
</f></cloneNode>
		<getNamespaceForPrefix public="1" set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></getNamespaceForPrefix>
		<getPrefixForNamespace public="1" set="method"><f a="ns">
	<c path="String"/>
	<c path="String"/>
</f></getPrefixForNamespace>
		<hasChildNodes public="1" set="method"><f a=""><e path="Bool"/></f></hasChildNodes>
		<insertBefore public="1" set="method"><f a="node:before">
	<c path="flash.xml.XMLNode"/>
	<c path="flash.xml.XMLNode"/>
	<e path="Void"/>
</f></insertBefore>
		<removeNode public="1" set="method"><f a=""><e path="Void"/></f></removeNode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:value">
	<e path="flash.xml.XMLNodeType"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.utils.Endian" params="" file="/home/skial/motion-twin/std/flash9/utils/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
	</enum>
	<class path="flash.events.Event" params="" file="/home/skial/motion-twin/std/flash9/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CLEAR public="1" static="1"><c path="String"/></CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<COPY public="1" static="1"><c path="String"/></COPY>
		<CUT public="1" static="1"><c path="String"/></CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1"><c path="String"/></EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1"><c path="String"/></FRAME_CONSTRUCTED>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1"><c path="String"/></PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1"><c path="String"/></SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<bubbles public="1" set="null"><e path="Bool"/></bubbles>
		<cancelable public="1" set="null"><e path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><e path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><e path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><e path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><e path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ShaderEvent" params="" file="/home/skial/motion-twin/std/flash9/events/ShaderEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<byteArray public="1"><c path="flash.utils.ByteArray"/></byteArray>
		<vector public="1"><c path="flash.Vector"><c path="Float"/></c></vector>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?bitmap:?array:?vector">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.utils.ByteArray"/>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/home/skial/motion-twin/std/flash9/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><e path="Bool"/></clear>
		<copy public="1"><e path="Bool"/></copy>
		<cut public="1"><e path="Bool"/></cut>
		<paste public="1"><e path="Bool"/></paste>
		<selectAll public="1"><e path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Graphics" params="" file="/home/skial/motion-twin/std/flash9/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<beginShaderFill public="1" set="method"><f a="shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></beginShaderFill>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<copyFrom public="1" set="method"><f a="sourceGraphics">
	<c path="flash.display.Graphics"/>
	<e path="Void"/>
</f></copyFrom>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method"><f a="graphicsData">
	<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
	<e path="Void"/>
</f></drawGraphicsData>
		<drawPath public="1" set="method"><f a="commands:data:?winding">
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.GraphicsPathWinding"/>
	<e path="Void"/>
</f></drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method"><f a="vertices:?indices:?uvtData:?culling">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.TriangleCulling"/>
	<e path="Void"/>
</f></drawTriangles>
		<endFill public="1" set="method"><f a=""><e path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></lineBitmapStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<lineShaderStyle public="1" set="method"><f a="shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></lineShaderStyle>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/home/skial/motion-twin/std/flash9/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TextEvent" params="" file="/home/skial/motion-twin/std/flash9/events/TextEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LINK public="1" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1"><c path="String"/></text>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="/home/skial/motion-twin/std/flash9/events/ErrorEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<errorID public="1"><c path="Int"/></errorID>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SecurityErrorEvent" params="" file="/home/skial/motion-twin/std/flash9/events/SecurityErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<SECURITY_ERROR public="1" static="1"><c path="String"/></SECURITY_ERROR>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="IntHash" params="T" file="/home/skial/motion-twin/std/flash9/_std/IntHash.hx">
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="56">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="flash.utils.IDataOutput" params="" file="/home/skial/motion-twin/std/flash9/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.ObjectOutput" params="" file="/home/skial/motion-twin/std/flash9/utils/ObjectOutput.hx" extern="1">
		<implements path="flash.utils.IDataOutput"/>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.system.FSCommand" params="" file="/home/skial/motion-twin/std/flash9/system/FSCommand.hx" extern="1"><_fscommand public="1" set="method" static="1"><f a="command:args">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></_fscommand></class>
	<class path="haxe.TimerQueue" params="" file="/home/skial/motion-twin/std/haxe/TimerQueue.hx">
		<delay><c path="Int"/></delay>
		<t><c path="haxe.Timer"/></t>
		<q><c path="Array"><f a=""><e path="Void"/></f></c></q>
		<add public="1" set="method" line="42"><f a="f">
	<f a=""><e path="Void"/></f>
	<e path="Void"/>
</f></add>
		<process set="method" line="50"><f a=""><e path="Void"/></f></process>
		<new public="1" set="method" line="37"><f a="?delay">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/home/skial/motion-twin/std/flash9/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/home/skial/motion-twin/std/flash9/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><c path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null"><c path="flash.display.Shader"/></blendShader>
		<cacheAsBitmap public="1"><e path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><d/></c></filters>
		<height public="1"><c path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><c path="Float"/></mouseX>
		<mouseY public="1" set="null"><c path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><t path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><c path="Float"/></rotation>
		<rotationX public="1"><c path="Float"/></rotationX>
		<rotationY public="1"><c path="Float"/></rotationY>
		<rotationZ public="1"><c path="Float"/></rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><c path="Float"/></scaleX>
		<scaleY public="1"><c path="Float"/></scaleY>
		<scaleZ public="1"><c path="Float"/></scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><e path="Bool"/></visible>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Vector3D"/>
</f></globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></hitTestPoint>
		<local3DToGlobal public="1" set="method"><f a="point3d">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Point"/>
</f></local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/home/skial/motion-twin/std/flash9/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><e path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><e path="Bool"/></mouseEnabled>
		<tabEnabled public="1"><e path="Bool"/></tabEnabled>
		<tabIndex public="1"><c path="Int"/></tabIndex>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.SimpleButton" params="" file="/home/skial/motion-twin/std/flash9/display/SimpleButton.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<downState public="1"><c path="flash.display.DisplayObject"/></downState>
		<enabled public="1"><e path="Bool"/></enabled>
		<hitTestState public="1"><c path="flash.display.DisplayObject"/></hitTestState>
		<overState public="1"><c path="flash.display.DisplayObject"/></overState>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<upState public="1"><c path="flash.display.DisplayObject"/></upState>
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<new public="1" set="method"><f a="?upState:?overState:?downState:?hitTestState">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.ContentElement" params="" file="/home/skial/motion-twin/std/flash9/text/engine/ContentElement.hx" extern="1">
		<GRAPHIC_ELEMENT public="1" static="1"><t path="UInt"/></GRAPHIC_ELEMENT>
		<elementFormat public="1"><c path="flash.text.engine.ElementFormat"/></elementFormat>
		<eventMirror public="1"><c path="flash.events.EventDispatcher"/></eventMirror>
		<groupElement public="1" set="null"><c path="flash.text.engine.GroupElement"/></groupElement>
		<rawText public="1" set="null"><c path="String"/></rawText>
		<text public="1" set="null"><c path="String"/></text>
		<textBlock public="1" set="null"><c path="flash.text.engine.TextBlock"/></textBlock>
		<textBlockBeginIndex public="1" set="null"><c path="Int"/></textBlockBeginIndex>
		<textRotation public="1"><e path="flash.text.engine.TextRotation"/></textRotation>
		<userData public="1"><d/></userData>
		<new public="1" set="method"><f a="?elementFormat:?eventMirror:?textRotation">
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.TextElement" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<new public="1" set="method"><f a="?text:?elementFormat:?eventMirror:?textRotation">
	<c path="String"/>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BitmapFilterQuality" params="" file="/home/skial/motion-twin/std/flash9/filters/BitmapFilterQuality.hx" extern="1">
		<HIGH public="1" get="inline" set="null" line="4" static="1"><c path="Int"/></HIGH>
		<LOW public="1" get="inline" set="null" line="5" static="1"><c path="Int"/></LOW>
		<MEDIUM public="1" get="inline" set="null" line="6" static="1"><c path="Int"/></MEDIUM>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/home/skial/motion-twin/std/flash9/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.net.Socket" params="" file="/home/skial/motion-twin/std/flash9/net/Socket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<connected public="1" set="null"><e path="Bool"/></connected>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<timeout public="1"><t path="UInt"/></timeout>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></connect>
		<flush public="1" set="method"><f a=""><e path="Void"/></f></flush>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a="?host:?port">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.rtti.Infos" params="" file="/home/skial/motion-twin/std/haxe/rtti/Infos.hx" interface="1"><haxe_doc>
	This is a magic interface. When a class implements [haxe.rtti.Infos], this class and all its
	subclass will get an additional static field [__rtti] storing the class type informations.
</haxe_doc></class>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/home/skial/motion-twin/std/flash9/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><e path="Bool"/></autoGain>
		<echoPath public="1"><c path="Int"/></echoPath>
		<isVoiceDetected public="1" set="null"><c path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><e path="Bool"/></nonLinearProcessing>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/skial/motion-twin/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FReg a="matcher"><c path="EReg"/></FReg>
		<FInt/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FBool/>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/skial/motion-twin/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/skial/motion-twin/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<e path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<e path="Bool"/>
		</RList>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/skial/motion-twin/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CMatch/>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
	</enum>
	<class path="EReg" params="" file="/home/skial/motion-twin/std/flash9/_std/EReg.hx">
		<r><d/></r>
		<result><c path="+Array"/></result>
		<match public="1" set="method" line="35">
			<f a="s">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the regular expression matches the String.
		Updates the internal state accordingly.
	</haxe_doc>
		</match>
		<matched public="1" set="method" line="40">
			<f a="n">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a matched group or throw an expection if there
		is no such group. If [n = 0], the whole matched substring
		is returned.
	</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="44">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was as the left of
		of the matched substring.
	</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the part of the string that was at the right of
		of the matched substring.
	</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="57">
			<f a=""><a>
	<pos><c path="Int"/></pos>
	<len><c path="Int"/></len>
</a></f>
			<haxe_doc>
		Returns the position of the matched substring within the
		original matched string.
	</haxe_doc>
		</matchedPos>
		<split public="1" set="method" line="62">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split a string by using the regular expression to match
		the separators.
	</haxe_doc>
		</split>
		<replace public="1" set="method" line="68">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replaces a pattern by another string. The [by] format can
		contains [$1] to [$9] that will correspond to groups matched
		while replacing. [$$] means the [$] character.
	</haxe_doc>
		</replace>
		<customReplace public="1" set="method" line="72">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>
		For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.
	</haxe_doc>
		</customReplace>
		<new public="1" set="method" line="31"><f a="r:opt">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Regular expressions are a way to find regular patterns into
	Strings. Have a look at the tutorial on haXe website to learn
	how to use them.
</haxe_doc>
	</class>
	<class path="haxe.xml.Check" params="" file="/home/skial/motion-twin/std/haxe/xml/Check.hx">
		<blanks line="62" static="1"><c path="EReg"/></blanks>
		<isBlank set="method" line="64" static="1"><f a="x">
	<c path="Xml"/>
	<e path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="68" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<e path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="82" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<e path="Bool"/>
</f></isNullable>
		<check set="method" line="105" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="170" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="243" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="258" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="267" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="278" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="308" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="315" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="Void"/>
</f></checkDocument>
	</class>
	<class path="flash.ui.ContextMenuItem" params="" file="/home/skial/motion-twin/std/flash9/ui/ContextMenuItem.hx" extern="1">
		<extends path="flash.display.NativeMenuItem"/>
		<caption public="1"><c path="String"/></caption>
		<separatorBefore public="1"><e path="Bool"/></separatorBefore>
		<visible public="1"><e path="Bool"/></visible>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuItem"/></f></clone>
		<new public="1" set="method"><f a="caption:?separatorBefore:?enabled:?visible">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.desktop.ClipboardTransferMode" params="" file="/home/skial/motion-twin/std/flash9/desktop/ClipboardTransferMode.hx">
		<ORIGINAL_PREFERRED/>
		<ORIGINAL_ONLY/>
		<CLONE_PREFERRED/>
		<CLONE_ONLY/>
	</enum>
	<enum path="flash.text.engine.TextLineCreationResult" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextLineCreationResult.hx">
		<SUCCESS/>
		<INSUFFICIENT_WIDTH/>
		<EMERGENCY/>
		<COMPLETE/>
	</enum>
	<class path="flash.errors.Error" params="" file="/home/skial/motion-twin/std/flash9/errors/Error.hx" extern="1">
		<length public="1" static="1"><c path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<c path="Class"><d/></c>
	<t path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><c path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.engine.FontMetrics" params="" file="/home/skial/motion-twin/std/flash9/text/engine/FontMetrics.hx" extern="1">
		<emBox public="1"><c path="flash.geom.Rectangle"/></emBox>
		<strikethroughOffset public="1"><c path="Float"/></strikethroughOffset>
		<strikethroughThickness public="1"><c path="Float"/></strikethroughThickness>
		<subscriptOffset public="1"><c path="Float"/></subscriptOffset>
		<subscriptScale public="1"><c path="Float"/></subscriptScale>
		<superscriptOffset public="1"><c path="Float"/></superscriptOffset>
		<superscriptScale public="1"><c path="Float"/></superscriptScale>
		<underlineOffset public="1"><c path="Float"/></underlineOffset>
		<underlineThickness public="1"><c path="Float"/></underlineThickness>
		<new public="1" set="method"><f a="emBox:strikethroughOffset:strikethroughThickness:underlineOffset:underlineThickness:subscriptOffset:subscriptScale:superscriptOffset:superscriptScale">
	<c path="flash.geom.Rectangle"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.ui.Mouse" params="" file="/home/skial/motion-twin/std/flash9/ui/Mouse.hx" extern="1">
		<cursor public="1" static="1"><e path="flash.ui.MouseCursor"/></cursor>
		<supportsCursor public="1" static="1"><e path="Bool"/></supportsCursor>
		<hide public="1" set="method" static="1"><f a=""><e path="Void"/></f></hide>
		<registerCursor public="1" static="1"><f a="cursor">
	<c path="flash.display.MouseCursorData"/>
	<e path="Void"/>
</f></registerCursor>
		<show public="1" set="method" static="1"><f a=""><e path="Void"/></f></show>
	</class>
	<enum path="flash.display.InterpolationMethod" params="" file="/home/skial/motion-twin/std/flash9/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="/home/skial/motion-twin/std/flash9/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<d/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<e path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<d/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.utils.ObjectInput" params="" file="/home/skial/motion-twin/std/flash9/utils/ObjectInput.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<color public="1"><t path="UInt"/></color>
		<inner public="1"><e path="Bool"/></inner>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<strength public="1"><c path="Float"/></strength>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SyncEvent" params="" file="/home/skial/motion-twin/std/flash9/events/SyncEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SYNC public="1" static="1"><c path="String"/></SYNC>
		<changeList public="1"><c path="Array"><d/></c></changeList>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?changeList">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/home/skial/motion-twin/std/flash9/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1"><t path="UInt"/></MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1"><c path="flash.utils.ByteArray"/></domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getDefinition>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Std" params="" file="/home/skial/motion-twin/std/flash9/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="32" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="36" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="40" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="47" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="51" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="flash.display.FrameLabel" params="" file="/home/skial/motion-twin/std/flash9/display/FrameLabel.hx" extern="1">
		<frame public="1" set="null"><c path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLDocument" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLDocument.hx" extern="1">
		<extends path="flash.xml.XMLNode"/>
		<docTypeDecl public="1"><d/></docTypeDecl>
		<idMap public="1"><d/></idMap>
		<ignoreWhite public="1"><e path="Bool"/></ignoreWhite>
		<xmlDecl public="1"><d/></xmlDecl>
		<createElement public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createElement>
		<createTextNode public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createTextNode>
		<parseXML public="1" set="method"><f a="source">
	<c path="String"/>
	<e path="Void"/>
</f></parseXML>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.MemoryError" params="" file="/home/skial/motion-twin/std/flash9/errors/MemoryError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.Context" params="" file="/home/skial/motion-twin/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="58" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="Hash"><a>
	<rec><e path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="35"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addObject>
		<call public="1" set="method" line="39"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.events.IMEEvent" params="" file="/home/skial/motion-twin/std/flash9/events/IMEEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<IME_COMPOSITION public="1" static="1"><c path="String"/></IME_COMPOSITION>
		<IME_START_COMPOSITION public="1" static="1"><c path="String"/></IME_START_COMPOSITION>
		<imeClient public="1"><c path="flash.text.ime.IIMEClient"/></imeClient>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?imeClient">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="flash.text.ime.IIMEClient"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.QName" params="" file="/home/skial/motion-twin/std/flash9/utils/QName.hx" extern="1">
		<localName public="1" set="null"><c path="String"/></localName>
		<uri public="1" set="null"><d/></uri>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.Font" params="" file="/home/skial/motion-twin/std/flash9/text/Font.hx" extern="1">
		<enumerateFonts public="1" set="method" static="1"><f a="?enumerateDeviceFonts">
	<e path="Bool"/>
	<c path="Array"><d/></c>
</f></enumerateFonts>
		<registerFont public="1" set="method" static="1"><f a="font">
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></registerFont>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<fontStyle public="1" set="null"><e path="flash.text.FontStyle"/></fontStyle>
		<fontType public="1" set="null"><e path="flash.text.FontType"/></fontType>
		<hasGlyphs public="1" set="method"><f a="str">
	<c path="String"/>
	<e path="Bool"/>
</f></hasGlyphs>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="/home/skial/motion-twin/std/flash9/text/TextFormatAlign.hx">
		<RIGHT/>
		<LEFT/>
		<JUSTIFY/>
		<CENTER/>
	</enum>
	<enum path="flash.text.TextColorType" params="" file="/home/skial/motion-twin/std/flash9/text/TextColorType.hx">
		<LIGHT_COLOR/>
		<DARK_COLOR/>
	</enum>
	<class path="flash.geom.Matrix" params="" file="/home/skial/motion-twin/std/flash9/geom/Matrix.hx" extern="1">
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><e path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.ui.KeyboardType" params="" file="/home/skial/motion-twin/std/flash9/ui/KeyboardType.hx">
		<NONE/>
		<KEYPAD/>
		<ALPHANUMERIC/>
	</enum>
	<class path="flash.text.CSMSettings" params="" file="/home/skial/motion-twin/std/flash9/text/CSMSettings.hx" extern="1">
		<fontSize public="1"><c path="Float"/></fontSize>
		<insideCutoff public="1"><c path="Float"/></insideCutoff>
		<outsideCutoff public="1"><c path="Float"/></outsideCutoff>
		<new public="1" set="method"><f a="fontSize:insideCutoff:outsideCutoff">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.SWFVersion" params="" file="/home/skial/motion-twin/std/flash9/display/SWFVersion.hx">
		<FLASH9/>
		<FLASH8/>
		<FLASH7/>
		<FLASH6/>
		<FLASH5/>
		<FLASH4/>
		<FLASH3/>
		<FLASH2/>
		<FLASH10/>
		<FLASH1/>
	</enum>
	<class path="flash.filters.BlurFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<quality public="1"><c path="Int"/></quality>
		<new public="1" set="method"><f a="?blurX:?blurY:?quality">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IGraphicsFill" params="" file="/home/skial/motion-twin/std/flash9/display/IGraphicsFill.hx" extern="1" interface="1"/>
	<class path="flash.display.IGraphicsData" params="" file="/home/skial/motion-twin/std/flash9/display/IGraphicsData.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsGradientFill" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsGradientFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alphas public="1"><c path="Array"><c path="Float"/></c></alphas>
		<colors public="1"><c path="Array"><t path="UInt"/></c></colors>
		<focalPointRatio public="1"><c path="Float"/></focalPointRatio>
		<interpolationMethod public="1"><e path="flash.display.InterpolationMethod"/></interpolationMethod>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<ratios public="1"><c path="Array"><c path="Float"/></c></ratios>
		<spreadMethod public="1"><e path="flash.display.SpreadMethod"/></spreadMethod>
		<type public="1"><e path="flash.display.GradientType"/></type>
		<new public="1" set="method"><f a="?type:?colors:?alphas:?ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><t path="UInt"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.StageAlign" params="" file="/home/skial/motion-twin/std/flash9/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
	</enum>
	<class path="flash.errors.ArgumentsError" params="" file="/home/skial/motion-twin/std/flash9/errors/ArgumentsError.hx" extern="1"><extends path="flash.errors.Error"/></class>
	<class path="flash.geom.Matrix3D" params="" file="/home/skial/motion-twin/std/flash9/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><c path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><c path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><e path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="Float"/>
	<e path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><e path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<e path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<e path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><e path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.GroupElement" params="" file="/home/skial/motion-twin/std/flash9/text/engine/GroupElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementCount public="1" set="null"><c path="Int"/></elementCount>
		<getElementAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAt>
		<getElementAtCharIndex public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAtCharIndex>
		<getElementIndex public="1" set="method"><f a="element">
	<c path="flash.text.engine.ContentElement"/>
	<c path="Int"/>
</f></getElementIndex>
		<groupElements public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.engine.GroupElement"/>
</f></groupElements>
		<mergeTextElements public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></mergeTextElements>
		<replaceElements public="1" set="method"><f a="beginIndex:endIndex:newElements">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
</f></replaceElements>
		<setElements public="1" set="method"><f a="value">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<e path="Void"/>
</f></setElements>
		<splitTextElement public="1" set="method"><f a="elementIndex:splitIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></splitTextElement>
		<ungroupElements public="1" set="method"><f a="groupIndex">
	<c path="Int"/>
	<e path="Void"/>
</f></ungroupElements>
		<new public="1" set="method"><f a="?elements:?elementFormat:?eventMirror:?textRotation">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="/home/skial/motion-twin/std/flash9/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN public="1" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><e path="Bool"/></altKey>
		<charCode public="1"><t path="UInt"/></charCode>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<keyCode public="1"><t path="UInt"/></keyCode>
		<keyLocation public="1"><e path="flash.ui.KeyLocation"/></keyLocation>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="flash.ui.KeyLocation"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.TextBaseline" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextBaseline.hx">
		<USE_DOMINANT_BASELINE/>
		<ROMAN/>
		<IDEOGRAPHIC_TOP/>
		<IDEOGRAPHIC_CENTER/>
		<IDEOGRAPHIC_BOTTOM/>
		<DESCENT/>
		<ASCENT/>
	</enum>
	<class path="Hash" params="T" file="/home/skial/motion-twin/std/flash9/_std/Hash.hx">
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="79" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="50"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="54"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="58"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="62"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="66"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="38"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/home/skial/motion-twin/std/flash9/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><t path="UInt"/></errno>
		<stub public="1"><e path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<e path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><t path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<t path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<t path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="73" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<e path="Void"/>
</f></process>
		<create public="1" set="method" line="89" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="getConnection" set="setConnection"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="48"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="52"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<getConnection set="method" line="58"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></getConnection>
		<setConnection set="method" line="62"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></setConnection>
		<call public="1" set="method" line="68"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="43"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/home/skial/motion-twin/std/flash9/system/SecurityDomain.hx" extern="1"><currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain></class>
	<enum path="flash.ui.MouseCursor" params="" file="/home/skial/motion-twin/std/flash9/ui/MouseCursor.hx">
		<IBEAM/>
		<HAND/>
		<BUTTON/>
		<AUTO/>
		<ARROW/>
	</enum>
	<class path="flash.errors.VerifyError" params="" file="/home/skial/motion-twin/std/flash9/errors/VerifyError.hx" extern="1"><extends path="flash.errors.Error"/></class>
	<enum path="flash.text.engine.TabAlignment" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TabAlignment.hx">
		<START/>
		<END/>
		<DECIMAL/>
		<CENTER/>
	</enum>
	<class path="haxe.remoting.ContextAll" params="" file="/home/skial/motion-twin/std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="29" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="27"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.Firebug" params="" file="/home/skial/motion-twin/std/haxe/Firebug.hx">
		<detect public="1" set="method" line="29" static="1"><f a=""><e path="Bool"/></f></detect>
		<redirectTraces public="1" set="method" line="45" static="1"><f a=""><e path="Void"/></f></redirectTraces>
		<onError public="1" set="method" line="55" static="1"><f a="err:stack">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></onError>
		<trace public="1" set="method" line="65" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
	</class>
	<class path="flash.text.TextFormat" params="" file="/home/skial/motion-twin/std/flash9/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><c path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><e path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><e path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><t path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><c path="Float"/></t></indent>
		<italic public="1"><t path="Null"><e path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><e path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><c path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><c path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><c path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><c path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><c path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><t path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><e path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<c path="Float"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.IOErrorEvent" params="" file="/home/skial/motion-twin/std/flash9/events/IOErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DISK_ERROR public="1" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR public="1" static="1"><c path="String"/></IO_ERROR>
		<NETWORK_ERROR public="1" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR public="1" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int32" params="" file="/home/skial/motion-twin/std/haxe/Int32.hx">
		<make public="1" get="inline" set="null" line="33" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="41" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<toInt public="1" get="inline" set="null" line="49" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<toNativeInt public="1" get="inline" set="null" line="62" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
		<add public="1" get="inline" set="null" line="70" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" get="inline" set="null" line="78" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" get="inline" set="null" line="86" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" get="inline" set="null" line="94" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" get="inline" set="null" line="102" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="110" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="118" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="126" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="134" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" get="inline" set="null" line="142" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" get="inline" set="null" line="150" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="158" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<complement public="1" get="inline" set="null" line="166" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" get="inline" set="null" line="174" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
	</class>
	<enum path="flash.display.CapsStyle" params="" file="/home/skial/motion-twin/std/flash9/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
	</enum>
	<class path="flash.display.NativeMenu" params="" file="/home/skial/motion-twin/std/flash9/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="/home/skial/motion-twin/std/flash9/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1"><c path="flash.ui.ContextMenuClipboardItems"/></clipboardItems>
		<clipboardMenu public="1"><e path="Bool"/></clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1"><c path="flash.net.URLRequest"/></link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><e path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.system.TouchscreenType" params="" file="/home/skial/motion-twin/std/flash9/system/TouchscreenType.hx">
		<STYLUS/>
		<NONE/>
		<FINGER/>
	</enum>
	<class path="flash.errors.TypeError" params="" file="/home/skial/motion-twin/std/flash9/errors/TypeError.hx" extern="1"><extends path="flash.errors.Error"/></class>
	<class path="flash.utils.Namespace" params="" file="/home/skial/motion-twin/std/flash9/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.DigitWidth" params="" file="/home/skial/motion-twin/std/flash9/text/engine/DigitWidth.hx">
		<TABULAR/>
		<PROPORTIONAL/>
		<DEFAULT/>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="/home/skial/motion-twin/std/flash9/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
	</enum>
	<class path="haxe.Resource" params="" file="/home/skial/motion-twin/std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a>
	<str><c path="String"/></str>
	<name><c path="String"/></name>
	<data><c path="String"/></data>
</a></c></content>
		<listNames public="1" set="method" line="70" static="1"><f a=""><c path="Array"><c path="String"/></c></f></listNames>
		<getString public="1" set="method" line="77" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getString>
		<getBytes public="1" set="method" line="91" static="1"><f a="name">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
	</class>
	<class path="flash.events.ContextMenuEvent" params="" file="/home/skial/motion-twin/std/flash9/events/ContextMenuEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<MENU_ITEM_SELECT public="1" static="1"><c path="String"/></MENU_ITEM_SELECT>
		<MENU_SELECT public="1" static="1"><c path="String"/></MENU_SELECT>
		<contextMenuOwner public="1"><c path="flash.display.InteractiveObject"/></contextMenuOwner>
		<isMouseTargetInaccessible public="1"><e path="Bool"/></isMouseTargetInaccessible>
		<mouseTarget public="1"><c path="flash.display.InteractiveObject"/></mouseTarget>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?mouseTarget:?contextMenuOwner">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.macro.Ref" params="T" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono/>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPublic><e path="Bool"/></isPublic>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<index><c path="Int"/></index>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<contructs><c path="Hash"><t path="haxe.macro.EnumField"/></c></contructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/skial/motion-twin/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></remove>
	<get set="method"><f a=""><c path="Array"><a>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></c></f></get>
	<add set="method"><f a="name:params">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<e path="Void"/>
</f></add>
</a></typedef>
	<class path="flash.events.ActivityEvent" params="" file="/home/skial/motion-twin/std/flash9/events/ActivityEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ACTIVITY public="1" static="1"><c path="String"/></ACTIVITY>
		<activating public="1"><e path="Bool"/></activating>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?activating">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/skial/motion-twin/std/haxe/io/Output.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/skial/motion-twin/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="flash.utils.ByteArray"/></b>
		<writeByte public="1" set="method" line="44" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="52" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<setEndian set="method" line="65" override="1"><f a="e">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<writeFloat public="1" set="method" line="71" override="1"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="75" override="1"><f a="f">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="79" override="1"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="85" override="1"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="90" override="1"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt31 public="1" set="method" line="95" override="1"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="102" override="1"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="107" override="1"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="111" override="1"><f a="size">
	<c path="Int"/>
	<e path="Void"/>
</f></prepare>
		<writeString public="1" set="method" line="120" override="1"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<getBytes public="1" set="method" line="126"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.ShaderInput" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderInput.hx" extern="1">
		<channels public="1" set="null"><c path="Int"/></channels>
		<height public="1"><c path="Int"/></height>
		<index public="1" set="null"><c path="Int"/></index>
		<input public="1"><d/></input>
		<width public="1"><c path="Int"/></width>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.NetStatusEvent" params="" file="/home/skial/motion-twin/std/flash9/events/NetStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STATUS public="1" static="1"><c path="String"/></NET_STATUS>
		<info public="1"><d/></info>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?info">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.IDynamicPropertyOutput" params="" file="/home/skial/motion-twin/std/flash9/net/IDynamicPropertyOutput.hx" extern="1" interface="1"><writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></writeDynamicProperty></class>
	<class path="flash.net.DynamicPropertyOutput" params="" file="/home/skial/motion-twin/std/flash9/net/DynamicPropertyOutput.hx" extern="1">
		<implements path="flash.net.IDynamicPropertyOutput"/>
		<writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></writeDynamicProperty>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.engine.TextBlock" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextBlock.hx" extern="1">
		<applyNonLinearFontScaling public="1"><e path="Bool"/></applyNonLinearFontScaling>
		<baselineFontDescription public="1"><c path="flash.text.engine.FontDescription"/></baselineFontDescription>
		<baselineFontSize public="1"><c path="Float"/></baselineFontSize>
		<baselineZero public="1"><e path="flash.text.engine.TextBaseline"/></baselineZero>
		<bidiLevel public="1"><c path="Int"/></bidiLevel>
		<content public="1"><c path="flash.text.engine.ContentElement"/></content>
		<firstInvalidLine public="1" set="null"><c path="flash.text.engine.TextLine"/></firstInvalidLine>
		<firstLine public="1" set="null"><c path="flash.text.engine.TextLine"/></firstLine>
		<lastLine public="1" set="null"><c path="flash.text.engine.TextLine"/></lastLine>
		<lineRotation public="1"><e path="flash.text.engine.TextRotation"/></lineRotation>
		<tabStops public="1"><c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c></tabStops>
		<textJustifier public="1"><c path="flash.text.engine.TextJustifier"/></textJustifier>
		<textLineCreationResult public="1" set="null"><e path="flash.text.engine.TextLineCreationResult"/></textLineCreationResult>
		<userData public="1"><d/></userData>
		<createTextLine public="1" set="method"><f a="?previousLine:?width:?lineOffset:?fitSomething">
	<c path="flash.text.engine.TextLine"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="flash.text.engine.TextLine"/>
</f></createTextLine>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<findNextAtomBoundary public="1" set="method"><f a="afterCharIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></findNextAtomBoundary>
		<findNextWordBoundary public="1" set="method"><f a="afterCharIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></findNextWordBoundary>
		<findPreviousAtomBoundary public="1" set="method"><f a="beforeCharIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></findPreviousAtomBoundary>
		<findPreviousWordBoundary public="1" set="method"><f a="beforeCharIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></findPreviousWordBoundary>
		<getTextLineAtCharIndex public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="flash.text.engine.TextLine"/>
</f></getTextLineAtCharIndex>
		<recreateTextLine public="1"><f a="textLine:?previousLine:?width:?lineOffset:?fitSomething">
	<c path="flash.text.engine.TextLine"/>
	<c path="flash.text.engine.TextLine"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="flash.text.engine.TextLine"/>
</f></recreateTextLine>
		<releaseLineCreationData public="1"><f a=""><e path="Void"/></f></releaseLineCreationData>
		<releaseLines public="1" set="method"><f a="firstLine:lastLine">
	<c path="flash.text.engine.TextLine"/>
	<c path="flash.text.engine.TextLine"/>
	<e path="Void"/>
</f></releaseLines>
		<new public="1" set="method"><f a="?content:?tabStops:?textJustifier:?lineRotation:?baselineZero:?bidiLevel:?applyNonLinearFontScaling:?baselineFontDescription:?baselineFontSize">
	<c path="flash.text.engine.ContentElement"/>
	<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
	<c path="flash.text.engine.TextJustifier"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="flash.text.engine.TextBaseline"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="flash.text.engine.FontDescription"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsPathWinding.hx">
		<NON_ZERO/>
		<EVEN_ODD/>
	</enum>
	<enum path="flash.text.engine.FontWeight" params="" file="/home/skial/motion-twin/std/flash9/text/engine/FontWeight.hx">
		<NORMAL/>
		<BOLD/>
	</enum>
	<enum path="flash.printing.PrintJobOrientation" params="" file="/home/skial/motion-twin/std/flash9/printing/PrintJobOrientation.hx">
		<PORTRAIT/>
		<LANDSCAPE/>
	</enum>
	<class path="haxe.io.Bytes" params="" file="/home/skial/motion-twin/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="211" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="239" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="278" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<getData public="1" get="inline" set="null" line="207"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.FontStyle" params="" file="/home/skial/motion-twin/std/flash9/text/FontStyle.hx">
		<REGULAR/>
		<ITALIC/>
		<BOLD_ITALIC/>
		<BOLD/>
	</enum>
	<class path="flash.display.Scene" params="" file="/home/skial/motion-twin/std/flash9/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><c path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.FontDescription" params="" file="/home/skial/motion-twin/std/flash9/text/engine/FontDescription.hx" extern="1">
		<isDeviceFontCompatible public="1" static="1"><f a="fontName:fontWeight:fontPosture">
	<c path="String"/>
	<e path="flash.text.engine.FontWeight"/>
	<e path="flash.text.engine.FontPosture"/>
	<e path="Bool"/>
</f></isDeviceFontCompatible>
		<isFontCompatible public="1" set="method" static="1"><f a="fontName:fontWeight:fontPosture">
	<c path="String"/>
	<e path="flash.text.engine.FontWeight"/>
	<e path="flash.text.engine.FontPosture"/>
	<e path="Bool"/>
</f></isFontCompatible>
		<cffHinting public="1"><e path="flash.text.engine.CFFHinting"/></cffHinting>
		<fontLookup public="1"><e path="flash.text.engine.FontLookup"/></fontLookup>
		<fontName public="1"><c path="String"/></fontName>
		<fontPosture public="1"><e path="flash.text.engine.FontPosture"/></fontPosture>
		<fontWeight public="1"><e path="flash.text.engine.FontWeight"/></fontWeight>
		<locked public="1"><e path="Bool"/></locked>
		<renderingMode public="1"><e path="flash.text.engine.RenderingMode"/></renderingMode>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.FontDescription"/></f></clone>
		<new public="1" set="method"><f a="?fontName:?fontWeight:?fontPosture:?fontLookup:?renderingMode:?cffHinting">
	<c path="String"/>
	<e path="flash.text.engine.FontWeight"/>
	<e path="flash.text.engine.FontPosture"/>
	<e path="flash.text.engine.FontLookup"/>
	<e path="flash.text.engine.RenderingMode"/>
	<e path="flash.text.engine.CFFHinting"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/home/skial/motion-twin/std/flash9/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></distance>
		<length public="1" set="null"><c path="Float"/></length>
		<lengthSquared public="1" set="null"><c path="Float"/></lengthSquared>
		<w public="1"><c path="Float"/></w>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
</f></dotProduct>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<e path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nearEquals>
		<negate public="1" set="method"><f a=""><e path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><c path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><e path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<c path="Float"/>
	<e path="Void"/>
</f></scaleBy>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/skial/motion-twin/std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<class path="flash.utils.Dictionary" params="" file="/home/skial/motion-twin/std/flash9/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.utils.TypedDictionary" params="K:T" file="/home/skial/motion-twin/std/flash9/utils/TypedDictionary.hx">
		<extends path="flash.utils.Dictionary"/>
		<get public="1" get="inline" set="null" line="32"><f a="k">
	<c path="flash.utils.TypedDictionary.K"/>
	<t path="Null"><c path="flash.utils.TypedDictionary.T"/></t>
</f></get>
		<set public="1" get="inline" set="null" line="36"><f a="k:v">
	<c path="flash.utils.TypedDictionary.K"/>
	<c path="flash.utils.TypedDictionary.T"/>
	<e path="Void"/>
</f></set>
		<exists public="1" get="inline" set="null" line="40"><f a="k">
	<c path="flash.utils.TypedDictionary.K"/>
	<unknown/>
</f></exists>
		<delete public="1" get="inline" set="null" line="44"><f a="k">
	<c path="flash.utils.TypedDictionary.K"/>
	<e path="Void"/>
</f></delete>
		<keys public="1" get="inline" set="null" line="48"><f a=""><c path="Array"><c path="flash.utils.TypedDictionary.K"/></c></f></keys>
		<iterator public="1" set="method" line="52"><f a=""><t path="Iterator"><c path="flash.utils.TypedDictionary.K"/></t></f></iterator>
		<new public="1" set="method" line="30"><f a="?weakKeys">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	This is a typed version of the Flash9 Dictionary class.
</haxe_doc>
	</class>
	<class path="flash.media.SoundChannel" params="" file="/home/skial/motion-twin/std/flash9/media/SoundChannel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<leftPeak public="1" set="null"><c path="Float"/></leftPeak>
		<position public="1" set="null"><c path="Float"/></position>
		<rightPeak public="1" set="null"><c path="Float"/></rightPeak>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.Timer" params="" file="/home/skial/motion-twin/std/flash9/utils/Timer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<currentCount public="1" set="null"><c path="Int"/></currentCount>
		<delay public="1"><c path="Float"/></delay>
		<repeatCount public="1"><c path="Int"/></repeatCount>
		<running public="1" set="null"><e path="Bool"/></running>
		<reset public="1" set="method"><f a=""><e path="Void"/></f></reset>
		<start public="1" set="method"><f a=""><e path="Void"/></f></start>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<new public="1" set="method"><f a="delay:?repeatCount">
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.SetIntervalTimer" params="" file="/home/skial/motion-twin/std/flash9/utils/SetIntervalTimer.hx" extern="1">
		<extends path="flash.utils.Timer"/>
		<clearInterval public="1" set="method" static="1"><f a="id_to_clear">
	<t path="UInt"/>
	<e path="Void"/>
</f></clearInterval>
		<id public="1"><t path="UInt"/></id>
		<new public="1" set="method"><f a="closure:delay:repeats:rest">
	<d/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/home/skial/motion-twin/std/flash9/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" static="1"><f a=""><e path="Void"/></f></_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><c path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><c path="Float"/></currentFPS>
		<fps public="1" set="null"><c path="Float"/></fps>
		<height public="1" set="null"><c path="Int"/></height>
		<index public="1" set="null"><c path="Int"/></index>
		<keyFrameInterval public="1" set="null"><c path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><e path="Bool"/></loopback>
		<motionLevel public="1" set="null"><c path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><c path="Int"/></motionTimeout>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<quality public="1" set="null"><c path="Int"/></quality>
		<width public="1" set="null"><c path="Int"/></width>
		<setCursor public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<c path="Int"/>
	<e path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method"><f a="?compress">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopback>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setMode>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="StringTools" params="" file="/home/skial/motion-twin/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="/home/skial/motion-twin/std/flash9/display/ColorCorrectionSupport.hx">
		<UNSUPPORTED/>
		<DEFAULT_ON/>
		<DEFAULT_OFF/>
	</enum>
	<class path="flash.media.SoundMixer" params="" file="/home/skial/motion-twin/std/flash9/media/SoundMixer.hx" extern="1">
		<bufferTime public="1" static="1"><c path="Int"/></bufferTime>
		<soundTransform public="1" static="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<areSoundsInaccessible public="1" set="method" static="1"><f a=""><e path="Bool"/></f></areSoundsInaccessible>
		<computeSpectrum public="1" set="method" static="1"><f a="outputArray:?FFTMode:?stretchFactor">
	<c path="flash.utils.ByteArray"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></computeSpectrum>
		<stopAll public="1" set="method" static="1"><f a=""><e path="Void"/></f></stopAll>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="/home/skial/motion-twin/std/flash9/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT3/>
		<ACTIONSCRIPT2/>
	</enum>
	<class path="flash.display.IGraphicsPath" params="" file="/home/skial/motion-twin/std/flash9/display/IGraphicsPath.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsTrianglePath" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsTrianglePath.hx" extern="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<culling public="1"><e path="flash.display.TriangleCulling"/></culling>
		<indices public="1"><c path="flash.Vector"><c path="Int"/></c></indices>
		<uvtData public="1"><c path="flash.Vector"><c path="Float"/></c></uvtData>
		<vertices public="1"><c path="flash.Vector"><c path="Float"/></c></vertices>
		<new public="1" set="method"><f a="?vertices:?indices:?uvtData:?culling">
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.TriangleCulling"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="/home/skial/motion-twin/std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="59" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<e path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="40"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="44"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="48"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="35"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<e path="Void"/>
</f></ref></a>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Build an AsyncConnection from a synchronized Connection.
</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/skial/motion-twin/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="flash.accessibility.Accessibility" params="" file="/home/skial/motion-twin/std/flash9/accessibility/Accessibility.hx" extern="1">
		<active public="1" set="null" static="1"><e path="Bool"/></active>
		<sendEvent public="1" set="method" static="1"><f a="source:childID:eventType:?nonHTML">
	<c path="flash.display.DisplayObject"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></sendEvent>
		<updateProperties public="1" set="method" static="1"><f a=""><e path="Void"/></f></updateProperties>
	</class>
	<class path="flash.text.engine.TextJustifier" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextJustifier.hx" extern="1">
		<getJustifierForLocale public="1" set="method" static="1"><f a="locale">
	<c path="String"/>
	<c path="flash.text.engine.TextJustifier"/>
</f></getJustifierForLocale>
		<lineJustification public="1"><e path="flash.text.engine.LineJustification"/></lineJustification>
		<locale public="1" set="null"><c path="String"/></locale>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.TextJustifier"/></f></clone>
		<new public="1" set="method"><f a="locale:lineJustification">
	<c path="String"/>
	<e path="flash.text.engine.LineJustification"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.LineScaleMode" params="" file="/home/skial/motion-twin/std/flash9/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
	</enum>
	<enum path="flash.display.GradientType" params="" file="/home/skial/motion-twin/std/flash9/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
	</enum>
	<class path="flash.display.GraphicsEndFill" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsEndFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.events.WeakFunctionClosure" params="" file="/home/skial/motion-twin/std/flash9/events/WeakFunctionClosure.hx" extern="1"/>
	<enum path="haxe.macro.Position" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"/>
	<enum path="haxe.macro.Constant" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CType a="s"><c path="String"/></CType>
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpIDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx"><a>
	<pos><e path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<e path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EType a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EType>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</ESwitch>
		<EReturn a="e"><t path="Null"><t path="haxe.macro.Expr"/></t></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="f"><t path="haxe.macro.Function"/></EFunction>
		<EFor a="v:it:expr">
			<c path="String"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<e path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub><t path="Null"><c path="String"/></t></sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPConst a="c"><e path="haxe.macro.Constant"/></TPConst>
	</enum>
	<typedef path="haxe.macro.Function" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<expr><t path="haxe.macro.Expr"/></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value><t path="Null"><t path="haxe.macro.Expr"/></t></value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.FieldType"/></type>
	<pos><e path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<isPublic><t path="Null"><e path="Bool"/></t></isPublic>
</a></typedef>
	<enum path="haxe.macro.FieldType" params="" file="/home/skial/motion-twin/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t"><e path="haxe.macro.ComplexType"/></FVar>
		<FProp a="t:get:set">
			<e path="haxe.macro.ComplexType"/>
			<c path="String"/>
			<c path="String"/>
		</FProp>
		<FFun a="args:ret">
			<c path="Array"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.ComplexType"/>
		</FFun>
	</enum>
	<class path="flash.desktop.Clipboard" params="" file="/home/skial/motion-twin/std/flash9/desktop/Clipboard.hx" extern="1">
		<generalClipboard public="1" set="null" static="1"><c path="flash.desktop.Clipboard"/></generalClipboard>
		<formats public="1" set="null"><c path="Array"><e path="flash.desktop.ClipboardFormats"/></c></formats>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<clearData public="1" set="method"><f a="format">
	<e path="flash.desktop.ClipboardFormats"/>
	<e path="Void"/>
</f></clearData>
		<getData public="1" set="method"><f a="format:?transferMode">
	<e path="flash.desktop.ClipboardFormats"/>
	<e path="flash.desktop.ClipboardTransferMode"/>
	<d/>
</f></getData>
		<hasFormat public="1" set="method"><f a="format">
	<e path="flash.desktop.ClipboardFormats"/>
	<e path="Bool"/>
</f></hasFormat>
		<setData public="1" set="method"><f a="format:data:?serializable">
	<e path="flash.desktop.ClipboardFormats"/>
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></setData>
		<setDataHandler public="1" set="method"><f a="format:handler:?serializable">
	<e path="flash.desktop.ClipboardFormats"/>
	<d/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></setDataHandler>
	</class>
	<enum path="flash.display.StageQuality" params="" file="/home/skial/motion-twin/std/flash9/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH/>
		<BEST/>
	</enum>
	<class path="flash.net.Responder" params="" file="/home/skial/motion-twin/std/flash9/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<e path="Void"/>
</f></new></class>
	<class path="haxe.remoting.Connection" params="" file="/home/skial/motion-twin/std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" line="29" static="1"><c path="Int"/></TIMEOUT>
		<processRequest public="1" set="method" line="97" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="39"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="45"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="34"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="flash.system.LoaderContext" params="" file="/home/skial/motion-twin/std/flash9/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1"><e path="Bool"/></allowCodeImport>
		<allowLoadBytesCodeExecution public="1"><e path="Bool"/></allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><e path="Bool"/></checkPolicyFile>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<e path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.JPEGLoaderContext" params="" file="/home/skial/motion-twin/std/flash9/system/JPEGLoaderContext.hx" extern="1">
		<extends path="flash.system.LoaderContext"/>
		<deblockingFilter public="1"><c path="Float"/></deblockingFilter>
		<new public="1" set="method"><f a="?deblockingFilter:?checkPolicyFile:?applicationDomain:?securityDomain">
	<c path="Float"/>
	<e path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.NetStreamPlayTransitions" params="" file="/home/skial/motion-twin/std/flash9/net/NetStreamPlayTransitions.hx">
		<SWITCH/>
		<SWAP/>
		<STOP/>
		<RESET/>
		<APPEND/>
	</enum>
	<enum path="flash.text.engine.TextRotation" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextRotation.hx">
		<ROTATE_90/>
		<ROTATE_270/>
		<ROTATE_180/>
		<ROTATE_0/>
		<AUTO/>
	</enum>
	<class path="flash.media.ID3Info" params="" file="/home/skial/motion-twin/std/flash9/media/ID3Info.hx" extern="1">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/skial/motion-twin/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<class path="haxe.io.Eof" params="" file="/home/skial/motion-twin/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/home/skial/motion-twin/std/flash9/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><e path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><c path="Int"/></numChildren>
		<tabChildren public="1"><e path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setChildIndex>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="/home/skial/motion-twin/std/flash9/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><e path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></startDrag>
		<startTouchDrag public="1"><f a="touchPointID:?lockCenter:?bounds">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><e path="Void"/></f></stopDrag>
		<stopTouchDrag public="1"><f a="touchPointID">
	<c path="Int"/>
	<e path="Void"/>
</f></stopTouchDrag>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display.ShaderParameterType" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderParameterType.hx">
		<MATRIX4X4/>
		<MATRIX3X3/>
		<MATRIX2X2/>
		<INT4/>
		<INT3/>
		<INT2/>
		<INT/>
		<FLOAT4/>
		<FLOAT3/>
		<FLOAT2/>
		<FLOAT/>
		<BOOL4/>
		<BOOL3/>
		<BOOL2/>
		<BOOL/>
	</enum>
	<class path="flash.sampler.Api" params="" file="/home/skial/motion-twin/std/flash9/sampler/Api.hx">
		<clearSamples public="1" set="method" line="5" static="1"><f a=""><e path="Void"/></f></clearSamples>
		<getGetterInvocationCount public="1" set="method" line="9" static="1"><f a="obj:qname">
	<d/>
	<c path="flash.utils.QName"/>
	<c path="Float"/>
</f></getGetterInvocationCount>
		<getSetterInvocationCount public="1" set="method" line="13" static="1"><f a="obj:qname">
	<d/>
	<c path="flash.utils.QName"/>
	<c path="Float"/>
</f></getSetterInvocationCount>
		<getInvocationCount public="1" set="method" line="17" static="1"><f a="obj:qname">
	<d/>
	<c path="flash.utils.QName"/>
	<c path="Float"/>
</f></getInvocationCount>
		<getMemberNames public="1" set="method" line="21" static="1"><f a="obj:?instanceNames">
	<d/>
	<e path="Bool"/>
	<d><c path="flash.utils.QName"/></d>
</f></getMemberNames>
		<getSampleCount public="1" set="method" line="25" static="1"><f a=""><c path="Float"/></f></getSampleCount>
		<getSamples public="1" set="method" line="29" static="1"><f a=""><c path="Array"><c path="flash.sampler.Sample"/></c></f></getSamples>
		<getSize public="1" set="method" line="33" static="1"><f a="obj">
	<d/>
	<c path="Float"/>
</f></getSize>
		<isGetterSetter public="1" set="method" line="37" static="1"><f a="obj:qname">
	<d/>
	<c path="flash.utils.QName"/>
	<e path="Bool"/>
</f></isGetterSetter>
		<pauseSampling public="1" set="method" line="41" static="1"><f a=""><e path="Void"/></f></pauseSampling>
		<startSampling public="1" set="method" line="45" static="1"><f a=""><e path="Void"/></f></startSampling>
		<stopSampling public="1" set="method" line="49" static="1"><f a=""><e path="Void"/></f></stopSampling>
	</class>
	<class path="flash.text.engine.GraphicElement" params="" file="/home/skial/motion-twin/std/flash9/text/engine/GraphicElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementHeight public="1"><c path="Float"/></elementHeight>
		<elementWidth public="1"><c path="Float"/></elementWidth>
		<graphic public="1"><c path="flash.display.DisplayObject"/></graphic>
		<new public="1" set="method"><f a="?graphic:?elementWidth:?elementHeight:?elementFormat:?eventMirror:?textRotation">
	<c path="flash.display.DisplayObject"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsPath" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsPath.hx" extern="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<commands public="1"><c path="flash.Vector"><c path="Int"/></c></commands>
		<data public="1"><c path="flash.Vector"><c path="Float"/></c></data>
		<winding public="1"><e path="flash.display.GraphicsPathWinding"/></winding>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<wideLineTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></wideLineTo>
		<wideMoveTo public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></wideMoveTo>
		<new public="1" set="method"><f a="?commands:?data:?winding">
	<c path="flash.Vector"><c path="Int"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="flash.display.GraphicsPathWinding"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.sampler.Sample" params="" file="/home/skial/motion-twin/std/flash9/sampler/Sample.hx" extern="1">
		<stack public="1"><c path="Array"><c path="flash.sampler.StackFrame"/></c></stack>
		<time public="1"><c path="Float"/></time>
	</class>
	<class path="flash.sampler.DeleteObjectSample" params="" file="/home/skial/motion-twin/std/flash9/sampler/DeleteObjectSample.hx" extern="1">
		<extends path="flash.sampler.Sample"/>
		<id public="1"><c path="Float"/></id>
		<size public="1"><c path="Float"/></size>
	</class>
	<class path="flash.media.Video" params="" file="/home/skial/motion-twin/std/flash9/media/Video.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<deblocking public="1"><c path="Int"/></deblocking>
		<smoothing public="1"><e path="Bool"/></smoothing>
		<videoHeight public="1" set="null"><c path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><c path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="camera">
	<c path="flash.media.Camera"/>
	<e path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<e path="Void"/>
</f></attachNetStream>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<new public="1" set="method"><f a="?width:?height">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/home/skial/motion-twin/std/flash9/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><t path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><e path="Bool"/></childAllowsParent>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><c path="Float"/></frameRate>
		<height public="1" set="null"><c path="Int"/></height>
		<isURLInaccessible public="1"><e path="Bool"/></isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><e path="Bool"/></parentAllowsChild>
		<sameDomain public="1" set="null"><e path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><e path="flash.display.SWFVersion"/></swfVersion>
		<uncaughtErrorEvents public="1"><c path="flash.events.UncaughtErrorEvents"/></uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><c path="Int"/></width>
	</class>
	<class path="haxe.io.Input" params="" file="/home/skial/motion-twin/std/haxe/io/Input.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="242"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/home/skial/motion-twin/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<readByte public="1" set="method" line="56" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="75" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<setEndian set="method" line="106" override="1"><f a="e">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readFloat public="1" set="method" line="112" override="1"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="116" override="1"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="120" override="1"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="124" override="1"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="128" override="1"><f a=""><c path="Int"/></f></readUInt16>
		<readInt31 public="1" set="method" line="132" override="1"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="139" override="1"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="146" override="1"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="150" override="1"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<new public="1" set="method" line="35"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.TextLineValidity" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextLineValidity.hx">
		<VALID/>
		<STATIC/>
		<POSSIBLY_INVALID/>
		<INVALID/>
	</enum>
	<class path="flash.display.ShaderJob" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<height public="1"><c path="Int"/></height>
		<progress public="1" set="null"><c path="Float"/></progress>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<target public="1"><d/></target>
		<width public="1"><c path="Int"/></width>
		<cancel public="1" set="method"><f a=""><e path="Void"/></f></cancel>
		<start public="1" set="method"><f a="?waitForCompletion">
	<e path="Bool"/>
	<e path="Void"/>
</f></start>
		<new public="1" set="method"><f a="?shader:?target:?width:?height">
	<c path="flash.display.Shader"/>
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundLoaderContext" params="" file="/home/skial/motion-twin/std/flash9/media/SoundLoaderContext.hx" extern="1">
		<bufferTime public="1"><c path="Float"/></bufferTime>
		<checkPolicyFile public="1"><e path="Bool"/></checkPolicyFile>
		<new public="1" set="method"><f a="?bufferTime:?checkPolicyFile">
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.IExternalizable" params="" file="/home/skial/motion-twin/std/flash9/utils/IExternalizable.hx" extern="1" interface="1">
		<readExternal public="1" set="method"><f a="input">
	<c path="flash.utils.IDataInput"/>
	<e path="Void"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="output">
	<c path="flash.utils.IDataOutput"/>
	<e path="Void"/>
</f></writeExternal>
	</class>
	<enum path="flash.display.BlendMode" params="" file="/home/skial/motion-twin/std/flash9/display/BlendMode.hx">
		<SUBTRACT/>
		<SHADER/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
	</enum>
	<enum path="flash.geom.Orientation3D" params="" file="/home/skial/motion-twin/std/flash9/geom/Orientation3D.hx">
		<QUATERNION/>
		<EULER_ANGLES/>
		<AXIS_ANGLE/>
	</enum>
	<class path="flash.events.TimerEvent" params="" file="/home/skial/motion-twin/std/flash9/events/TimerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<TIMER public="1" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE public="1" static="1"><c path="String"/></TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.Lib" params="" file="/home/skial/motion-twin/std/flash9/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="31" static="1"><f a=""><c path="Int"/></f></getTimer>
		<eval public="1" set="method" line="35" static="1"><f a="path">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="55" static="1"><f a="url:?target">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="63" static="1"><f a="cmd:?param">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></fscommand>
		<trace public="1" set="method" line="67" static="1"><f a="arg">
	<d/>
	<e path="Void"/>
</f></trace>
		<attach public="1" set="method" line="71" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<as public="1" params="T" get="inline" set="null" line="76" static="1"><f a="v:c">
	<d/>
	<c path="Class"><c path="as.T"/></c>
	<t path="Null"><c path="as.T"/></t>
</f></as>
	</class>
	<class path="flash.geom.Utils3D" params="" file="/home/skial/motion-twin/std/flash9/geom/Utils3D.hx" extern="1">
		<pointTowards public="1" set="method" static="1"><f a="percent:mat:pos:?at:?up">
	<c path="Float"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Matrix3D"/>
</f></pointTowards>
		<projectVector public="1" set="method" static="1"><f a="m:v">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></projectVector>
		<projectVectors public="1" set="method" static="1"><f a="m:verts:projectedVerts:uvts">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<c path="flash.Vector"><c path="Float"/></c>
	<e path="Void"/>
</f></projectVectors>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="/home/skial/motion-twin/std/flash9/media/SoundCodec.hx">
		<SPEEX/>
		<NELLYMOSER/>
	</enum>
	<enum path="flash.text.TextFieldAutoSize" params="" file="/home/skial/motion-twin/std/flash9/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
	</enum>
	<class path="flash.display.GraphicsStroke" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsStroke.hx" extern="1">
		<implements path="flash.display.IGraphicsStroke"/>
		<implements path="flash.display.IGraphicsData"/>
		<caps public="1"><e path="flash.display.CapsStyle"/></caps>
		<fill public="1"><c path="flash.display.IGraphicsFill"/></fill>
		<joints public="1"><e path="flash.display.JointStyle"/></joints>
		<miterLimit public="1"><c path="Float"/></miterLimit>
		<pixelHinting public="1"><e path="Bool"/></pixelHinting>
		<scaleMode public="1"><e path="flash.display.LineScaleMode"/></scaleMode>
		<thickness public="1"><c path="Float"/></thickness>
		<new public="1" set="method"><f a="?thickness:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?fill">
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Float"/>
	<c path="flash.display.IGraphicsFill"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsShaderFill" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsShaderFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<new public="1" set="method"><f a="?shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLStream" params="" file="/home/skial/motion-twin/std/flash9/net/URLStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<connected public="1" set="null"><e path="Bool"/></connected>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.filters.DisplacementMapFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/DisplacementMapFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><t path="UInt"/></color>
		<componentX public="1"><t path="UInt"/></componentX>
		<componentY public="1"><t path="UInt"/></componentY>
		<mapBitmap public="1"><c path="flash.display.BitmapData"/></mapBitmap>
		<mapPoint public="1"><c path="flash.geom.Point"/></mapPoint>
		<mode public="1"><e path="flash.filters.DisplacementMapFilterMode"/></mode>
		<scaleX public="1"><c path="Float"/></scaleX>
		<scaleY public="1"><c path="Float"/></scaleY>
		<new public="1" set="method"><f a="?mapBitmap:?mapPoint:?componentX:?componentY:?scaleX:?scaleY:?mode:?color:?alpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="flash.filters.DisplacementMapFilterMode"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.ByteArray" params="" file="/home/skial/motion-twin/std/flash9/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<defaultObjectEncoding public="1" static="1"><t path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><t path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><t path="UInt"/></length>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<position public="1"><t path="UInt"/></position>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<compress public="1" set="method"><f a=""><e path="Void"/></f></compress>
		<deflate public="1" set="method"><f a=""><e path="Void"/></f></deflate>
		<inflate public="1" set="method"><f a=""><e path="Void"/></f></inflate>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<t path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<t path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><t path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a=""><e path="Void"/></f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<t path="UInt"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Shape" params="" file="/home/skial/motion-twin/std/flash9/display/Shape.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.URLRequest" params="" file="/home/skial/motion-twin/std/flash9/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="List" params="T" file="/home/skial/motion-twin/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="flash.geom.PerspectiveProjection" params="" file="/home/skial/motion-twin/std/flash9/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><c path="Float"/></fieldOfView>
		<focalLength public="1"><c path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.media.Sound" params="" file="/home/skial/motion-twin/std/flash9/media/Sound.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1" set="null"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<id3 public="1" set="null"><c path="flash.media.ID3Info"/></id3>
		<isBuffering public="1" set="null"><e path="Bool"/></isBuffering>
		<isURLInaccessible public="1"><e path="Bool"/></isURLInaccessible>
		<length public="1" set="null"><c path="Float"/></length>
		<url public="1" set="null"><c path="String"/></url>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<extract public="1" set="method"><f a="target:length:?startPosition">
	<c path="flash.utils.ByteArray"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></extract>
		<load public="1" set="method"><f a="stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<e path="Void"/>
</f></load>
		<play public="1" set="method"><f a="?startTime:?loops:?sndTransform">
	<c path="Float"/>
	<c path="Int"/>
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundChannel"/>
</f></play>
		<new public="1" set="method"><f a="?stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XML" params="" file="/home/skial/motion-twin/std/flash9/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><e path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><e path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><e path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><c path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><e path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<e path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><c path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<e path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><e path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><e path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><c path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><d/></f></localName>
		<name public="1" set="method"><f a=""><d/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><d/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<e path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<e path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<e path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<d/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="/home/skial/motion-twin/std/flash9/media/MicrophoneEnhancedMode.hx">
		<SPEAKER_MUTE/>
		<OFF/>
		<HEADSET/>
		<HALF_DUPLEX/>
		<FULL_DUPLEX/>
	</enum>
	<class path="flash.filters.BevelFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/BevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<angle public="1"><c path="Float"/></angle>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<distance public="1"><c path="Float"/></distance>
		<highlightAlpha public="1"><c path="Float"/></highlightAlpha>
		<highlightColor public="1"><t path="UInt"/></highlightColor>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<shadowAlpha public="1"><c path="Float"/></shadowAlpha>
		<shadowColor public="1"><t path="UInt"/></shadowColor>
		<strength public="1"><c path="Float"/></strength>
		<type public="1"><e path="flash.filters.BitmapFilterType"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?highlightColor:?highlightAlpha:?shadowColor:?shadowAlpha:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="flash.filters.BitmapFilterType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="IntIter" params="" file="/home/skial/motion-twin/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<enum path="flash.text.engine.LineJustification" params="" file="/home/skial/motion-twin/std/flash9/text/engine/LineJustification.hx">
		<UNJUSTIFIED/>
		<ALL_INCLUDING_LAST/>
		<ALL_BUT_LAST/>
	</enum>
	<class path="haxe.rtti.Meta" params="" file="/home/skial/motion-twin/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="35" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given type (class or enum)
	</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="43" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class fields or enum constructors
	</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="51" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>
		Returns the metadata that were declared for the given class static fields
	</haxe_doc>
		</getFields>
		<haxe_doc>
	An api to access classes and enums metadata at runtime.
</haxe_doc>
	</class>
	<class path="flash.geom.Transform" params="" file="/home/skial/motion-twin/std/flash9/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1"><c path="flash.geom.Matrix3D"/></matrix3D>
		<perspectiveProjection public="1"><c path="flash.geom.PerspectiveProjection"/></perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method"><f a="relativeTo">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Matrix3D"/>
</f></getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.StageDisplayState" params="" file="/home/skial/motion-twin/std/flash9/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
	</enum>
	<class path="flash.display.GraphicsBitmapFill" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsBitmapFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<repeat public="1"><e path="Bool"/></repeat>
		<smooth public="1"><e path="Bool"/></smooth>
		<new public="1" set="method"><f a="?bitmapData:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.Security" params="" file="/home/skial/motion-twin/std/flash9/system/Security.hx" extern="1">
		<APPLICATION public="1" static="1"><c path="String"/></APPLICATION>
		<LOCAL_TRUSTED public="1" static="1"><c path="String"/></LOCAL_TRUSTED>
		<LOCAL_WITH_FILE public="1" static="1"><c path="String"/></LOCAL_WITH_FILE>
		<LOCAL_WITH_NETWORK public="1" static="1"><c path="String"/></LOCAL_WITH_NETWORK>
		<REMOTE public="1" static="1"><c path="String"/></REMOTE>
		<disableAVM1Loading public="1" static="1"><e path="Bool"/></disableAVM1Loading>
		<exactSettings public="1" static="1"><e path="Bool"/></exactSettings>
		<sandboxType public="1" set="null" static="1"><c path="String"/></sandboxType>
		<allowDomain public="1" set="method" static="1"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method" static="1"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></allowInsecureDomain>
		<duplicateSandboxBridgeInputArguments public="1" static="1"><f a="toplevel:args">
	<d/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></duplicateSandboxBridgeInputArguments>
		<duplicateSandboxBridgeOutputArgument public="1" static="1"><f a="toplevel:arg">
	<d/>
	<d/>
	<d/>
</f></duplicateSandboxBridgeOutputArgument>
		<loadPolicyFile public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></loadPolicyFile>
		<showSettings public="1" set="method" static="1"><f a="?panel">
	<e path="flash.system.SecurityPanel"/>
	<e path="Void"/>
</f></showSettings>
	</class>
	<class path="flash.xml.XMLList" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><c path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<e path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><e path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><e path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><c path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><d/></f></localName>
		<name public="1" set="method"><f a=""><d/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<e path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<e path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<e path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Microphone" params="" file="/home/skial/motion-twin/std/flash9/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<c path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<activityLevel public="1" set="null"><c path="Float"/></activityLevel>
		<codec public="1"><e path="flash.media.SoundCodec"/></codec>
		<enableVAD public="1"><e path="Bool"/></enableVAD>
		<encodeQuality public="1"><c path="Int"/></encodeQuality>
		<enhancedOptions public="1"><c path="flash.media.MicrophoneEnhancedOptions"/></enhancedOptions>
		<framesPerPacket public="1"><c path="Int"/></framesPerPacket>
		<gain public="1"><c path="Float"/></gain>
		<index public="1" set="null"><c path="Int"/></index>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1"><c path="Int"/></noiseSuppressionLevel>
		<rate public="1"><c path="Int"/></rate>
		<silenceLevel public="1" set="null"><c path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><c path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><e path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method"><f a="?state">
	<e path="Bool"/>
	<e path="Void"/>
</f></setLoopBack>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<e path="Bool"/>
	<e path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/home/skial/motion-twin/std/haxe/unit/TestRunner.hx">
		<tf line="33" static="1"><c path="flash.text.TextField"/></tf>
		<print public="1" set="dynamic" line="38" static="1"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<customTrace set="method" line="79" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></customTrace>
		<result><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="88"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></add>
		<run public="1" set="method" line="92"><f a=""><e path="Bool"/></f></run>
		<runCase set="method" line="101"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<e path="Void"/>
</f></runCase>
		<new public="1" set="method" line="83"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/home/skial/motion-twin/std/flash9/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<color public="1"><t path="UInt"/></color>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<redOffset public="1"><c path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/FlashJsConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<connections line="81" static="1"><c path="Hash"><c path="haxe.remoting.FlashJsConnection"/></c></connections>
		<escapeString set="method" line="83" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<doCall set="method" line="91" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<connect public="1" set="method" line="111" static="1"><f a="name:objId:?ctx">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.FlashJsConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<queue><c path="haxe.TimerQueue"/></queue>
	<name><c path="String"/></name>
	<id><c path="String"/></id>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<close public="1" set="method" line="45"><f a=""><e path="Void"/></f></close>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="55"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="59"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<queue><c path="haxe.TimerQueue"/></queue>
		<name><c path="String"/></name>
		<id><c path="String"/></id>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<enum path="flash.display.StageScaleMode" params="" file="/home/skial/motion-twin/std/flash9/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
	</enum>
	<class path="flash.text.engine.TabStop" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TabStop.hx" extern="1">
		<alignment public="1"><e path="flash.text.engine.TabAlignment"/></alignment>
		<decimalAlignmentToken public="1"><c path="String"/></decimalAlignmentToken>
		<position public="1"><c path="Float"/></position>
		<new public="1" set="method"><f a="?alignment:?position:?decimalAlignmentToken">
	<e path="flash.text.engine.TabAlignment"/>
	<c path="Float"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.IOError" params="" file="/home/skial/motion-twin/std/flash9/errors/IOError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.EOFError" params="" file="/home/skial/motion-twin/std/flash9/errors/EOFError.hx" extern="1">
		<extends path="flash.errors.IOError"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.DataEvent" params="" file="/home/skial/motion-twin/std/flash9/events/DataEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<DATA public="1" static="1"><c path="String"/></DATA>
		<UPLOAD_COMPLETE_DATA public="1" static="1"><c path="String"/></UPLOAD_COMPLETE_DATA>
		<data public="1"><c path="String"/></data>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?data">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.ui.Keyboard" params="" file="/home/skial/motion-twin/std/flash9/ui/Keyboard.hx" extern="1">
		<A public="1" static="1"><t path="UInt"/></A>
		<ALTERNATE public="1" static="1"><t path="UInt"/></ALTERNATE>
		<AUDIO public="1" static="1"><t path="UInt"/></AUDIO>
		<B public="1" static="1"><t path="UInt"/></B>
		<BACK public="1" static="1"><t path="UInt"/></BACK>
		<BACKQUOTE public="1" static="1"><t path="UInt"/></BACKQUOTE>
		<BACKSLASH public="1" static="1"><t path="UInt"/></BACKSLASH>
		<BACKSPACE public="1" static="1"><t path="UInt"/></BACKSPACE>
		<BLUE public="1" static="1"><t path="UInt"/></BLUE>
		<C public="1" static="1"><t path="UInt"/></C>
		<CAPS_LOCK public="1" static="1"><t path="UInt"/></CAPS_LOCK>
		<CHANNEL_DOWN public="1" static="1"><t path="UInt"/></CHANNEL_DOWN>
		<CHANNEL_UP public="1" static="1"><t path="UInt"/></CHANNEL_UP>
		<COMMA public="1" static="1"><t path="UInt"/></COMMA>
		<COMMAND public="1" static="1"><t path="UInt"/></COMMAND>
		<CONTROL public="1" static="1"><t path="UInt"/></CONTROL>
		<CharCodeStrings public="1" static="1"><c path="Array"><d/></c></CharCodeStrings>
		<D public="1" static="1"><t path="UInt"/></D>
		<DELETE public="1" static="1"><t path="UInt"/></DELETE>
		<DOWN public="1" static="1"><t path="UInt"/></DOWN>
		<DVR public="1" static="1"><t path="UInt"/></DVR>
		<E public="1" static="1"><t path="UInt"/></E>
		<END public="1" static="1"><t path="UInt"/></END>
		<ENTER public="1" static="1"><t path="UInt"/></ENTER>
		<EQUAL public="1" static="1"><t path="UInt"/></EQUAL>
		<ESCAPE public="1" static="1"><t path="UInt"/></ESCAPE>
		<EXIT public="1" static="1"><t path="UInt"/></EXIT>
		<F public="1" static="1"><t path="UInt"/></F>
		<F1 public="1" static="1"><t path="UInt"/></F1>
		<F10 public="1" static="1"><t path="UInt"/></F10>
		<F11 public="1" static="1"><t path="UInt"/></F11>
		<F12 public="1" static="1"><t path="UInt"/></F12>
		<F13 public="1" static="1"><t path="UInt"/></F13>
		<F14 public="1" static="1"><t path="UInt"/></F14>
		<F15 public="1" static="1"><t path="UInt"/></F15>
		<F2 public="1" static="1"><t path="UInt"/></F2>
		<F3 public="1" static="1"><t path="UInt"/></F3>
		<F4 public="1" static="1"><t path="UInt"/></F4>
		<F5 public="1" static="1"><t path="UInt"/></F5>
		<F6 public="1" static="1"><t path="UInt"/></F6>
		<F7 public="1" static="1"><t path="UInt"/></F7>
		<F8 public="1" static="1"><t path="UInt"/></F8>
		<F9 public="1" static="1"><t path="UInt"/></F9>
		<FAST_FORWARD public="1" static="1"><t path="UInt"/></FAST_FORWARD>
		<G public="1" static="1"><t path="UInt"/></G>
		<GREEN public="1" static="1"><t path="UInt"/></GREEN>
		<GUIDE public="1" static="1"><t path="UInt"/></GUIDE>
		<H public="1" static="1"><t path="UInt"/></H>
		<HELP public="1" static="1"><t path="UInt"/></HELP>
		<HOME public="1" static="1"><t path="UInt"/></HOME>
		<I public="1" static="1"><t path="UInt"/></I>
		<INFO public="1" static="1"><t path="UInt"/></INFO>
		<INPUT public="1" static="1"><t path="UInt"/></INPUT>
		<INSERT public="1" static="1"><t path="UInt"/></INSERT>
		<J public="1" static="1"><t path="UInt"/></J>
		<K public="1" static="1"><t path="UInt"/></K>
		<KEYNAME_BEGIN public="1" static="1"><c path="String"/></KEYNAME_BEGIN>
		<KEYNAME_BREAK public="1" static="1"><c path="String"/></KEYNAME_BREAK>
		<KEYNAME_CLEARDISPLAY public="1" static="1"><c path="String"/></KEYNAME_CLEARDISPLAY>
		<KEYNAME_CLEARLINE public="1" static="1"><c path="String"/></KEYNAME_CLEARLINE>
		<KEYNAME_DELETE public="1" static="1"><c path="String"/></KEYNAME_DELETE>
		<KEYNAME_DELETECHAR public="1" static="1"><c path="String"/></KEYNAME_DELETECHAR>
		<KEYNAME_DELETELINE public="1" static="1"><c path="String"/></KEYNAME_DELETELINE>
		<KEYNAME_DOWNARROW public="1" static="1"><c path="String"/></KEYNAME_DOWNARROW>
		<KEYNAME_END public="1" static="1"><c path="String"/></KEYNAME_END>
		<KEYNAME_EXECUTE public="1" static="1"><c path="String"/></KEYNAME_EXECUTE>
		<KEYNAME_F1 public="1" static="1"><c path="String"/></KEYNAME_F1>
		<KEYNAME_F10 public="1" static="1"><c path="String"/></KEYNAME_F10>
		<KEYNAME_F11 public="1" static="1"><c path="String"/></KEYNAME_F11>
		<KEYNAME_F12 public="1" static="1"><c path="String"/></KEYNAME_F12>
		<KEYNAME_F13 public="1" static="1"><c path="String"/></KEYNAME_F13>
		<KEYNAME_F14 public="1" static="1"><c path="String"/></KEYNAME_F14>
		<KEYNAME_F15 public="1" static="1"><c path="String"/></KEYNAME_F15>
		<KEYNAME_F16 public="1" static="1"><c path="String"/></KEYNAME_F16>
		<KEYNAME_F17 public="1" static="1"><c path="String"/></KEYNAME_F17>
		<KEYNAME_F18 public="1" static="1"><c path="String"/></KEYNAME_F18>
		<KEYNAME_F19 public="1" static="1"><c path="String"/></KEYNAME_F19>
		<KEYNAME_F2 public="1" static="1"><c path="String"/></KEYNAME_F2>
		<KEYNAME_F20 public="1" static="1"><c path="String"/></KEYNAME_F20>
		<KEYNAME_F21 public="1" static="1"><c path="String"/></KEYNAME_F21>
		<KEYNAME_F22 public="1" static="1"><c path="String"/></KEYNAME_F22>
		<KEYNAME_F23 public="1" static="1"><c path="String"/></KEYNAME_F23>
		<KEYNAME_F24 public="1" static="1"><c path="String"/></KEYNAME_F24>
		<KEYNAME_F25 public="1" static="1"><c path="String"/></KEYNAME_F25>
		<KEYNAME_F26 public="1" static="1"><c path="String"/></KEYNAME_F26>
		<KEYNAME_F27 public="1" static="1"><c path="String"/></KEYNAME_F27>
		<KEYNAME_F28 public="1" static="1"><c path="String"/></KEYNAME_F28>
		<KEYNAME_F29 public="1" static="1"><c path="String"/></KEYNAME_F29>
		<KEYNAME_F3 public="1" static="1"><c path="String"/></KEYNAME_F3>
		<KEYNAME_F30 public="1" static="1"><c path="String"/></KEYNAME_F30>
		<KEYNAME_F31 public="1" static="1"><c path="String"/></KEYNAME_F31>
		<KEYNAME_F32 public="1" static="1"><c path="String"/></KEYNAME_F32>
		<KEYNAME_F33 public="1" static="1"><c path="String"/></KEYNAME_F33>
		<KEYNAME_F34 public="1" static="1"><c path="String"/></KEYNAME_F34>
		<KEYNAME_F35 public="1" static="1"><c path="String"/></KEYNAME_F35>
		<KEYNAME_F4 public="1" static="1"><c path="String"/></KEYNAME_F4>
		<KEYNAME_F5 public="1" static="1"><c path="String"/></KEYNAME_F5>
		<KEYNAME_F6 public="1" static="1"><c path="String"/></KEYNAME_F6>
		<KEYNAME_F7 public="1" static="1"><c path="String"/></KEYNAME_F7>
		<KEYNAME_F8 public="1" static="1"><c path="String"/></KEYNAME_F8>
		<KEYNAME_F9 public="1" static="1"><c path="String"/></KEYNAME_F9>
		<KEYNAME_FIND public="1" static="1"><c path="String"/></KEYNAME_FIND>
		<KEYNAME_HELP public="1" static="1"><c path="String"/></KEYNAME_HELP>
		<KEYNAME_HOME public="1" static="1"><c path="String"/></KEYNAME_HOME>
		<KEYNAME_INSERT public="1" static="1"><c path="String"/></KEYNAME_INSERT>
		<KEYNAME_INSERTCHAR public="1" static="1"><c path="String"/></KEYNAME_INSERTCHAR>
		<KEYNAME_INSERTLINE public="1" static="1"><c path="String"/></KEYNAME_INSERTLINE>
		<KEYNAME_LEFTARROW public="1" static="1"><c path="String"/></KEYNAME_LEFTARROW>
		<KEYNAME_MENU public="1" static="1"><c path="String"/></KEYNAME_MENU>
		<KEYNAME_MODESWITCH public="1" static="1"><c path="String"/></KEYNAME_MODESWITCH>
		<KEYNAME_NEXT public="1" static="1"><c path="String"/></KEYNAME_NEXT>
		<KEYNAME_PAGEDOWN public="1" static="1"><c path="String"/></KEYNAME_PAGEDOWN>
		<KEYNAME_PAGEUP public="1" static="1"><c path="String"/></KEYNAME_PAGEUP>
		<KEYNAME_PAUSE public="1" static="1"><c path="String"/></KEYNAME_PAUSE>
		<KEYNAME_PREV public="1" static="1"><c path="String"/></KEYNAME_PREV>
		<KEYNAME_PRINT public="1" static="1"><c path="String"/></KEYNAME_PRINT>
		<KEYNAME_PRINTSCREEN public="1" static="1"><c path="String"/></KEYNAME_PRINTSCREEN>
		<KEYNAME_REDO public="1" static="1"><c path="String"/></KEYNAME_REDO>
		<KEYNAME_RESET public="1" static="1"><c path="String"/></KEYNAME_RESET>
		<KEYNAME_RIGHTARROW public="1" static="1"><c path="String"/></KEYNAME_RIGHTARROW>
		<KEYNAME_SCROLLLOCK public="1" static="1"><c path="String"/></KEYNAME_SCROLLLOCK>
		<KEYNAME_SELECT public="1" static="1"><c path="String"/></KEYNAME_SELECT>
		<KEYNAME_STOP public="1" static="1"><c path="String"/></KEYNAME_STOP>
		<KEYNAME_SYSREQ public="1" static="1"><c path="String"/></KEYNAME_SYSREQ>
		<KEYNAME_SYSTEM public="1" static="1"><c path="String"/></KEYNAME_SYSTEM>
		<KEYNAME_UNDO public="1" static="1"><c path="String"/></KEYNAME_UNDO>
		<KEYNAME_UPARROW public="1" static="1"><c path="String"/></KEYNAME_UPARROW>
		<KEYNAME_USER public="1" static="1"><c path="String"/></KEYNAME_USER>
		<L public="1" static="1"><t path="UInt"/></L>
		<LAST public="1" static="1"><t path="UInt"/></LAST>
		<LEFT public="1" static="1"><t path="UInt"/></LEFT>
		<LEFTBRACKET public="1" static="1"><t path="UInt"/></LEFTBRACKET>
		<LIVE public="1" static="1"><t path="UInt"/></LIVE>
		<M public="1" static="1"><t path="UInt"/></M>
		<MASTER_SHELL public="1" static="1"><t path="UInt"/></MASTER_SHELL>
		<MENU public="1" static="1"><t path="UInt"/></MENU>
		<MINUS public="1" static="1"><t path="UInt"/></MINUS>
		<N public="1" static="1"><t path="UInt"/></N>
		<NEXT public="1" static="1"><t path="UInt"/></NEXT>
		<NUMBER_0 public="1" static="1"><t path="UInt"/></NUMBER_0>
		<NUMBER_1 public="1" static="1"><t path="UInt"/></NUMBER_1>
		<NUMBER_2 public="1" static="1"><t path="UInt"/></NUMBER_2>
		<NUMBER_3 public="1" static="1"><t path="UInt"/></NUMBER_3>
		<NUMBER_4 public="1" static="1"><t path="UInt"/></NUMBER_4>
		<NUMBER_5 public="1" static="1"><t path="UInt"/></NUMBER_5>
		<NUMBER_6 public="1" static="1"><t path="UInt"/></NUMBER_6>
		<NUMBER_7 public="1" static="1"><t path="UInt"/></NUMBER_7>
		<NUMBER_8 public="1" static="1"><t path="UInt"/></NUMBER_8>
		<NUMBER_9 public="1" static="1"><t path="UInt"/></NUMBER_9>
		<NUMPAD public="1" static="1"><t path="UInt"/></NUMPAD>
		<NUMPAD_0 public="1" static="1"><t path="UInt"/></NUMPAD_0>
		<NUMPAD_1 public="1" static="1"><t path="UInt"/></NUMPAD_1>
		<NUMPAD_2 public="1" static="1"><t path="UInt"/></NUMPAD_2>
		<NUMPAD_3 public="1" static="1"><t path="UInt"/></NUMPAD_3>
		<NUMPAD_4 public="1" static="1"><t path="UInt"/></NUMPAD_4>
		<NUMPAD_5 public="1" static="1"><t path="UInt"/></NUMPAD_5>
		<NUMPAD_6 public="1" static="1"><t path="UInt"/></NUMPAD_6>
		<NUMPAD_7 public="1" static="1"><t path="UInt"/></NUMPAD_7>
		<NUMPAD_8 public="1" static="1"><t path="UInt"/></NUMPAD_8>
		<NUMPAD_9 public="1" static="1"><t path="UInt"/></NUMPAD_9>
		<NUMPAD_ADD public="1" static="1"><t path="UInt"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" static="1"><t path="UInt"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" static="1"><t path="UInt"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" static="1"><t path="UInt"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" static="1"><t path="UInt"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" static="1"><t path="UInt"/></NUMPAD_SUBTRACT>
		<O public="1" static="1"><t path="UInt"/></O>
		<P public="1" static="1"><t path="UInt"/></P>
		<PAGE_DOWN public="1" static="1"><t path="UInt"/></PAGE_DOWN>
		<PAGE_UP public="1" static="1"><t path="UInt"/></PAGE_UP>
		<PAUSE public="1" static="1"><t path="UInt"/></PAUSE>
		<PERIOD public="1" static="1"><t path="UInt"/></PERIOD>
		<PLAY public="1" static="1"><t path="UInt"/></PLAY>
		<PREVIOUS public="1" static="1"><t path="UInt"/></PREVIOUS>
		<Q public="1" static="1"><t path="UInt"/></Q>
		<QUOTE public="1" static="1"><t path="UInt"/></QUOTE>
		<R public="1" static="1"><t path="UInt"/></R>
		<RECORD public="1" static="1"><t path="UInt"/></RECORD>
		<RED public="1" static="1"><t path="UInt"/></RED>
		<REWIND public="1" static="1"><t path="UInt"/></REWIND>
		<RIGHT public="1" static="1"><t path="UInt"/></RIGHT>
		<RIGHTBRACKET public="1" static="1"><t path="UInt"/></RIGHTBRACKET>
		<S public="1" static="1"><t path="UInt"/></S>
		<SEARCH public="1" static="1"><t path="UInt"/></SEARCH>
		<SEMICOLON public="1" static="1"><t path="UInt"/></SEMICOLON>
		<SETUP public="1" static="1"><t path="UInt"/></SETUP>
		<SHIFT public="1" static="1"><t path="UInt"/></SHIFT>
		<SKIP_BACKWARD public="1" static="1"><t path="UInt"/></SKIP_BACKWARD>
		<SKIP_FORWARD public="1" static="1"><t path="UInt"/></SKIP_FORWARD>
		<SLASH public="1" static="1"><t path="UInt"/></SLASH>
		<SPACE public="1" static="1"><t path="UInt"/></SPACE>
		<STOP public="1" static="1"><t path="UInt"/></STOP>
		<STRING_BEGIN public="1" static="1"><c path="String"/></STRING_BEGIN>
		<STRING_BREAK public="1" static="1"><c path="String"/></STRING_BREAK>
		<STRING_CLEARDISPLAY public="1" static="1"><c path="String"/></STRING_CLEARDISPLAY>
		<STRING_CLEARLINE public="1" static="1"><c path="String"/></STRING_CLEARLINE>
		<STRING_DELETE public="1" static="1"><c path="String"/></STRING_DELETE>
		<STRING_DELETECHAR public="1" static="1"><c path="String"/></STRING_DELETECHAR>
		<STRING_DELETELINE public="1" static="1"><c path="String"/></STRING_DELETELINE>
		<STRING_DOWNARROW public="1" static="1"><c path="String"/></STRING_DOWNARROW>
		<STRING_END public="1" static="1"><c path="String"/></STRING_END>
		<STRING_EXECUTE public="1" static="1"><c path="String"/></STRING_EXECUTE>
		<STRING_F1 public="1" static="1"><c path="String"/></STRING_F1>
		<STRING_F10 public="1" static="1"><c path="String"/></STRING_F10>
		<STRING_F11 public="1" static="1"><c path="String"/></STRING_F11>
		<STRING_F12 public="1" static="1"><c path="String"/></STRING_F12>
		<STRING_F13 public="1" static="1"><c path="String"/></STRING_F13>
		<STRING_F14 public="1" static="1"><c path="String"/></STRING_F14>
		<STRING_F15 public="1" static="1"><c path="String"/></STRING_F15>
		<STRING_F16 public="1" static="1"><c path="String"/></STRING_F16>
		<STRING_F17 public="1" static="1"><c path="String"/></STRING_F17>
		<STRING_F18 public="1" static="1"><c path="String"/></STRING_F18>
		<STRING_F19 public="1" static="1"><c path="String"/></STRING_F19>
		<STRING_F2 public="1" static="1"><c path="String"/></STRING_F2>
		<STRING_F20 public="1" static="1"><c path="String"/></STRING_F20>
		<STRING_F21 public="1" static="1"><c path="String"/></STRING_F21>
		<STRING_F22 public="1" static="1"><c path="String"/></STRING_F22>
		<STRING_F23 public="1" static="1"><c path="String"/></STRING_F23>
		<STRING_F24 public="1" static="1"><c path="String"/></STRING_F24>
		<STRING_F25 public="1" static="1"><c path="String"/></STRING_F25>
		<STRING_F26 public="1" static="1"><c path="String"/></STRING_F26>
		<STRING_F27 public="1" static="1"><c path="String"/></STRING_F27>
		<STRING_F28 public="1" static="1"><c path="String"/></STRING_F28>
		<STRING_F29 public="1" static="1"><c path="String"/></STRING_F29>
		<STRING_F3 public="1" static="1"><c path="String"/></STRING_F3>
		<STRING_F30 public="1" static="1"><c path="String"/></STRING_F30>
		<STRING_F31 public="1" static="1"><c path="String"/></STRING_F31>
		<STRING_F32 public="1" static="1"><c path="String"/></STRING_F32>
		<STRING_F33 public="1" static="1"><c path="String"/></STRING_F33>
		<STRING_F34 public="1" static="1"><c path="String"/></STRING_F34>
		<STRING_F35 public="1" static="1"><c path="String"/></STRING_F35>
		<STRING_F4 public="1" static="1"><c path="String"/></STRING_F4>
		<STRING_F5 public="1" static="1"><c path="String"/></STRING_F5>
		<STRING_F6 public="1" static="1"><c path="String"/></STRING_F6>
		<STRING_F7 public="1" static="1"><c path="String"/></STRING_F7>
		<STRING_F8 public="1" static="1"><c path="String"/></STRING_F8>
		<STRING_F9 public="1" static="1"><c path="String"/></STRING_F9>
		<STRING_FIND public="1" static="1"><c path="String"/></STRING_FIND>
		<STRING_HELP public="1" static="1"><c path="String"/></STRING_HELP>
		<STRING_HOME public="1" static="1"><c path="String"/></STRING_HOME>
		<STRING_INSERT public="1" static="1"><c path="String"/></STRING_INSERT>
		<STRING_INSERTCHAR public="1" static="1"><c path="String"/></STRING_INSERTCHAR>
		<STRING_INSERTLINE public="1" static="1"><c path="String"/></STRING_INSERTLINE>
		<STRING_LEFTARROW public="1" static="1"><c path="String"/></STRING_LEFTARROW>
		<STRING_MENU public="1" static="1"><c path="String"/></STRING_MENU>
		<STRING_MODESWITCH public="1" static="1"><c path="String"/></STRING_MODESWITCH>
		<STRING_NEXT public="1" static="1"><c path="String"/></STRING_NEXT>
		<STRING_PAGEDOWN public="1" static="1"><c path="String"/></STRING_PAGEDOWN>
		<STRING_PAGEUP public="1" static="1"><c path="String"/></STRING_PAGEUP>
		<STRING_PAUSE public="1" static="1"><c path="String"/></STRING_PAUSE>
		<STRING_PREV public="1" static="1"><c path="String"/></STRING_PREV>
		<STRING_PRINT public="1" static="1"><c path="String"/></STRING_PRINT>
		<STRING_PRINTSCREEN public="1" static="1"><c path="String"/></STRING_PRINTSCREEN>
		<STRING_REDO public="1" static="1"><c path="String"/></STRING_REDO>
		<STRING_RESET public="1" static="1"><c path="String"/></STRING_RESET>
		<STRING_RIGHTARROW public="1" static="1"><c path="String"/></STRING_RIGHTARROW>
		<STRING_SCROLLLOCK public="1" static="1"><c path="String"/></STRING_SCROLLLOCK>
		<STRING_SELECT public="1" static="1"><c path="String"/></STRING_SELECT>
		<STRING_STOP public="1" static="1"><c path="String"/></STRING_STOP>
		<STRING_SYSREQ public="1" static="1"><c path="String"/></STRING_SYSREQ>
		<STRING_SYSTEM public="1" static="1"><c path="String"/></STRING_SYSTEM>
		<STRING_UNDO public="1" static="1"><c path="String"/></STRING_UNDO>
		<STRING_UPARROW public="1" static="1"><c path="String"/></STRING_UPARROW>
		<STRING_USER public="1" static="1"><c path="String"/></STRING_USER>
		<SUBTITLE public="1" static="1"><t path="UInt"/></SUBTITLE>
		<T public="1" static="1"><t path="UInt"/></T>
		<TAB public="1" static="1"><t path="UInt"/></TAB>
		<U public="1" static="1"><t path="UInt"/></U>
		<UP public="1" static="1"><t path="UInt"/></UP>
		<V public="1" static="1"><t path="UInt"/></V>
		<VOD public="1" static="1"><t path="UInt"/></VOD>
		<W public="1" static="1"><t path="UInt"/></W>
		<X public="1" static="1"><t path="UInt"/></X>
		<Y public="1" static="1"><t path="UInt"/></Y>
		<YELLOW public="1" static="1"><t path="UInt"/></YELLOW>
		<Z public="1" static="1"><t path="UInt"/></Z>
		<capsLock public="1" set="null" static="1"><e path="Bool"/></capsLock>
		<hasVirtualKeyboard public="1" static="1"><e path="Bool"/></hasVirtualKeyboard>
		<numLock public="1" set="null" static="1"><e path="Bool"/></numLock>
		<physicalKeyboardType public="1" static="1"><e path="flash.ui.KeyboardType"/></physicalKeyboardType>
		<isAccessible public="1" set="method" static="1"><f a=""><e path="Bool"/></f></isAccessible>
	</class>
	<enum path="XmlType" params="" file="/home/skial/motion-twin/std/flash9/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="/home/skial/motion-twin/std/flash9/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<parse public="1" set="method" line="50" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="60" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="64" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="69" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="73" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="78" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" line="82" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" line="87" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<getNodeType set="method" line="91" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
</f></getNodeType>
		<wrap set="method" line="165" static="1"><f a="map:node:?type">
	<c path="flash.utils.Dictionary"/>
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
	<c path="Xml"/>
</f></wrap>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<_map><c path="flash.utils.Dictionary"/></_map>
		<_node><c path="flash.xml.XML"/></_node>
		<getNodeName set="method" line="107"><f a=""><c path="String"/></f></getNodeName>
		<setNodeName set="method" line="114"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<getNodeValue set="method" line="127"><f a=""><c path="String"/></f></getNodeValue>
		<setNodeValue set="method" line="134"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<getParent set="method" line="161"><f a=""><c path="Xml"/></f></getParent>
		<wraps set="method" line="179"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="Xml"/></c>
</f></wraps>
		<getAttribNS set="method" line="186"><f a="ns">
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<get public="1" set="method" line="190">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method" line="203">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<remove public="1" set="method" line="215">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<exists public="1" set="method" line="225">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="234">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<iterator public="1" set="method" line="250">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="266">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="282">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method" line="307">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="316">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="325">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="332">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="343">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method" line="353">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<new set="method" line="58"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="UInt" params="" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes">
		<c path="Int"/>
		<haxe_doc>
	The unsigned Int type is only defined for Flash9. It's currently
	handled the same as a normal Int.
</haxe_doc>
	</typedef>
	<typedef path="Null" params="T" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/skial/motion-twin/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="flash.net.IDynamicPropertyWriter" params="" file="/home/skial/motion-twin/std/flash9/net/IDynamicPropertyWriter.hx" extern="1" interface="1"><writeDynamicProperties public="1" set="method"><f a="obj:output">
	<d/>
	<c path="flash.net.IDynamicPropertyOutput"/>
	<e path="Void"/>
</f></writeDynamicProperties></class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/ColorMatrixFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.SHA1" params="" file="/home/skial/motion-twin/std/haxe/SHA1.hx">
		<hex_chr line="30" static="1"><c path="String"/></hex_chr>
		<newInt32 get="inline" set="null" line="32" static="1"><f a="left:right">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></newInt32>
		<encode public="1" set="method" line="38" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<hex set="method" line="81" static="1"><f a="num">
	<c path="haxe.Int32"/>
	<c path="String"/>
</f></hex>
		<str2blks_SHA1 set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="haxe.Int32"/></c>
			</f>
			<haxe_doc>
		Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.
	 </haxe_doc>
		</str2blks_SHA1>
		<add set="method" line="116" static="1">
			<f a="x:y">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Add integers, wrapping at 2^32.
	 </haxe_doc>
		</add>
		<rol set="method" line="125" static="1">
			<f a="num:cnt">
				<c path="haxe.Int32"/>
				<c path="Int"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Bitwise rotate a 32-bit number to the left
	 </haxe_doc>
		</rol>
		<ft set="method" line="132" static="1">
			<f a="t:b:c:d">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Perform the appropriate triplet combination function for the current iteration
	</haxe_doc>
		</ft>
		<kt set="method" line="142" static="1">
			<f a="t">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
			</f>
			<haxe_doc>
		Determine the appropriate additive constant for the current iteration
	</haxe_doc>
		</kt>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/home/skial/motion-twin/std/haxe/unit/TestStatus.hx">
		<done public="1"><e path="Bool"/></done>
		<success public="1"><e path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.ime.IIMEClient" params="" file="/home/skial/motion-twin/std/flash9/text/ime/IIMEClient.hx" extern="1" interface="1">
		<compositionEndIndex public="1" set="null"><c path="Int"/></compositionEndIndex>
		<compositionStartIndex public="1" set="null"><c path="Int"/></compositionStartIndex>
		<selectionActiveIndex public="1" set="null"><c path="Int"/></selectionActiveIndex>
		<selectionAnchorIndex public="1" set="null"><c path="Int"/></selectionAnchorIndex>
		<verticalTextLayout public="1" set="null"><e path="Bool"/></verticalTextLayout>
		<confirmComposition public="1" set="method"><f a="?text:?preserveSelection">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></confirmComposition>
		<getTextBounds public="1" set="method"><f a="startIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getTextBounds>
		<getTextInRange public="1" set="method"><f a="startIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></getTextInRange>
		<selectRange public="1" set="method"><f a="anchorIndex:activeIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></selectRange>
		<updateComposition public="1" set="method"><f a="text:attributes:compositionStartIndex:compositionEndIndex">
	<c path="String"/>
	<c path="flash.Vector"><c path="flash.text.ime.CompositionAttributeRange"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></updateComposition>
	</class>
	<class path="DateTools" params="" file="/home/skial/motion-twin/std/DateTools.hx">
		<__format_get set="method" line="38" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="91" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Format the date [d] according to the format [f]. The format
		is compatible with the [strftime] standard format, except that there
		is no support in Flash and JS for day and months names (due to lack
		of proper internationalization API). On haXe/Neko/Windows, some
		formats are not supported.
	</haxe_doc>
		</format>
		<delta public="1" set="method" line="129" static="1">
			<f a="d:t">
				<c path="Date"/>
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date which time has been changed by [t] milliseconds.
	</haxe_doc>
		</delta>
		<DAYS_OF_MONTH line="133" static="1"><c path="Array"><c path="Int"/></c></DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="138" static="1">
			<f a="d">
				<c path="Date"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the number of days in a month
	</haxe_doc>
		</getMonthDays>
		<seconds public="1" set="method" line="152" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of seconds to a date-time
	</haxe_doc>
		</seconds>
		<minutes public="1" set="method" line="159" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of minutes to a date-time
	</haxe_doc>
		</minutes>
		<hours public="1" set="method" line="166" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of hours to a date-time
	</haxe_doc>
		</hours>
		<days public="1" set="method" line="173" static="1">
			<f a="n">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a number of days to a date-time
	</haxe_doc>
		</days>
		<parse public="1" set="method" line="180" static="1">
			<f a="t">
				<c path="Float"/>
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
			</f>
			<haxe_doc>
		Separate a date-time into several components
	</haxe_doc>
		</parse>
		<make public="1" set="method" line="196" static="1">
			<f a="o">
				<a>
					<seconds><c path="Int"/></seconds>
					<ms><c path="Float"/></ms>
					<minutes><c path="Int"/></minutes>
					<hours><c path="Int"/></hours>
					<days><c path="Int"/></days>
				</a>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Build a date-time from several components
	</haxe_doc>
		</make>
		<haxe_doc>
	The DateTools class contains some extra functionalities for [Date]
	manipulation. It's stored in a different class in order to prevent
	the standard [Date] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="35"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="31"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="54"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="50"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="73"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="69"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="89"><f a="name">
	<c path="String"/>
	<e path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="85"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><e path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="103"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="99"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/home/skial/motion-twin/std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="getName" set="null"><c path="String"/></name>
		<innerData public="1" get="getInnerData" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="getInnerHTML" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="getElements" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<getName set="method" line="136"><f a=""><c path="String"/></f></getName>
		<getInnerData set="method" line="140"><f a=""><c path="String"/></f></getInnerData>
		<getInnerHTML set="method" line="152"><f a=""><c path="String"/></f></getInnerHTML>
		<getElements set="method" line="159"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><e path="Bool"/></f></hasNext>
</a></f></getElements>
		<new public="1" set="method" line="125"><f a="x">
	<c path="Xml"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.NetFilterEvent" params="" file="/home/skial/motion-twin/std/flash9/events/NetFilterEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<header public="1"><c path="flash.utils.ByteArray"/></header>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?header:?data">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Md5" params="" file="/home/skial/motion-twin/std/haxe/Md5.hx">
		<encode public="1" set="method" line="32" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<inst line="55" static="1"><c path="haxe.Md5"/></inst>
		<bitOR set="method" line="60"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="66"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="72"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></bitAND>
		<addme set="method" line="78"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></addme>
		<rhex set="method" line="84"><f a="num">
	<c path="Int"/>
	<c path="String"/>
</f></rhex>
		<str2blks set="method" line="94"><f a="str">
	<c path="String"/>
	<c path="Array"><c path="Int"/></c>
</f></str2blks>
		<rol set="method" line="114"><f a="num:cnt">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></rol>
		<cmn set="method" line="118"><f a="q:a:b:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></cmn>
		<ff set="method" line="122"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ff>
		<gg set="method" line="126"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></gg>
		<hh set="method" line="130"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></hh>
		<ii set="method" line="134"><f a="a:b:c:d:x:s:t">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></ii>
		<doEncode set="method" line="138"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></doEncode>
		<new set="method" line="57"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Creates a MD5 of a String.
</haxe_doc>
	</class>
	<class path="flash.events.FocusEvent" params="" file="/home/skial/motion-twin/std/flash9/events/FocusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<FOCUS_IN public="1" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT public="1" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<isRelatedObjectInaccessible public="1"><e path="Bool"/></isRelatedObjectInaccessible>
		<keyCode public="1"><t path="UInt"/></keyCode>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="flash.display.InteractiveObject"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/skial/motion-twin/std/haxe/Stack.hx" module="haxe.Stack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><c path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<c path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>
	Elements return by [Stack] methods.
</haxe_doc>
	</enum>
	<class path="haxe.Stack" params="" file="/home/skial/motion-twin/std/haxe/Stack.hx">
		<callStack public="1" set="method" line="46" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the call stack elements.
	</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="69" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>
		Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		catched.
	</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="100" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of the stack as a printable string.
	</haxe_doc>
		</toString>
		<itemToString set="method" line="109" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<e path="Void"/>
</f></itemToString>
		<makeStack set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>
	Get informations about the call stack.
</haxe_doc>
	</class>
	<enum path="flash.system.SecurityPanel" params="" file="/home/skial/motion-twin/std/flash9/system/SecurityPanel.hx">
		<SETTINGS_MANAGER/>
		<PRIVACY/>
		<MICROPHONE/>
		<LOCAL_STORAGE/>
		<DISPLAY/>
		<DEFAULT/>
		<CAMERA/>
	</enum>
	<class path="flash.net.URLLoader" params="" file="/home/skial/motion-twin/std/flash9/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1"><t path="UInt"/></bytesLoaded>
		<bytesTotal public="1"><t path="UInt"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Bitmap" params="" file="/home/skial/motion-twin/std/flash9/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<smoothing public="1"><e path="Bool"/></smoothing>
		<new public="1" set="method"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<e path="flash.display.PixelSnapping"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Class" params="T" file="/home/skial/motion-twin/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="flash.Memory" params="" file="/home/skial/motion-twin/std/flash9/Memory.hx">
		<select public="1" get="inline" set="null" line="5" static="1"><f a="b">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></select>
		<setByte public="1" get="inline" set="null" line="9" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setByte>
		<setI16 public="1" get="inline" set="null" line="13" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI16>
		<setI32 public="1" get="inline" set="null" line="17" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI32>
		<setFloat public="1" get="inline" set="null" line="21" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setFloat>
		<setDouble public="1" get="inline" set="null" line="25" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setDouble>
		<getByte public="1" get="inline" set="null" line="29" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getByte>
		<getUI16 public="1" get="inline" set="null" line="33" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getUI16>
		<getI32 public="1" get="inline" set="null" line="37" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getI32>
		<getFloat public="1" get="inline" set="null" line="41" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloat>
		<getDouble public="1" get="inline" set="null" line="45" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getDouble>
		<signExtend1 public="1" get="inline" set="null" line="49" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></signExtend1>
		<signExtend8 public="1" get="inline" set="null" line="53" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></signExtend8>
		<signExtend16 public="1" get="inline" set="null" line="57" static="1"><f a="v">
	<c path="Int"/>
	<c path="Int"/>
</f></signExtend16>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/home/skial/motion-twin/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><e path="Bool"/></success>
		<add public="1" set="method" line="37"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<e path="Void"/>
</f></add>
		<toString public="1" set="method" line="43"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.trace.Trace" params="" file="/home/skial/motion-twin/std/flash9/trace/Trace.hx" extern="1">
		<FILE public="1" static="1"><d/></FILE>
		<LISTENER public="1" static="1"><d/></LISTENER>
		<METHODS public="1" static="1"><c path="Int"/></METHODS>
		<METHODS_AND_LINES public="1" static="1"><c path="Int"/></METHODS_AND_LINES>
		<METHODS_AND_LINES_WITH_ARGS public="1" static="1"><c path="Int"/></METHODS_AND_LINES_WITH_ARGS>
		<METHODS_WITH_ARGS public="1" static="1"><c path="Int"/></METHODS_WITH_ARGS>
		<OFF public="1" static="1"><c path="Int"/></OFF>
		<getLevel public="1" set="method" static="1"><f a="?target">
	<c path="Int"/>
	<c path="Int"/>
</f></getLevel>
		<getListener public="1" set="method" static="1"><f a=""><d/></f></getListener>
		<setLevel public="1" set="method" static="1"><f a="l:?target">
	<c path="Int"/>
	<c path="Int"/>
	<d/>
</f></setLevel>
		<setListener public="1" set="method" static="1"><f a="f">
	<d/>
	<d/>
</f></setListener>
	</class>
	<class path="flash.net.NetConnection" params="" file="/home/skial/motion-twin/std/flash9/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><t path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><e path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null"><c path="String"/></farID>
		<farNonce public="1" set="null"><c path="String"/></farNonce>
		<maxPeerConnections public="1"><t path="UInt"/></maxPeerConnections>
		<nearID public="1" set="null"><c path="String"/></nearID>
		<nearNonce public="1" set="null"><c path="String"/></nearNonce>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null"><c path="Array"><d/></c></unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><e path="Bool"/></usingTLS>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<e path="Bool"/>
	<d/>
	<e path="Void"/>
</f></addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.text.engine.Kerning" params="" file="/home/skial/motion-twin/std/flash9/text/engine/Kerning.hx">
		<ON/>
		<OFF/>
		<AUTO/>
	</enum>
	<class path="Array" params="T" file="/home/skial/motion-twin/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="flash.text.engine.SpaceJustifier" params="" file="/home/skial/motion-twin/std/flash9/text/engine/SpaceJustifier.hx" extern="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<letterSpacing public="1"><e path="Bool"/></letterSpacing>
		<maximumSpacing public="1"><c path="Float"/></maximumSpacing>
		<minimumSpacing public="1"><c path="Float"/></minimumSpacing>
		<optimumSpacing public="1"><c path="Float"/></optimumSpacing>
		<new public="1" set="method"><f a="?locale:?lineJustification:?letterSpacing">
	<c path="String"/>
	<e path="flash.text.engine.LineJustification"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.xml.XMLNodeType" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLNodeType.hx">
		<XML_DECLARATION/>
		<TEXT_NODE/>
		<PROCESSING_INSTRUCTION_NODE/>
		<ELEMENT_NODE/>
		<DOCUMENT_TYPE_NODE/>
		<COMMENT_NODE/>
		<CDATA_NODE/>
	</enum>
	<class path="flash.events.FullScreenEvent" params="" file="/home/skial/motion-twin/std/flash9/events/FullScreenEvent.hx" extern="1">
		<extends path="flash.events.ActivityEvent"/>
		<FULL_SCREEN public="1" static="1"><c path="String"/></FULL_SCREEN>
		<fullScreen public="1" set="null"><e path="Bool"/></fullScreen>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?fullScreen">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.MorphShape" params="" file="/home/skial/motion-twin/std/flash9/display/MorphShape.hx" extern="1"><extends path="flash.display.DisplayObject"/></class>
	<enum path="flash.text.engine.FontLookup" params="" file="/home/skial/motion-twin/std/flash9/text/engine/FontLookup.hx">
		<EMBEDDED_CFF/>
		<DEVICE/>
	</enum>
	<class path="flash.text.TextRenderer" params="" file="/home/skial/motion-twin/std/flash9/text/TextRenderer.hx" extern="1">
		<antiAliasType public="1" static="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<displayMode public="1" static="1"><e path="flash.text.TextDisplayMode"/></displayMode>
		<maxLevel public="1" static="1"><c path="Int"/></maxLevel>
		<setAdvancedAntiAliasingTable public="1" set="method" static="1"><f a="fontName:fontStyle:colorType:advancedAntiAliasingTable">
	<c path="String"/>
	<e path="flash.text.FontStyle"/>
	<e path="flash.text.TextColorType"/>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></setAdvancedAntiAliasingTable>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/home/skial/motion-twin/std/flash9/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><e path="Bool"/></available>
		<marshallExceptions public="1" static="1"><e path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString set="method" line="51" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections line="96" static="1"><c path="Hash"><c path="haxe.remoting.ExternalConnection"/></c></connections>
		<doCall set="method" line="98" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<jsConnect public="1" set="method" line="124" static="1"><f a="name:?ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.ExternalConnection"/>
</f></jsConnect>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="40"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="46"><f a=""><e path="Void"/></f></close>
		<call public="1" set="method" line="64"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="35"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Synchronous communications between Flash and Javascript.
</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.SocketWrapper" params="" file="/home/skial/motion-twin/std/haxe/remoting/SocketWrapper.hx">
		<ID line="33" static="1"><c path="Int"/></ID>
		<create set="method" line="35" static="1"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></create>
		<init set="method" line="76" static="1"><f a=""><e path="Void"/></f></init>
		<_ line="85" static="1"><e path="Void"/></_>
		<haxe_doc>
	See [js.XMLSocket]
</haxe_doc>
	</class>
	<class path="flash.media.StageVideo" params="" file="/home/skial/motion-twin/std/flash9/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><c path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><c path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><c path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<e path="Void"/>
</f></attachNetStream>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/home/skial/motion-twin/std/flash9/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><c path="Float"/></len>
		<offset public="1"><c path="Float"/></offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><c path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><e path="flash.net.NetStreamPlayTransitions"/></transition>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.filters.ShaderFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/ShaderFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<bottomExtension public="1"><c path="Int"/></bottomExtension>
		<leftExtension public="1"><c path="Int"/></leftExtension>
		<rightExtension public="1"><c path="Int"/></rightExtension>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<topExtension public="1"><c path="Int"/></topExtension>
		<new public="1" set="method"><f a="?shader">
	<c path="flash.display.Shader"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.system.IME" params="" file="/home/skial/motion-twin/std/flash9/system/IME.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<constructOK public="1" get="null" static="1"><e path="Bool"/></constructOK>
		<conversionMode public="1" static="1"><e path="flash.system.IMEConversionMode"/></conversionMode>
		<enabled public="1" static="1"><e path="Bool"/></enabled>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<compositionAbandoned public="1" static="1"><f a=""><e path="Void"/></f></compositionAbandoned>
		<compositionSelectionChanged public="1" static="1"><f a="start:end">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></compositionSelectionChanged>
		<doConversion public="1" set="method" static="1"><f a=""><e path="Void"/></f></doConversion>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<e path="Void"/>
</f></setCompositionString>
	</class>
	<class path="haxe.Public" params="" file="/home/skial/motion-twin/std/haxe/Public.hx" interface="1"><haxe_doc>
	When implementing this interface, all default fields access for the class and
	subclasses becomes [public] instead of [private].
</haxe_doc></class>
	<class path="flash.events.WeakMethodClosure" params="" file="/home/skial/motion-twin/std/flash9/events/WeakMethodClosure.hx" extern="1"><new public="1" set="method"><f a=""><e path="Void"/></f></new></class>
	<enum path="flash.text.GridFitType" params="" file="/home/skial/motion-twin/std/flash9/text/GridFitType.hx">
		<SUBPIXEL/>
		<PIXEL/>
		<NONE/>
	</enum>
	<class path="haxe.remoting.LocalConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID line="29" static="1"><c path="Int"/></ID>
		<remotingCall set="method" line="80" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="95" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></remotingResult>
		<connect public="1" set="method" line="112" static="1"><f a="name:?ctx:?allowDomains">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.LocalConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="IntHash"><a>
	<result><f a="">
	<d/>
	<e path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><c path="flash.net.LocalConnection"/></cnx>
</a></__data>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="57"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="61"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<close public="1" set="method" line="76"><f a=""><e path="Void"/></f></close>
		<new set="method" line="46"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="IntHash"><a>
	<result><f a="">
	<d/>
	<e path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><c path="flash.net.LocalConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="/home/skial/motion-twin/std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="36"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.
</haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/skial/motion-twin/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/skial/motion-twin/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><e path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/skial/motion-twin/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><e path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="/home/skial/motion-twin/std/haxe/Template.hx">
		<splitter line="50" static="1"><c path="EReg"/></splitter>
		<expr_splitter line="51" static="1"><c path="EReg"/></expr_splitter>
		<expr_trim line="52" static="1"><c path="EReg"/></expr_trim>
		<expr_int line="53" static="1"><c path="EReg"/></expr_int>
		<expr_float line="54" static="1"><c path="EReg"/></expr_float>
		<globals public="1" line="56" static="1"><d/></globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="71"><f a="context:?macros">
	<d/>
	<d/>
	<c path="String"/>
</f></execute>
		<resolve set="method" line="80"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="91"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="127"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="142"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="192"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="223"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="242"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="256"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="260"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="306"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<e path="Void"/>
</f></run>
		<new public="1" set="method" line="64"><f a="str">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="/home/skial/motion-twin/std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="flash.net.XMLSocket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="/home/skial/motion-twin/std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="68"><f a="c">
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="87"><f a="c">
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="108"><f a="c1:c2">
	<c path="Int"/>
	<c path="Int"/>
	<t path="Null"><c path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="116"><f a="len">
	<c path="Int"/>
	<a>
		<c2><t path="Null"><c path="Int"/></t></c2>
		<c1><t path="Null"><c path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="124"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="132"><f a="answer:?isException">
	<d/>
	<e path="Bool"/>
	<e path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="142"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="155"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="159"><f a="data">
	<c path="String"/>
	<e path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="167"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="189"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<new public="1" set="method" line="63"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The haXe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the \0 message delimiting char.
	A request string is composed of the following serialized values :
		- the boolean true for a request
		- an array of strings representing the object+method path
		- an array of parameters
	A response string is composed of the following serialized values :
		- the boolean false for a response
		- a serialized value representing the result
	Exceptions are serialized with [serializeException] so they will be thrown immediatly
	when they are unserialized.
</haxe_doc>
	</class>
	<class path="flash.display.ShaderData" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.MouseEvent" params="" file="/home/skial/motion-twin/std/flash9/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK public="1" static="1"><c path="String"/></CLICK>
		<DOUBLE_CLICK public="1" static="1"><c path="String"/></DOUBLE_CLICK>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<ROLL_OUT public="1" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1"><e path="Bool"/></altKey>
		<buttonDown public="1"><e path="Bool"/></buttonDown>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<delta public="1"><c path="Int"/></delta>
		<isRelatedObjectInaccessible public="1"><e path="Bool"/></isRelatedObjectInaccessible>
		<localX public="1"><c path="Float"/></localX>
		<localY public="1"><c path="Float"/></localY>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<stageX public="1" set="null"><c path="Float"/></stageX>
		<stageY public="1" set="null"><c path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/home/skial/motion-twin/std/flash9/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><c path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><c path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><c path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><c path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><c path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><c path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><c path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><c path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><c path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><c path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><c path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><c path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><c path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><c path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><c path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><c path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><c path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><c path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><c path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="/home/skial/motion-twin/std/flash9/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<BUBBLING_PHASE/>
		<AT_TARGET/>
	</enum>
	<class path="haxe.rtti.HtmlEditor" params="" file="/home/skial/motion-twin/std/haxe/rtti/HtmlEditor.hx">
		<UID line="30" static="1"><c path="Int"/></UID>
		<id><c path="String"/></id>
		<types><c path="Hash"><e path="haxe.rtti.TypeTree"/></c></types>
		<buf><c path="StringBuf"/></buf>
		<nfields><c path="Int"/></nfields>
		<add public="1" set="method" line="41"><f a="tl">
	<t path="haxe.rtti.TypeRoot"/>
	<e path="Void"/>
</f></add>
		<buildHTML public="1" set="method" line="55"><f a="id:v:t">
	<c path="String"/>
	<d/>
	<e path="haxe.rtti.CType"/>
	<c path="String"/>
</f></buildHTML>
		<open set="method" line="65"><f a="t">
	<c path="String"/>
	<e path="Void"/>
</f></open>
		<close set="method" line="69"><f a="?t">
	<c path="String"/>
	<e path="Void"/>
</f></close>
		<genUID set="method" line="73"><f a=""><c path="String"/></f></genUID>
		<genFieldName set="method" line="77"><f a=""><c path="String"/></f></genFieldName>
		<skipField set="method" line="81"><f a=""><e path="Void"/></f></skipField>
		<attrib set="method" line="85"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></attrib>
		<followTypeDef set="method" line="89"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<e path="haxe.rtti.CType"/>
</f></followTypeDef>
		<getEnum set="method" line="99"><f a="name">
	<c path="String"/>
	<t path="haxe.rtti.Enumdef"/>
</f></getEnum>
		<buildNullField set="method" line="105"><f a="checked">
	<e path="Bool"/>
	<e path="Void"/>
</f></buildNullField>
		<buildHTMLRec set="method" line="115"><f a="v:t:nullable">
	<d/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></buildHTMLRec>
		<buildObject public="1" set="method" line="232"><f a="id:params:t">
	<c path="String"/>
	<c path="Hash"><c path="String"/></c>
	<e path="haxe.rtti.CType"/>
	<d/>
</f></buildObject>
		<buildObjectRec set="method" line="238"><f a="params:t:nullable">
	<c path="Hash"><c path="String"/></c>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<d/>
</f></buildObjectRec>
		<skipObjectRec set="method" line="307"><f a="t:nullable">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></skipObjectRec>
		<new public="1" set="method" line="37"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.display.SpreadMethod" params="" file="/home/skial/motion-twin/std/flash9/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
	</enum>
	<class path="flash.system.System" params="" file="/home/skial/motion-twin/std/flash9/system/System.hx" extern="1">
		<freeMemory public="1" static="1"><c path="Float"/></freeMemory>
		<ime public="1" set="null" static="1"><c path="flash.system.IME"/></ime>
		<privateMemory public="1" static="1"><c path="Float"/></privateMemory>
		<totalMemory public="1" set="null" static="1"><t path="UInt"/></totalMemory>
		<totalMemoryNumber public="1" static="1"><c path="Float"/></totalMemoryNumber>
		<useCodePage public="1" static="1"><e path="Bool"/></useCodePage>
		<vmVersion public="1" set="null" static="1"><c path="String"/></vmVersion>
		<disposeXML public="1" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="Void"/>
</f></disposeXML>
		<exit public="1" set="method" static="1"><f a="code">
	<t path="UInt"/>
	<e path="Void"/>
</f></exit>
		<gc public="1" set="method" static="1"><f a=""><e path="Void"/></f></gc>
		<nativeConstructionOnly public="1" static="1"><f a="object">
	<d/>
	<e path="Void"/>
</f></nativeConstructionOnly>
		<pause public="1" set="method" static="1"><f a=""><e path="Void"/></f></pause>
		<resume public="1" set="method" static="1"><f a=""><e path="Void"/></f></resume>
		<setClipboard public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<e path="Void"/>
</f></setClipboard>
	</class>
	<class path="Enum" params="T" file="/home/skial/motion-twin/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="flash.display.GraphicsSolidFill" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsSolidFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alpha public="1"><c path="Float"/></alpha>
		<color public="1"><t path="UInt"/></color>
		<new public="1" set="method"><f a="?color:?alpha">
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/home/skial/motion-twin/std/flash9/geom/Rectangle.hx" extern="1">
		<bottom public="1"><c path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><c path="Float"/></height>
		<left public="1"><c path="Float"/></left>
		<right public="1"><c path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><c path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></containsRect>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><e path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<e path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><e path="Void"/></f></setEmpty>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/skial/motion-twin/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="38"><f a="?l">
	<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
	<e path="Void"/>
</f></sort>
		<sortFields set="method" line="64"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="Null"><t path="haxe.rtti.ClassField"/></t></c>
</f></sortFields>
		<process public="1" set="method" line="84"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Void"/>
</f></process>
		<mergeClasses set="method" line="89"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<e path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="125"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<e path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="145"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<e path="Bool"/>
</f></mergeTypedefs>
		<merge set="method" line="153"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<e path="Void"/>
</f></merge>
		<mkPath set="method" line="219"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="223"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="230"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="240"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="244"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="250"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xpath set="method" line="260"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="271"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="307"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xenum set="method" line="329"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="349"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xtypedef set="method" line="377"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="400"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="451"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="458"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="/home/skial/motion-twin/std/flash9/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><c path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null"><c path="String"/></currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><e path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><c path="Int"/></framesLoaded>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><c path="Int"/></totalFrames>
		<trackAsMenu public="1"><e path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><e path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><e path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><e path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><e path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><e path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><e path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.events.SampleDataEvent" params="" file="/home/skial/motion-twin/std/flash9/events/SampleDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SAMPLE_DATA public="1" static="1"><c path="String"/></SAMPLE_DATA>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<position public="1"><c path="Float"/></position>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?theposition:?thedata">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Shader" params="" file="/home/skial/motion-twin/std/flash9/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.ColorCorrection" params="" file="/home/skial/motion-twin/std/flash9/display/ColorCorrection.hx">
		<ON/>
		<OFF/>
		<DEFAULT/>
	</enum>
	<class path="haxe.remoting.AMFConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="73" static="1"><f a="gatewayUrl">
	<c path="String"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></urlConnect>
		<connect public="1" set="method" line="90" static="1"><f a="nc">
	<c path="flash.net.NetConnection"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></connect>
		<registerClassAlias public="1" set="method" line="95" static="1"><f a="s:cl">
	<c path="String"/>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></registerClassAlias>
		<__data><a>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	<cnx><c path="flash.net.NetConnection"/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="52"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="56"><f a=""><e path="Void"/></f></close>
		<call public="1" set="method" line="60"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="41"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
		<cnx><c path="flash.net.NetConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="/home/skial/motion-twin/std/flash9/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1"><f a="fontName:fontStyle">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
</f></isFontCompatible>
		<alwaysShowSelection public="1"><e path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><e path="Bool"/></background>
		<backgroundColor public="1"><t path="UInt"/></backgroundColor>
		<border public="1"><e path="Bool"/></border>
		<borderColor public="1"><t path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><c path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><c path="Int"/></caretIndex>
		<condenseWhite public="1"><e path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><e path="Bool"/></displayAsPassword>
		<embedFonts public="1"><e path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><c path="Int"/></length>
		<maxChars public="1"><c path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><c path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><c path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><e path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><e path="Bool"/></multiline>
		<numLines public="1" set="null"><c path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><c path="Int"/></scrollH>
		<scrollV public="1"><c path="Int"/></scrollV>
		<selectable public="1"><e path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><c path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><c path="Int"/></selectionEndIndex>
		<sharpness public="1"><c path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><t path="UInt"/></textColor>
		<textHeight public="1" set="null"><c path="Float"/></textHeight>
		<textWidth public="1" set="null"><c path="Float"/></textWidth>
		<thickness public="1"><c path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><e path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><e path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<c path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<e path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<e path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setTextFormat>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="haxe.TypeResolver" params="" file="/home/skial/motion-twin/std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<c path="Enum"><d/></c>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<c path="Class"><d/></c>
</f></resolveClass>
</a></typedef>
	<class path="Type" params="" file="/home/skial/motion-twin/std/flash9/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="40" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="52" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="66" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="73" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="86" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="90" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="111" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="128" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="149" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="162" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="174" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="180" static="1"><f a="t:fact">
	<d/>
	<e path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></describe>
		<getInstanceFields public="1" set="method" line="197" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="201" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="208" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="212" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="244" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="261" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="265" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="269" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/skial/motion-twin/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="34" static="1"><t path="haxe.TypeResolver"/></DEFAULT_RESOLVER>
		<BASE64 line="36" static="1"><c path="String"/></BASE64>
		<CODES line="39" static="1"><c path="flash.utils.ByteArray"/></CODES>
		<initCodes set="method" line="41" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></initCodes>
		<run public="1" set="method" line="364" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Unserialize a single value and return it.
	</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><c path="Int"/></pos>
		<length><c path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="76"><f a="r">
	<t path="haxe.TypeResolver"/>
	<e path="Void"/>
</f></setResolver>
		<getResolver public="1" set="method" line="86"><f a=""><t path="haxe.TypeResolver"/></f></getResolver>
		<get get="inline" set="null" line="90"><f a="p">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<readDigits set="method" line="100"><f a=""><c path="Int"/></f></readDigits>
		<unserializeObject set="method" line="132"><f a="o">
	<a/>
	<e path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="147"><f a="edecl:tag">
	<c path="Enum"><d/></c>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="168"><f a=""><d/></f></unserialize>
		<new public="1" set="method" line="64"><f a="buf">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.BitmapData" params="" file="/home/skial/motion-twin/std/flash9/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><c path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><e path="Bool"/></transparent>
		<width public="1" set="null"><c path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<e path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<d/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></copyPixels>
		<dispose public="1" set="method"><f a=""><e path="Void"/></f></dispose>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><t path="UInt"/></c>
</f></getVector>
		<histogram public="1" set="method"><f a="?hRect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><c path="flash.Vector"><c path="Float"/></c></c>
</f></histogram>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<d/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<e path="Bool"/>
</f></hitTest>
		<lock public="1" set="method"><f a=""><e path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<c path="Int"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<e path="Void"/>
</f></perlinNoise>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<c path="Int"/>
</f></pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<c path="Int"/>
	<c path="Int"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<e path="Void"/>
</f></setPixels>
		<setVector public="1" set="method"><f a="rect:inputVector">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.Vector"><t path="UInt"/></c>
	<e path="Void"/>
</f></setVector>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<t path="UInt"/>
	<e path="Bool"/>
	<t path="UInt"/>
</f></threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<e path="Void"/>
</f></unlock>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.RenderingMode" params="" file="/home/skial/motion-twin/std/flash9/text/engine/RenderingMode.hx">
		<NORMAL/>
		<CFF/>
	</enum>
	<enum path="flash.display.PixelSnapping" params="" file="/home/skial/motion-twin/std/flash9/display/PixelSnapping.hx">
		<NEVER/>
		<AUTO/>
		<ALWAYS/>
	</enum>
	<enum path="flash.text.engine.DigitCase" params="" file="/home/skial/motion-twin/std/flash9/text/engine/DigitCase.hx">
		<OLD_STYLE/>
		<LINING/>
		<DEFAULT/>
	</enum>
	<class path="flash.text.engine.ElementFormat" params="" file="/home/skial/motion-twin/std/flash9/text/engine/ElementFormat.hx" extern="1">
		<alignmentBaseline public="1"><e path="flash.text.engine.TextBaseline"/></alignmentBaseline>
		<alpha public="1"><c path="Float"/></alpha>
		<baselineShift public="1"><c path="Float"/></baselineShift>
		<breakOpportunity public="1"><e path="flash.text.engine.BreakOpportunity"/></breakOpportunity>
		<color public="1"><t path="UInt"/></color>
		<digitCase public="1"><e path="flash.text.engine.DigitCase"/></digitCase>
		<digitWidth public="1"><e path="flash.text.engine.DigitWidth"/></digitWidth>
		<dominantBaseline public="1"><e path="flash.text.engine.TextBaseline"/></dominantBaseline>
		<fontDescription public="1"><c path="flash.text.engine.FontDescription"/></fontDescription>
		<fontSize public="1"><c path="Float"/></fontSize>
		<kerning public="1"><e path="flash.text.engine.Kerning"/></kerning>
		<ligatureLevel public="1"><e path="flash.text.engine.LigatureLevel"/></ligatureLevel>
		<locale public="1"><c path="String"/></locale>
		<locked public="1"><e path="Bool"/></locked>
		<textRotation public="1"><e path="flash.text.engine.TextRotation"/></textRotation>
		<trackingLeft public="1"><c path="Float"/></trackingLeft>
		<trackingRight public="1"><c path="Float"/></trackingRight>
		<typographicCase public="1"><e path="flash.text.engine.TypographicCase"/></typographicCase>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.ElementFormat"/></f></clone>
		<getFontMetrics public="1" set="method"><f a=""><c path="flash.text.engine.FontMetrics"/></f></getFontMetrics>
		<new public="1" set="method"><f a="?fontDescription:?fontSize:?color:?alpha:?textRotation:?dominantBaseline:?alignmentBaseline:?baselineShift:?kerning:?trackingRight:?trackingLeft:?locale:?breakOpportunity:?digitCase:?digitWidth:?ligatureLevel:?typographicCase">
	<c path="flash.text.engine.FontDescription"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="flash.text.engine.TextRotation"/>
	<e path="flash.text.engine.TextBaseline"/>
	<e path="flash.text.engine.TextBaseline"/>
	<c path="Float"/>
	<e path="flash.text.engine.Kerning"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="String"/>
	<e path="flash.text.engine.BreakOpportunity"/>
	<e path="flash.text.engine.DigitCase"/>
	<e path="flash.text.engine.DigitWidth"/>
	<e path="flash.text.engine.LigatureLevel"/>
	<e path="flash.text.engine.TypographicCase"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.XMLSocket" params="" file="/home/skial/motion-twin/std/flash9/net/XMLSocket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<connected public="1" set="null"><e path="Bool"/></connected>
		<timeout public="1"><c path="Int"/></timeout>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></connect>
		<send public="1" set="method"><f a="object">
	<d/>
	<e path="Void"/>
</f></send>
		<new public="1" set="method"><f a="?host:?port">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.errors.InvalidSWFError" params="" file="/home/skial/motion-twin/std/flash9/errors/InvalidSWFError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.FontPosture" params="" file="/home/skial/motion-twin/std/flash9/text/engine/FontPosture.hx">
		<NORMAL/>
		<ITALIC/>
	</enum>
	<class path="haxe.BaseCode" params="" file="/home/skial/motion-twin/std/haxe/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><c path="Int"/></nbits>
		<tbl><c path="Array"><c path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><e path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsPathCommand" params="" file="/home/skial/motion-twin/std/flash9/display/GraphicsPathCommand.hx" extern="1">
		<LINE_TO public="1" get="inline" set="null" line="4" static="1"><c path="Int"/></LINE_TO>
		<MOVE_TO public="1" get="inline" set="null" line="5" static="1"><c path="Int"/></MOVE_TO>
		<CURVE_TO public="1" get="inline" set="null" line="6" static="1"><c path="Int"/></CURVE_TO>
		<WIDE_LINE_TO public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></WIDE_LINE_TO>
		<WIDE_MOVE_TO public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></WIDE_MOVE_TO>
		<NO_OP public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></NO_OP>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="/home/skial/motion-twin/std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="36"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.
</haxe_doc>
	</class>
	<class path="flash.errors.StackOverflowError" params="" file="/home/skial/motion-twin/std/flash9/errors/StackOverflowError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.TriangleCulling" params="" file="/home/skial/motion-twin/std/flash9/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="/home/skial/motion-twin/std/flash9/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><c path="Float"/></leftToLeft>
		<leftToRight public="1"><c path="Float"/></leftToRight>
		<pan public="1"><c path="Float"/></pan>
		<rightToLeft public="1"><c path="Float"/></rightToLeft>
		<rightToRight public="1"><c path="Float"/></rightToRight>
		<volume public="1"><c path="Float"/></volume>
		<new public="1" set="method"><f a="?vol:?panning">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Point" params="" file="/home/skial/motion-twin/std/flash9/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<c path="Float"/>
	<c path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><c path="Float"/></length>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<e path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<c path="Float"/>
	<e path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileReferenceList" params="" file="/home/skial/motion-twin/std/flash9/net/FileReferenceList.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<fileList public="1" set="null"><c path="Array"><c path="flash.net.FileReference"/></c></fileList>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<e path="Bool"/>
</f></browse>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.text.engine.LigatureLevel" params="" file="/home/skial/motion-twin/std/flash9/text/engine/LigatureLevel.hx">
		<UNCOMMON/>
		<NONE/>
		<MINIMUM/>
		<EXOTIC/>
		<COMMON/>
	</enum>
	<class path="flash.errors.IllegalOperationError" params="" file="/home/skial/motion-twin/std/flash9/errors/IllegalOperationError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Loader" params="" file="/home/skial/motion-twin/std/flash9/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1"><c path="flash.events.UncaughtErrorEvents"/></uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<e path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><e path="Void"/></f></unload>
		<unloadAndStop public="1" set="method"><f a="?gc">
	<e path="Bool"/>
	<e path="Void"/>
</f></unloadAndStop>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.TextLineMetrics" params="" file="/home/skial/motion-twin/std/flash9/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><c path="Float"/></ascent>
		<descent public="1"><c path="Float"/></descent>
		<height public="1"><c path="Float"/></height>
		<leading public="1"><c path="Float"/></leading>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.CFFHinting" params="" file="/home/skial/motion-twin/std/flash9/text/engine/CFFHinting.hx">
		<NONE/>
		<HORIZONTAL_STEM/>
	</enum>
	<class path="flash.sampler.NewObjectSample" params="" file="/home/skial/motion-twin/std/flash9/sampler/NewObjectSample.hx" extern="1">
		<extends path="flash.sampler.Sample"/>
		<id public="1"><c path="Float"/></id>
		<object public="1" set="null"><d/></object>
		<size public="1"><c path="Float"/></size>
		<type public="1"><c path="Class"><d/></c></type>
	</class>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="76" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="43"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="47"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<new set="method" line="32"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.rtti.Generic" params="" file="/home/skial/motion-twin/std/haxe/rtti/Generic.hx" interface="1"><haxe_doc>
	You can implement this interface with a parametrized type. For each type
	parameter used, a duplicate class with be created. This is useful on
	platforms that supports runtime typing (such as flash9).
</haxe_doc></class>
	<enum path="flash.text.engine.JustificationStyle" params="" file="/home/skial/motion-twin/std/flash9/text/engine/JustificationStyle.hx">
		<PUSH_OUT_ONLY/>
		<PUSH_IN_KINSOKU/>
		<PRIORITIZE_LEAST_ADJUSTMENT/>
	</enum>
	<class path="flash.net.SharedObject" params="" file="/home/skial/motion-twin/std/flash9/net/SharedObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><t path="UInt"/></defaultObjectEncoding>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<c path="Int"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<c path="Int"/>
</f></getDiskUsage>
		<getLocal public="1" set="method" static="1"><f a="name:?localPath:?secure">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="flash.net.SharedObject"/>
</f></getLocal>
		<getRemote public="1" set="method" static="1"><f a="name:?remotePath:?persistence:?secure">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<e path="Bool"/>
	<c path="flash.net.SharedObject"/>
</f></getRemote>
		<client public="1"><d/></client>
		<data public="1" set="null"><d/></data>
		<fps public="1" get="null"><c path="Float"/></fps>
		<objectEncoding public="1"><t path="UInt"/></objectEncoding>
		<size public="1" set="null"><t path="UInt"/></size>
		<clear public="1" set="method"><f a=""><e path="Void"/></f></clear>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="myConnection:?params">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<e path="Void"/>
</f></connect>
		<flush public="1" set="method"><f a="?minDiskSpace">
	<c path="Int"/>
	<e path="flash.net.SharedObjectFlushStatus"/>
</f></flush>
		<send public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<setDirty public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<e path="Void"/>
</f></setDirty>
		<setProperty public="1" set="method"><f a="propertyName:?value">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></setProperty>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.Log" params="" file="/home/skial/motion-twin/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
		<setColor public="1" set="dynamic" line="52" static="1"><f a="rgb">
	<c path="Int"/>
	<e path="Void"/>
</f></setColor>
	</class>
	<class path="flash.printing.PrintJob" params="" file="/home/skial/motion-twin/std/flash9/printing/PrintJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<orientation public="1" set="null"><e path="flash.printing.PrintJobOrientation"/></orientation>
		<pageHeight public="1" set="null"><c path="Int"/></pageHeight>
		<pageWidth public="1" set="null"><c path="Int"/></pageWidth>
		<paperHeight public="1" set="null"><c path="Int"/></paperHeight>
		<paperWidth public="1" set="null"><c path="Int"/></paperWidth>
		<addPage public="1" set="method"><f a="sprite:?printArea:?options:?frameNum">
	<c path="flash.display.Sprite"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.printing.PrintJobOptions"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addPage>
		<send public="1" set="method"><f a=""><e path="Void"/></f></send>
		<start public="1" set="method"><f a=""><e path="Bool"/></f></start>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestCase" params="" file="/home/skial/motion-twin/std/haxe/unit/TestCase.hx">
		<implements path="haxe.Public"/>
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="34"><f a=""><e path="Void"/></f></setup>
		<tearDown public="1" set="method" line="37"><f a=""><e path="Void"/></f></tearDown>
		<print public="1" set="method" line="40"><f a="v">
	<d/>
	<e path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="44"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="54"><f a="b:?c">
	<e path="Bool"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="64"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.engine.TextLineMirrorRegion" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextLineMirrorRegion.hx" extern="1">
		<bounds public="1" set="null"><c path="flash.geom.Rectangle"/></bounds>
		<element public="1" set="null"><c path="flash.text.engine.ContentElement"/></element>
		<mirror public="1" set="null"><c path="flash.events.EventDispatcher"/></mirror>
		<nextRegion public="1" set="null"><c path="flash.text.engine.TextLineMirrorRegion"/></nextRegion>
		<previousRegion public="1" set="null"><c path="flash.text.engine.TextLineMirrorRegion"/></previousRegion>
		<textLine public="1" set="null"><c path="flash.text.engine.TextLine"/></textLine>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.text.engine.TextLine" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TextLine.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<MAX_LINE_WIDTH public="1" static="1"><c path="Int"/></MAX_LINE_WIDTH>
		<ascent public="1" set="null"><c path="Float"/></ascent>
		<atomCount public="1" set="null"><c path="Int"/></atomCount>
		<descent public="1" set="null"><c path="Float"/></descent>
		<hasGraphicElement public="1" set="null"><e path="Bool"/></hasGraphicElement>
		<hasTabs public="1"><e path="Bool"/></hasTabs>
		<mirrorRegions public="1" set="null"><c path="flash.Vector"><c path="flash.text.engine.TextLineMirrorRegion"/></c></mirrorRegions>
		<nextLine public="1" set="null"><c path="flash.text.engine.TextLine"/></nextLine>
		<previousLine public="1" set="null"><c path="flash.text.engine.TextLine"/></previousLine>
		<rawTextLength public="1" set="null"><c path="Int"/></rawTextLength>
		<specifiedWidth public="1" set="null"><c path="Float"/></specifiedWidth>
		<textBlock public="1" set="null"><c path="flash.text.engine.TextBlock"/></textBlock>
		<textBlockBeginIndex public="1" set="null"><c path="Int"/></textBlockBeginIndex>
		<textHeight public="1" set="null"><c path="Float"/></textHeight>
		<textWidth public="1" set="null"><c path="Float"/></textWidth>
		<unjustifiedTextWidth public="1" set="null"><c path="Float"/></unjustifiedTextWidth>
		<userData public="1"><d/></userData>
		<validity public="1"><c path="String"/></validity>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<flushAtomData public="1" set="method"><f a=""><e path="Void"/></f></flushAtomData>
		<getAtomBidiLevel public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getAtomBidiLevel>
		<getAtomBounds public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getAtomBounds>
		<getAtomCenter public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="Float"/>
</f></getAtomCenter>
		<getAtomGraphic public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getAtomGraphic>
		<getAtomIndexAtCharIndex public="1" set="method"><f a="charIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getAtomIndexAtCharIndex>
		<getAtomIndexAtPoint public="1" set="method"><f a="stageX:stageY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
</f></getAtomIndexAtPoint>
		<getAtomTextBlockBeginIndex public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getAtomTextBlockBeginIndex>
		<getAtomTextBlockEndIndex public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getAtomTextBlockEndIndex>
		<getAtomTextRotation public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<c path="String"/>
</f></getAtomTextRotation>
		<getAtomWordBoundaryOnLeft public="1" set="method"><f a="atomIndex">
	<c path="Int"/>
	<e path="Bool"/>
</f></getAtomWordBoundaryOnLeft>
		<getBaselinePosition public="1" set="method"><f a="baseline">
	<c path="String"/>
	<c path="Float"/>
</f></getBaselinePosition>
		<getMirrorRegion public="1" set="method"><f a="mirror">
	<c path="flash.events.EventDispatcher"/>
	<c path="flash.text.engine.TextLineMirrorRegion"/>
</f></getMirrorRegion>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.net.URLVariables" params="" file="/home/skial/motion-twin/std/flash9/net/URLVariables.hx" extern="1">
		<decode public="1" set="method"><f a="source">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.display.BitmapDataChannel" params="" file="/home/skial/motion-twin/std/flash9/display/BitmapDataChannel.hx" extern="1">
		<ALPHA public="1" get="inline" set="null" line="4" static="1"><c path="Int"/></ALPHA>
		<BLUE public="1" get="inline" set="null" line="5" static="1"><c path="Int"/></BLUE>
		<GREEN public="1" get="inline" set="null" line="6" static="1"><c path="Int"/></GREEN>
		<RED public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></RED>
	</class>
	<enum path="flash.net.NetStreamAppendBytesAction" params="" file="/home/skial/motion-twin/std/flash9/net/NetStreamAppendBytesAction.hx">
		<RESET_SEEK/>
		<RESET_BEGIN/>
		<END_SEQUENCE/>
	</enum>
	<class path="flash.display.ShaderParameter" params="" file="/home/skial/motion-twin/std/flash9/display/ShaderParameter.hx" extern="1">
		<index public="1" set="null"><c path="Int"/></index>
		<type public="1" set="null"><e path="flash.display.ShaderParameterType"/></type>
		<value public="1"><c path="Array"><d/></c></value>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.text.engine.BreakOpportunity" params="" file="/home/skial/motion-twin/std/flash9/text/engine/BreakOpportunity.hx">
		<NONE/>
		<AUTO/>
		<ANY/>
		<ALL/>
	</enum>
	<class path="haxe.Serializer" params="" file="/home/skial/motion-twin/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="34" static="1">
			<e path="Bool"/>
			<haxe_doc>
		If the values you are serializing can contain
		circular references or objects repetitions, you should
		set USE_CACHE to true to prevent infinite loops.
	</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="40" static="1">
			<e path="Bool"/>
			<haxe_doc>
		Use constructor indexes for enums instead of names.
		This is less reliable but more compact.
	</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="42" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="409" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Serialize a single value and return the string.
	</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="Hash"><c path="Int"/></c></shash>
		<scount><c path="Int"/></scount>
		<useCache public="1"><e path="Bool"/></useCache>
		<useEnumIndex public="1"><e path="Bool"/></useEnumIndex>
		<toString public="1" set="method" line="60"><f a=""><c path="String"/></f></toString>
		<serializeString set="method" line="94"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="113"><f a="v">
	<unknown/>
	<e path="Bool"/>
</f></serializeRef>
		<serializeClassFields set="method" line="136"><f a="v:c">
	<a><hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></hasOwnProperty></a>
	<c path="Class"><d/></c>
	<e path="Void"/>
</f></serializeClassFields>
		<serializeFields set="method" line="150"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="158"><f a="v">
	<d/>
	<e path="Void"/>
</f></serialize>
		<serializeException public="1" set="method" line="390"><f a="e">
	<d/>
	<e path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="51"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.utils.Proxy" params="" file="/home/skial/motion-twin/std/flash9/utils/Proxy.hx" extern="1">
		<callProperty public="1" set="method"><f a="name:?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></callProperty>
		<deleteProperty public="1" set="method"><f a="name">
	<d/>
	<e path="Bool"/>
</f></deleteProperty>
		<getDescendants public="1" set="method"><f a="name">
	<d/>
	<d/>
</f></getDescendants>
		<getProperty public="1" set="method"><f a="name">
	<d/>
	<d/>
</f></getProperty>
		<hasProperty public="1" set="method"><f a="name">
	<d/>
	<e path="Bool"/>
</f></hasProperty>
		<isAttribute public="1" set="method"><f a="name">
	<d/>
	<e path="Bool"/>
</f></isAttribute>
		<nextName public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></nextName>
		<nextNameIndex public="1" set="method"><f a="index">
	<c path="Int"/>
	<c path="Int"/>
</f></nextNameIndex>
		<nextValue public="1" set="method"><f a="index">
	<c path="Int"/>
	<d/>
</f></nextValue>
		<setProperty public="1" set="method"><f a="name:value">
	<d/>
	<d/>
	<e path="Void"/>
</f></setProperty>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.display.Stage" params="" file="/home/skial/motion-twin/std/flash9/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<color public="1"><t path="UInt"/></color>
		<colorCorrection public="1"><e path="flash.display.ColorCorrection"/></colorCorrection>
		<colorCorrectionSupport public="1" set="null"><e path="flash.display.ColorCorrectionSupport"/></colorCorrectionSupport>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><c path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><t path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><t path="UInt"/></fullScreenWidth>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><e path="Bool"/></showDefaultContextMenu>
		<stageFocusRect public="1"><e path="Bool"/></stageFocusRect>
		<stageHeight public="1"><c path="Int"/></stageHeight>
		<stageVideos public="1"><c path="flash.Vector"><c path="flash.media.StageVideo"/></c></stageVideos>
		<stageWidth public="1"><c path="Int"/></stageWidth>
		<wmodeGPU public="1"><e path="Bool"/></wmodeGPU>
		<invalidate public="1" set="method"><f a=""><e path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><e path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.text.TextExtent" params="" file="/home/skial/motion-twin/std/flash9/text/TextExtent.hx" extern="1">
		<ascent public="1"><c path="Float"/></ascent>
		<descent public="1"><c path="Float"/></descent>
		<height public="1"><c path="Float"/></height>
		<textFieldHeight public="1"><c path="Float"/></textFieldHeight>
		<textFieldWidth public="1"><c path="Float"/></textFieldWidth>
		<width public="1"><c path="Float"/></width>
		<new public="1" set="method"><f a="width:height:textFieldWidth:textFieldHeight:ascent:descent">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.StaticText" params="" file="/home/skial/motion-twin/std/flash9/text/StaticText.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<text public="1" set="null"><c path="String"/></text>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.system.Capabilities" params="" file="/home/skial/motion-twin/std/flash9/system/Capabilities.hx" extern="1">
		<_internal public="1" set="null" static="1"><t path="UInt"/></_internal>
		<allowsFullScreen public="1" static="1"><e path="Bool"/></allowsFullScreen>
		<avHardwareDisable public="1" set="null" static="1"><e path="Bool"/></avHardwareDisable>
		<cpuArchitecture public="1" static="1"><c path="String"/></cpuArchitecture>
		<hasAccessibility public="1" set="null" static="1"><e path="Bool"/></hasAccessibility>
		<hasAudio public="1" set="null" static="1"><e path="Bool"/></hasAudio>
		<hasAudioEncoder public="1" set="null" static="1"><e path="Bool"/></hasAudioEncoder>
		<hasEmbeddedVideo public="1" set="null" static="1"><e path="Bool"/></hasEmbeddedVideo>
		<hasIME public="1" set="null" static="1"><e path="Bool"/></hasIME>
		<hasMP3 public="1" set="null" static="1"><e path="Bool"/></hasMP3>
		<hasPrinting public="1" set="null" static="1"><e path="Bool"/></hasPrinting>
		<hasScreenBroadcast public="1" set="null" static="1"><e path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" set="null" static="1"><e path="Bool"/></hasScreenPlayback>
		<hasStreamingAudio public="1" set="null" static="1"><e path="Bool"/></hasStreamingAudio>
		<hasStreamingVideo public="1" set="null" static="1"><e path="Bool"/></hasStreamingVideo>
		<hasTLS public="1" set="null" static="1"><e path="Bool"/></hasTLS>
		<hasVideoEncoder public="1" set="null" static="1"><e path="Bool"/></hasVideoEncoder>
		<isDebugger public="1" set="null" static="1"><e path="Bool"/></isDebugger>
		<isEmbeddedInAcrobat public="1" set="null" static="1"><e path="Bool"/></isEmbeddedInAcrobat>
		<language public="1" set="null" static="1"><c path="String"/></language>
		<localFileReadDisable public="1" set="null" static="1"><e path="Bool"/></localFileReadDisable>
		<manufacturer public="1" set="null" static="1"><c path="String"/></manufacturer>
		<maxLevelIDC public="1" set="null" static="1"><c path="String"/></maxLevelIDC>
		<os public="1" set="null" static="1"><c path="String"/></os>
		<pixelAspectRatio public="1" set="null" static="1"><c path="Float"/></pixelAspectRatio>
		<playerType public="1" set="null" static="1"><c path="String"/></playerType>
		<screenColor public="1" set="null" static="1"><c path="String"/></screenColor>
		<screenDPI public="1" set="null" static="1"><c path="Float"/></screenDPI>
		<screenResolutionX public="1" set="null" static="1"><c path="Float"/></screenResolutionX>
		<screenResolutionY public="1" set="null" static="1"><c path="Float"/></screenResolutionY>
		<serverString public="1" set="null" static="1"><c path="String"/></serverString>
		<supports32BitProcesses public="1" static="1"><e path="Bool"/></supports32BitProcesses>
		<supports64BitProcesses public="1" static="1"><e path="Bool"/></supports64BitProcesses>
		<touchscreenType public="1" static="1"><e path="flash.system.TouchscreenType"/></touchscreenType>
		<version public="1" set="null" static="1"><c path="String"/></version>
	</class>
	<class path="flash.net.ObjectEncoding" params="" file="/home/skial/motion-twin/std/flash9/net/ObjectEncoding.hx" extern="1">
		<AMF0 public="1" static="1"><t path="UInt"/></AMF0>
		<AMF3 public="1" static="1"><t path="UInt"/></AMF3>
		<DEFAULT public="1" static="1"><t path="UInt"/></DEFAULT>
		<dynamicPropertyWriter public="1" static="1"><c path="flash.net.IDynamicPropertyWriter"/></dynamicPropertyWriter>
	</class>
	<enum path="flash.filters.BitmapFilterType" params="" file="/home/skial/motion-twin/std/flash9/filters/BitmapFilterType.hx">
		<OUTER/>
		<INNER/>
		<FULL/>
	</enum>
	<class path="flash.display.MouseCursorData" params="" file="/home/skial/motion-twin/std/flash9/display/MouseCursorData.hx" extern="1">
		<data public="1"><c path="flash.Vector"><c path="flash.display.BitmapData"/></c></data>
		<frameRate public="1"><c path="Float"/></frameRate>
		<hotSpot public="1"><c path="flash.geom.Point"/></hotSpot>
		<name public="1"><c path="String"/></name>
		<new public="1"><f a="name">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Http" params="" file="/home/skial/motion-twin/std/haxe/Http.hx">
		<url public="1"><c path="String"/></url>
		<headers><c path="Hash"><c path="String"/></c></headers>
		<params><c path="Hash"><c path="String"/></c></params>
		<setHeader public="1" set="method" line="90"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setHeader>
		<setParameter public="1" set="method" line="94"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setParameter>
		<request public="1" set="method" line="104"><f a="post">
	<e path="Bool"/>
	<e path="Void"/>
</f></request>
		<onData public="1" set="dynamic" line="624"><f a="data">
	<c path="String"/>
	<e path="Void"/>
</f></onData>
		<onError public="1" set="dynamic" line="627"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></onError>
		<onStatus public="1" set="dynamic" line="630"><f a="status">
	<c path="Int"/>
	<e path="Void"/>
</f></onStatus>
		<new public="1" set="method" line="76">
			<f a="url">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * In PHP Https (SSL) connections are allowed only if the OpenSSL extension is enabled.
	 * @param	url
	 </haxe_doc>
		</new>
	</class>
	<class path="Date" params="" file="/home/skial/motion-twin/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/home/skial/motion-twin/std/flash9/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="/home/skial/motion-twin/std/flash9/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
	</enum>
	<class path="flash.net.NetStreamInfo" params="" file="/home/skial/motion-twin/std/flash9/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><c path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><c path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><c path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><c path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><c path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><c path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><c path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><c path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><c path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><c path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><c path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><c path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><c path="Float"/></droppedFrames>
		<maxBytesPerSecond public="1" set="null"><c path="Float"/></maxBytesPerSecond>
		<playbackBytesPerSecond public="1" set="null"><c path="Float"/></playbackBytesPerSecond>
		<videoBufferByteLength public="1" set="null"><c path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><c path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><c path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><c path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1"><c path="Float"/></videoLossRate>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<name><c path="String"/></name>
</a></c></CAnonymous>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<isPublic><e path="Bool"/></isPublic>
	<isOverride><e path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isInterface><e path="Bool"/></isInterface>
	<isExtern><e path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><e path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<isExtern><e path="Bool"/></isExtern>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="Hash"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<isPrivate><e path="Bool"/></isPrivate>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/skial/motion-twin/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="116" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="134" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<e path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<e path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="148" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<e path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="163" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<e path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="212" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<e path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="232" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<e path="Bool"/>
</f></constructorEq>
	</class>
	<class path="Math" params="" file="/home/skial/motion-twin/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="flash.filters.ConvolutionFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/ConvolutionFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<bias public="1"><c path="Float"/></bias>
		<clamp public="1"><e path="Bool"/></clamp>
		<color public="1"><t path="UInt"/></color>
		<divisor public="1"><c path="Float"/></divisor>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<matrixX public="1"><c path="Float"/></matrixX>
		<matrixY public="1"><c path="Float"/></matrixY>
		<preserveAlpha public="1"><e path="Bool"/></preserveAlpha>
		<new public="1" set="method"><f a="?matrixX:?matrixY:?matrix:?divisor:?bias:?preserveAlpha:?clamp:?color:?alpha">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="UInt"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/home/skial/motion-twin/std/flash9/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><c path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<e path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<t path="UInt"/>
	<e path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.events.StatusEvent" params="" file="/home/skial/motion-twin/std/flash9/events/StatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<STATUS public="1" static="1"><c path="String"/></STATUS>
		<code public="1"><c path="String"/></code>
		<level public="1"><c path="String"/></level>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?code:?level">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GradientBevelFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/GradientBevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<angle public="1"><c path="Float"/></angle>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<colors public="1"><c path="Array"><d/></c></colors>
		<distance public="1"><c path="Float"/></distance>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<strength public="1"><c path="Float"/></strength>
		<type public="1"><c path="String"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Reflect" params="" file="/home/skial/motion-twin/std/flash9/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" get="inline" set="null" line="40" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="44" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="57" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="61" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="67" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
		Does not work on Neko platform.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="71" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="86" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="92" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="99" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="flash.text.TextRun" params="" file="/home/skial/motion-twin/std/flash9/text/TextRun.hx" extern="1">
		<beginIndex public="1"><c path="Int"/></beginIndex>
		<endIndex public="1"><c path="Int"/></endIndex>
		<textFormat public="1"><c path="flash.text.TextFormat"/></textFormat>
		<new public="1" set="method"><f a="beginIndex:endIndex:textFormat">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.text.TextFormat"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.Vector" params="T" file="/home/skial/motion-twin/std/flash9/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="26" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="30" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<length public="1"><t path="UInt"/></length>
		<fixed public="1"><e path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><e path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<e path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="pos:?end">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<c path="Int"/>
	</f>
	<e path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<c path="Int"/>
	<c path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<t path="UInt"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The Vector class is very similar to Array but is only supported by the Flash Player 10+
</haxe_doc>
	</class>
	<class path="flash.sampler.StackFrame" params="" file="/home/skial/motion-twin/std/flash9/sampler/StackFrame.hx" extern="1">
		<file public="1"><c path="String"/></file>
		<line public="1"><t path="UInt"/></line>
		<name public="1"><c path="String"/></name>
		<scriptID public="1"><c path="Float"/></scriptID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/home/skial/motion-twin/std/flash9/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><e path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><e path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><e path="Bool"/></silent>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.events.AsyncErrorEvent" params="" file="/home/skial/motion-twin/std/flash9/events/AsyncErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<ASYNC_ERROR public="1" static="1"><c path="String"/></ASYNC_ERROR>
		<error public="1"><c path="flash.errors.Error"/></error>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?error">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="flash.errors.Error"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="String" params="" file="/home/skial/motion-twin/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<cca set="method"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></cca>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="flash.Boot" params="" file="/home/skial/motion-twin/std/flash9/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="50" static="1"><e path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="81" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="90" static="1"><f a="v:t">
	<d/>
	<d/>
	<e path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="100" static="1"><f a=""><e path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="108" static="1"><f a="rgb">
	<t path="UInt"/>
	<e path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="112" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="131" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="146" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="188" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<start set="method" line="52"><f a=""><e path="Void"/></f></start>
		<doInitDelay set="method" line="72"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></doInitDelay>
		<init set="method" line="77"><f a=""><e path="Void"/></f></init>
		<new public="1" set="method" line="44"><f a=""><e path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/home/skial/motion-twin/std/flash9/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.xml.XMLParser" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLParser.hx" extern="1">
		<getNext public="1" set="method"><f a="tag">
	<c path="flash.xml.XMLTag"/>
	<c path="Int"/>
</f></getNext>
		<startParse public="1" set="method"><f a="source:ignoreWhite">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></startParse>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/home/skial/motion-twin/std/flash9/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><e path="Bool"/></forwardAndBack>
		<loop public="1"><e path="Bool"/></loop>
		<play public="1"><e path="Bool"/></play>
		<print public="1"><e path="Bool"/></print>
		<quality public="1"><e path="Bool"/></quality>
		<rewind public="1"><e path="Bool"/></rewind>
		<save public="1"><e path="Bool"/></save>
		<zoom public="1"><e path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.printing.PrintJobOptions" params="" file="/home/skial/motion-twin/std/flash9/printing/PrintJobOptions.hx" extern="1">
		<printAsBitmap public="1"><e path="Bool"/></printAsBitmap>
		<new public="1" set="method"><f a="?printAsBitmap">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="/home/skial/motion-twin/std/flash9/net/URLLoaderDataFormat.hx">
		<VARIABLES/>
		<TEXT/>
		<BINARY/>
	</enum>
	<class path="flash.errors.SecurityError" params="" file="/home/skial/motion-twin/std/flash9/errors/SecurityError.hx" extern="1"><extends path="flash.errors.Error"/></class>
	<class path="haxe.remoting.SocketConnection" params="" file="/home/skial/motion-twin/std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="126" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></results>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="48"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="54"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="63"><f a="h">
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="67"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="71"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<e path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="75"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="79"><f a=""><e path="Void"/></f></close>
		<processMessage public="1" set="method" line="83"><f a="data">
	<c path="String"/>
	<e path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="117"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<e path="Void"/>
</f></defaultLog>
		<new set="method" line="43"><f a="data:path">
	<a>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<e path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<e path="Void"/>
</f></onError>
</a></c></results>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<e path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<e path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="flash.net.LocalConnection" params="" file="/home/skial/motion-twin/std/flash9/net/LocalConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><e path="Bool"/></isSupported>
		<client public="1"><d/></client>
		<domain public="1" set="null"><c path="String"/></domain>
		<isPerUser public="1"><e path="Bool"/></isPerUser>
		<allowDomain public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></allowInsecureDomain>
		<close public="1" set="method"><f a=""><e path="Void"/></f></close>
		<connect public="1" set="method"><f a="connectionName">
	<c path="String"/>
	<e path="Void"/>
</f></connect>
		<send public="1" set="method"><f a="connectionName:methodName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></send>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/home/skial/motion-twin/std/flash9/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="flash.xml.XMLTag" params="" file="/home/skial/motion-twin/std/flash9/xml/XMLTag.hx" extern="1">
		<attrs public="1"><d/></attrs>
		<empty public="1"><e path="Bool"/></empty>
		<type public="1"><e path="flash.xml.XMLNodeType"/></type>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.desktop.ClipboardFormats" params="" file="/home/skial/motion-twin/std/flash9/desktop/ClipboardFormats.hx">
		<URL_FORMAT/>
		<TEXT_FORMAT/>
		<SERIALIZATION_PREFIX/>
		<RICH_TEXT_FORMAT/>
		<REFERENCE_PREFIX/>
		<HTML_FORMAT/>
		<FLASH_PREFIX/>
		<FILE_PROMISE_LIST_FORMAT/>
		<FILE_LIST_FORMAT/>
		<BITMAP_FORMAT/>
		<AIR_PREFIX/>
	</enum>
	<class path="haxe.io.BytesBuffer" params="" file="/home/skial/motion-twin/std/haxe/io/BytesBuffer.hx">
		<b><c path="flash.utils.ByteArray"/></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="flash.text.FontType" params="" file="/home/skial/motion-twin/std/flash9/text/FontType.hx">
		<EMBEDDED_CFF/>
		<EMBEDDED/>
		<DEVICE/>
	</enum>
	<enum path="flash.net.SharedObjectFlushStatus" params="" file="/home/skial/motion-twin/std/flash9/net/SharedObjectFlushStatus.hx">
		<PENDING/>
		<FLUSHED/>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="/home/skial/motion-twin/std/flash9/text/TextFormatDisplay.hx">
		<INLINE/>
		<BLOCK/>
	</enum>
	<enum path="flash.text.engine.TypographicCase" params="" file="/home/skial/motion-twin/std/flash9/text/engine/TypographicCase.hx">
		<UPPERCASE/>
		<TITLE/>
		<SMALL_CAPS/>
		<LOWERCASE/>
		<DEFAULT/>
		<CAPS_AND_SMALL_CAPS/>
		<CAPS/>
	</enum>
	<class path="flash.net.URLRequestMethod" params="" file="/home/skial/motion-twin/std/flash9/net/URLRequestMethod.hx" extern="1">
		<DELETE public="1" static="1"><c path="String"/></DELETE>
		<GET public="1" static="1"><c path="String"/></GET>
		<HEAD public="1" static="1"><c path="String"/></HEAD>
		<OPTIONS public="1" static="1"><c path="String"/></OPTIONS>
		<POST public="1" static="1"><c path="String"/></POST>
		<PUT public="1" static="1"><c path="String"/></PUT>
	</class>
	<class path="haxe.FastCell" params="T" file="/home/skial/motion-twin/std/haxe/FastList.hx" module="haxe.FastList">
		<elt public="1"><c path="haxe.FastCell.T"/></elt>
		<next public="1"><c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.FastCell.T"/>
	<c path="haxe.FastCell"><c path="haxe.FastCell.T"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.FastList" params="T" file="/home/skial/motion-twin/std/haxe/FastList.hx">
		<head public="1"><c path="haxe.FastCell"><c path="haxe.FastList.T"/></c></head>
		<add public="1" get="inline" set="null" line="60">
			<f a="item">
				<c path="haxe.FastList.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the head of the list.
	</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="68">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="77">
			<f a=""><t path="Null"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="90">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="98">
			<f a="v">
				<c path="haxe.FastList.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="123">
			<f a=""><t path="Iterator"><c path="haxe.FastList.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="141">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="54">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. A different class is created for each container used in platforms where it matters
</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/home/skial/motion-twin/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="57">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="73">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="String"/></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="flash.errors.ScriptTimeoutError" params="" file="/home/skial/motion-twin/std/flash9/errors/ScriptTimeoutError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method"><f a="?message:?id">
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileFilter" params="" file="/home/skial/motion-twin/std/flash9/net/FileFilter.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<extension public="1"><c path="String"/></extension>
		<macType public="1"><c path="String"/></macType>
		<new public="1" set="method"><f a="description:extension:?macType">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="/home/skial/motion-twin/std/flash9/events/ProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROGRESS public="1" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1"><c path="Float"/></bytesLoaded>
		<bytesTotal public="1"><c path="Float"/></bytesTotal>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.events.HTTPStatusEvent" params="" file="/home/skial/motion-twin/std/flash9/events/HTTPStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<HTTP_RESPONSE_STATUS public="1" static="1"><c path="String"/></HTTP_RESPONSE_STATUS>
		<HTTP_STATUS public="1" static="1"><c path="String"/></HTTP_STATUS>
		<responseHeaders public="1"><c path="Array"><d/></c></responseHeaders>
		<responseURL public="1"><c path="String"/></responseURL>
		<status public="1" set="null"><c path="Int"/></status>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?status">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.filters.DisplacementMapFilterMode" params="" file="/home/skial/motion-twin/std/flash9/filters/DisplacementMapFilterMode.hx">
		<WRAP/>
		<IGNORE/>
		<COLOR/>
		<CLAMP/>
	</enum>
	<enum path="flash.text.TextDisplayMode" params="" file="/home/skial/motion-twin/std/flash9/text/TextDisplayMode.hx">
		<LCD/>
		<DEFAULT/>
		<CRT/>
	</enum>
	<class path="flash.display.AVM1Movie" params="" file="/home/skial/motion-twin/std/flash9/display/AVM1Movie.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<addCallback public="1" set="method"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></addCallback>
		<call public="1" set="method"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="Lambda" params="" file="/home/skial/motion-twin/std/Lambda.hx">
		<array public="1" params="A" set="method" line="35" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>
		Creates an [Array] from an [Iterable]
	</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>
		Creates a [List] from an [Iterable]
	</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="56" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>
		Creates a new [Iterable] by appling the function 'f' to all
		elements of the iterator 'it'.
	</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="66" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<c path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>
		Similar to [map], but also pass an index for each item iterated.
	</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="81" static="1">
			<f a="it:elt:?cmp">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<f a=":">
					<c path="has.A"/>
					<c path="has.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the element is part of an iterable. The comparison
		is made using the [==] operator. Optionally you can pass as
		a third parameter a function that performs the comparison.
		That function must take as arguments the two items to
		compare and returns a boolean value.
	</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="97" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if at least one element of the iterable is found by using the specific function.
	</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="107" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<e path="Bool"/>
				</f>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if all elements of the iterable have the specified property defined by [f].
	</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="117" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<e path="Void"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Call the function 'f' on all elements of the [Iterable] 'it'.
	</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>
		Return the list of elements matching the function 'f'
	</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="136" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>
		Functional 'fold' using an [Iterable]
	</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="145" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<e path="Bool"/>
				</f>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Count the number of elements in an [Iterable] having [pred] returning true.
	</haxe_doc>
		</count>
		<empty public="1" set="method" line="160" static="1">
			<f a="it">
				<t path="Iterable"><d/></t>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an iterable does not contain any element.
	</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="168" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the item in the given Iterable, depending on the order of the Iterator.
		Returns -1 if the item was not found.
	</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="181" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>
		Returns a list containing all items of 'a' followed by all items of 'b'
	</haxe_doc>
		</concat>
		<haxe_doc>
	The [Lambda] class is a collection of functional methods in order to
	use functional-style programming with haXe.
</haxe_doc>
	</class>
	<class path="flash.text.ime.CompositionAttributeRange" params="" file="/home/skial/motion-twin/std/flash9/text/ime/CompositionAttributeRange.hx" extern="1">
		<converted public="1"><e path="Bool"/></converted>
		<relativeEnd public="1"><c path="Int"/></relativeEnd>
		<relativeStart public="1"><c path="Int"/></relativeStart>
		<selected public="1"><e path="Bool"/></selected>
		<new public="1" set="method"><f a="relativeStart:relativeEnd:selected:converted">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><c path="Float"/></alpha>
		<angle public="1"><c path="Float"/></angle>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<color public="1"><t path="UInt"/></color>
		<distance public="1"><c path="Float"/></distance>
		<hideObject public="1"><e path="Bool"/></hideObject>
		<inner public="1"><e path="Bool"/></inner>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<strength public="1"><c path="Float"/></strength>
		<new public="1" set="method"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<c path="Float"/>
	<c path="Float"/>
	<t path="UInt"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.EastAsianJustifier" params="" file="/home/skial/motion-twin/std/flash9/text/engine/EastAsianJustifier.hx" extern="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<justificationStyle public="1"><e path="flash.text.engine.JustificationStyle"/></justificationStyle>
		<new public="1" set="method"><f a="?locale:?lineJustification:?justificationStyle">
	<c path="String"/>
	<e path="flash.text.engine.LineJustification"/>
	<e path="flash.text.engine.JustificationStyle"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Timer" params="" file="/home/skial/motion-twin/std/haxe/Timer.hx">
		<delay public="1" set="method" line="76" static="1"><f a="f:time_ms">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<measure public="1" params="T" set="method" line="87" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<stamp public="1" set="method" line="97" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns a timestamp, in seconds
	</haxe_doc>
		</stamp>
		<id><t path="Null"><c path="Int"/></t></id>
		<stop public="1" set="method" line="52"><f a=""><e path="Void"/></f></stop>
		<run public="1" set="dynamic" line="73"><f a=""><e path="Void"/></f></run>
		<new public="1" set="method" line="38"><f a="time_ms">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="flash.ui.KeyLocation" params="" file="/home/skial/motion-twin/std/flash9/ui/KeyLocation.hx">
		<STANDARD/>
		<RIGHT/>
		<NUM_PAD/>
		<LEFT/>
		<D_PAD/>
	</enum>
	<enum path="flash.text.AntiAliasType" params="" file="/home/skial/motion-twin/std/flash9/text/AntiAliasType.hx">
		<NORMAL/>
		<ADVANCED/>
	</enum>
	<class path="haxe.io.StringInput" params="" file="/home/skial/motion-twin/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="29"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GradientGlowFilter" params="" file="/home/skial/motion-twin/std/flash9/filters/GradientGlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<angle public="1"><c path="Float"/></angle>
		<blurX public="1"><c path="Float"/></blurX>
		<blurY public="1"><c path="Float"/></blurY>
		<colors public="1"><c path="Array"><d/></c></colors>
		<distance public="1"><c path="Float"/></distance>
		<knockout public="1"><e path="Bool"/></knockout>
		<quality public="1"><c path="Int"/></quality>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<strength public="1"><c path="Float"/></strength>
		<type public="1"><e path="flash.filters.BitmapFilterType"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="flash.filters.BitmapFilterType"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileReference" params="" file="/home/skial/motion-twin/std/flash9/net/FileReference.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<creationDate public="1" set="null"><c path="Date"/></creationDate>
		<creator public="1" set="null"><c path="String"/></creator>
		<data public="1" set="null"><c path="flash.utils.ByteArray"/></data>
		<modificationDate public="1" set="null"><c path="Date"/></modificationDate>
		<name public="1" set="null"><c path="String"/></name>
		<size public="1" set="null"><c path="Float"/></size>
		<type public="1" set="null"><c path="String"/></type>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<e path="Bool"/>
</f></browse>
		<cancel public="1" set="method"><f a=""><e path="Void"/></f></cancel>
		<download public="1" set="method"><f a="request:?defaultFileName">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<e path="Void"/>
</f></download>
		<load public="1" set="method"><f a=""><e path="Void"/></f></load>
		<save public="1" set="method"><f a="data:?defaultFileName">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></save>
		<upload public="1" set="method"><f a="request:?uploadDataFieldName:?testUpload">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></upload>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/skial/motion-twin/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="53"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="49"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[
	This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	[
	class MyXml extends haxe.xml.Proxy<"my.xml",MyStructure> {
	}
	...
	var h = new Hash<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// access to "myNode" is only possible
	// if you have an id="myNode" attribute
	// in your XML, and completion works as well
	]
]]></haxe_doc>
	</class>
</haxe>